
stm32f767z-altimeter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006414  080001f8  080001f8  000101f8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000240  08006610  08006610  00016610  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006850  08006850  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  08006850  08006850  00016850  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006858  08006858  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006858  08006858  00016858  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800685c  0800685c  0001685c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  08006860  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000548  200001dc  08006a3c  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000724  08006a3c  00020724  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   000122a3  00000000  00000000  0002020a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000258b  00000000  00000000  000324ad  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000ee8  00000000  00000000  00034a38  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000db0  00000000  00000000  00035920  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000284c2  00000000  00000000  000366d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000ccf5  00000000  00000000  0005eb92  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000fa16c  00000000  00000000  0006b887  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001659f3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004434  00000000  00000000  00165a70  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	; (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	; (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	; (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	200001dc 	.word	0x200001dc
 8000214:	00000000 	.word	0x00000000
 8000218:	080065f4 	.word	0x080065f4

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	; (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	; (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	; (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	200001e0 	.word	0x200001e0
 8000234:	080065f4 	.word	0x080065f4

08000238 <strlen>:
 8000238:	4603      	mov	r3, r0
 800023a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800023e:	2a00      	cmp	r2, #0
 8000240:	d1fb      	bne.n	800023a <strlen+0x2>
 8000242:	1a18      	subs	r0, r3, r0
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr

08000248 <__aeabi_uldivmod>:
 8000248:	b953      	cbnz	r3, 8000260 <__aeabi_uldivmod+0x18>
 800024a:	b94a      	cbnz	r2, 8000260 <__aeabi_uldivmod+0x18>
 800024c:	2900      	cmp	r1, #0
 800024e:	bf08      	it	eq
 8000250:	2800      	cmpeq	r0, #0
 8000252:	bf1c      	itt	ne
 8000254:	f04f 31ff 	movne.w	r1, #4294967295
 8000258:	f04f 30ff 	movne.w	r0, #4294967295
 800025c:	f000 b972 	b.w	8000544 <__aeabi_idiv0>
 8000260:	f1ad 0c08 	sub.w	ip, sp, #8
 8000264:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000268:	f000 f806 	bl	8000278 <__udivmoddi4>
 800026c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000270:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000274:	b004      	add	sp, #16
 8000276:	4770      	bx	lr

08000278 <__udivmoddi4>:
 8000278:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800027c:	9e08      	ldr	r6, [sp, #32]
 800027e:	4604      	mov	r4, r0
 8000280:	4688      	mov	r8, r1
 8000282:	2b00      	cmp	r3, #0
 8000284:	d14b      	bne.n	800031e <__udivmoddi4+0xa6>
 8000286:	428a      	cmp	r2, r1
 8000288:	4615      	mov	r5, r2
 800028a:	d967      	bls.n	800035c <__udivmoddi4+0xe4>
 800028c:	fab2 f282 	clz	r2, r2
 8000290:	b14a      	cbz	r2, 80002a6 <__udivmoddi4+0x2e>
 8000292:	f1c2 0720 	rsb	r7, r2, #32
 8000296:	fa01 f302 	lsl.w	r3, r1, r2
 800029a:	fa20 f707 	lsr.w	r7, r0, r7
 800029e:	4095      	lsls	r5, r2
 80002a0:	ea47 0803 	orr.w	r8, r7, r3
 80002a4:	4094      	lsls	r4, r2
 80002a6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002aa:	0c23      	lsrs	r3, r4, #16
 80002ac:	fbb8 f7fe 	udiv	r7, r8, lr
 80002b0:	fa1f fc85 	uxth.w	ip, r5
 80002b4:	fb0e 8817 	mls	r8, lr, r7, r8
 80002b8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002bc:	fb07 f10c 	mul.w	r1, r7, ip
 80002c0:	4299      	cmp	r1, r3
 80002c2:	d909      	bls.n	80002d8 <__udivmoddi4+0x60>
 80002c4:	18eb      	adds	r3, r5, r3
 80002c6:	f107 30ff 	add.w	r0, r7, #4294967295
 80002ca:	f080 811b 	bcs.w	8000504 <__udivmoddi4+0x28c>
 80002ce:	4299      	cmp	r1, r3
 80002d0:	f240 8118 	bls.w	8000504 <__udivmoddi4+0x28c>
 80002d4:	3f02      	subs	r7, #2
 80002d6:	442b      	add	r3, r5
 80002d8:	1a5b      	subs	r3, r3, r1
 80002da:	b2a4      	uxth	r4, r4
 80002dc:	fbb3 f0fe 	udiv	r0, r3, lr
 80002e0:	fb0e 3310 	mls	r3, lr, r0, r3
 80002e4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002e8:	fb00 fc0c 	mul.w	ip, r0, ip
 80002ec:	45a4      	cmp	ip, r4
 80002ee:	d909      	bls.n	8000304 <__udivmoddi4+0x8c>
 80002f0:	192c      	adds	r4, r5, r4
 80002f2:	f100 33ff 	add.w	r3, r0, #4294967295
 80002f6:	f080 8107 	bcs.w	8000508 <__udivmoddi4+0x290>
 80002fa:	45a4      	cmp	ip, r4
 80002fc:	f240 8104 	bls.w	8000508 <__udivmoddi4+0x290>
 8000300:	3802      	subs	r0, #2
 8000302:	442c      	add	r4, r5
 8000304:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000308:	eba4 040c 	sub.w	r4, r4, ip
 800030c:	2700      	movs	r7, #0
 800030e:	b11e      	cbz	r6, 8000318 <__udivmoddi4+0xa0>
 8000310:	40d4      	lsrs	r4, r2
 8000312:	2300      	movs	r3, #0
 8000314:	e9c6 4300 	strd	r4, r3, [r6]
 8000318:	4639      	mov	r1, r7
 800031a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800031e:	428b      	cmp	r3, r1
 8000320:	d909      	bls.n	8000336 <__udivmoddi4+0xbe>
 8000322:	2e00      	cmp	r6, #0
 8000324:	f000 80eb 	beq.w	80004fe <__udivmoddi4+0x286>
 8000328:	2700      	movs	r7, #0
 800032a:	e9c6 0100 	strd	r0, r1, [r6]
 800032e:	4638      	mov	r0, r7
 8000330:	4639      	mov	r1, r7
 8000332:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000336:	fab3 f783 	clz	r7, r3
 800033a:	2f00      	cmp	r7, #0
 800033c:	d147      	bne.n	80003ce <__udivmoddi4+0x156>
 800033e:	428b      	cmp	r3, r1
 8000340:	d302      	bcc.n	8000348 <__udivmoddi4+0xd0>
 8000342:	4282      	cmp	r2, r0
 8000344:	f200 80fa 	bhi.w	800053c <__udivmoddi4+0x2c4>
 8000348:	1a84      	subs	r4, r0, r2
 800034a:	eb61 0303 	sbc.w	r3, r1, r3
 800034e:	2001      	movs	r0, #1
 8000350:	4698      	mov	r8, r3
 8000352:	2e00      	cmp	r6, #0
 8000354:	d0e0      	beq.n	8000318 <__udivmoddi4+0xa0>
 8000356:	e9c6 4800 	strd	r4, r8, [r6]
 800035a:	e7dd      	b.n	8000318 <__udivmoddi4+0xa0>
 800035c:	b902      	cbnz	r2, 8000360 <__udivmoddi4+0xe8>
 800035e:	deff      	udf	#255	; 0xff
 8000360:	fab2 f282 	clz	r2, r2
 8000364:	2a00      	cmp	r2, #0
 8000366:	f040 808f 	bne.w	8000488 <__udivmoddi4+0x210>
 800036a:	1b49      	subs	r1, r1, r5
 800036c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000370:	fa1f f885 	uxth.w	r8, r5
 8000374:	2701      	movs	r7, #1
 8000376:	fbb1 fcfe 	udiv	ip, r1, lr
 800037a:	0c23      	lsrs	r3, r4, #16
 800037c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000380:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000384:	fb08 f10c 	mul.w	r1, r8, ip
 8000388:	4299      	cmp	r1, r3
 800038a:	d907      	bls.n	800039c <__udivmoddi4+0x124>
 800038c:	18eb      	adds	r3, r5, r3
 800038e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000392:	d202      	bcs.n	800039a <__udivmoddi4+0x122>
 8000394:	4299      	cmp	r1, r3
 8000396:	f200 80cd 	bhi.w	8000534 <__udivmoddi4+0x2bc>
 800039a:	4684      	mov	ip, r0
 800039c:	1a59      	subs	r1, r3, r1
 800039e:	b2a3      	uxth	r3, r4
 80003a0:	fbb1 f0fe 	udiv	r0, r1, lr
 80003a4:	fb0e 1410 	mls	r4, lr, r0, r1
 80003a8:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003ac:	fb08 f800 	mul.w	r8, r8, r0
 80003b0:	45a0      	cmp	r8, r4
 80003b2:	d907      	bls.n	80003c4 <__udivmoddi4+0x14c>
 80003b4:	192c      	adds	r4, r5, r4
 80003b6:	f100 33ff 	add.w	r3, r0, #4294967295
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0x14a>
 80003bc:	45a0      	cmp	r8, r4
 80003be:	f200 80b6 	bhi.w	800052e <__udivmoddi4+0x2b6>
 80003c2:	4618      	mov	r0, r3
 80003c4:	eba4 0408 	sub.w	r4, r4, r8
 80003c8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003cc:	e79f      	b.n	800030e <__udivmoddi4+0x96>
 80003ce:	f1c7 0c20 	rsb	ip, r7, #32
 80003d2:	40bb      	lsls	r3, r7
 80003d4:	fa22 fe0c 	lsr.w	lr, r2, ip
 80003d8:	ea4e 0e03 	orr.w	lr, lr, r3
 80003dc:	fa01 f407 	lsl.w	r4, r1, r7
 80003e0:	fa20 f50c 	lsr.w	r5, r0, ip
 80003e4:	fa21 f30c 	lsr.w	r3, r1, ip
 80003e8:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80003ec:	4325      	orrs	r5, r4
 80003ee:	fbb3 f9f8 	udiv	r9, r3, r8
 80003f2:	0c2c      	lsrs	r4, r5, #16
 80003f4:	fb08 3319 	mls	r3, r8, r9, r3
 80003f8:	fa1f fa8e 	uxth.w	sl, lr
 80003fc:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000400:	fb09 f40a 	mul.w	r4, r9, sl
 8000404:	429c      	cmp	r4, r3
 8000406:	fa02 f207 	lsl.w	r2, r2, r7
 800040a:	fa00 f107 	lsl.w	r1, r0, r7
 800040e:	d90b      	bls.n	8000428 <__udivmoddi4+0x1b0>
 8000410:	eb1e 0303 	adds.w	r3, lr, r3
 8000414:	f109 30ff 	add.w	r0, r9, #4294967295
 8000418:	f080 8087 	bcs.w	800052a <__udivmoddi4+0x2b2>
 800041c:	429c      	cmp	r4, r3
 800041e:	f240 8084 	bls.w	800052a <__udivmoddi4+0x2b2>
 8000422:	f1a9 0902 	sub.w	r9, r9, #2
 8000426:	4473      	add	r3, lr
 8000428:	1b1b      	subs	r3, r3, r4
 800042a:	b2ad      	uxth	r5, r5
 800042c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000430:	fb08 3310 	mls	r3, r8, r0, r3
 8000434:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000438:	fb00 fa0a 	mul.w	sl, r0, sl
 800043c:	45a2      	cmp	sl, r4
 800043e:	d908      	bls.n	8000452 <__udivmoddi4+0x1da>
 8000440:	eb1e 0404 	adds.w	r4, lr, r4
 8000444:	f100 33ff 	add.w	r3, r0, #4294967295
 8000448:	d26b      	bcs.n	8000522 <__udivmoddi4+0x2aa>
 800044a:	45a2      	cmp	sl, r4
 800044c:	d969      	bls.n	8000522 <__udivmoddi4+0x2aa>
 800044e:	3802      	subs	r0, #2
 8000450:	4474      	add	r4, lr
 8000452:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000456:	fba0 8902 	umull	r8, r9, r0, r2
 800045a:	eba4 040a 	sub.w	r4, r4, sl
 800045e:	454c      	cmp	r4, r9
 8000460:	46c2      	mov	sl, r8
 8000462:	464b      	mov	r3, r9
 8000464:	d354      	bcc.n	8000510 <__udivmoddi4+0x298>
 8000466:	d051      	beq.n	800050c <__udivmoddi4+0x294>
 8000468:	2e00      	cmp	r6, #0
 800046a:	d069      	beq.n	8000540 <__udivmoddi4+0x2c8>
 800046c:	ebb1 050a 	subs.w	r5, r1, sl
 8000470:	eb64 0403 	sbc.w	r4, r4, r3
 8000474:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000478:	40fd      	lsrs	r5, r7
 800047a:	40fc      	lsrs	r4, r7
 800047c:	ea4c 0505 	orr.w	r5, ip, r5
 8000480:	e9c6 5400 	strd	r5, r4, [r6]
 8000484:	2700      	movs	r7, #0
 8000486:	e747      	b.n	8000318 <__udivmoddi4+0xa0>
 8000488:	f1c2 0320 	rsb	r3, r2, #32
 800048c:	fa20 f703 	lsr.w	r7, r0, r3
 8000490:	4095      	lsls	r5, r2
 8000492:	fa01 f002 	lsl.w	r0, r1, r2
 8000496:	fa21 f303 	lsr.w	r3, r1, r3
 800049a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800049e:	4338      	orrs	r0, r7
 80004a0:	0c01      	lsrs	r1, r0, #16
 80004a2:	fbb3 f7fe 	udiv	r7, r3, lr
 80004a6:	fa1f f885 	uxth.w	r8, r5
 80004aa:	fb0e 3317 	mls	r3, lr, r7, r3
 80004ae:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004b2:	fb07 f308 	mul.w	r3, r7, r8
 80004b6:	428b      	cmp	r3, r1
 80004b8:	fa04 f402 	lsl.w	r4, r4, r2
 80004bc:	d907      	bls.n	80004ce <__udivmoddi4+0x256>
 80004be:	1869      	adds	r1, r5, r1
 80004c0:	f107 3cff 	add.w	ip, r7, #4294967295
 80004c4:	d22f      	bcs.n	8000526 <__udivmoddi4+0x2ae>
 80004c6:	428b      	cmp	r3, r1
 80004c8:	d92d      	bls.n	8000526 <__udivmoddi4+0x2ae>
 80004ca:	3f02      	subs	r7, #2
 80004cc:	4429      	add	r1, r5
 80004ce:	1acb      	subs	r3, r1, r3
 80004d0:	b281      	uxth	r1, r0
 80004d2:	fbb3 f0fe 	udiv	r0, r3, lr
 80004d6:	fb0e 3310 	mls	r3, lr, r0, r3
 80004da:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004de:	fb00 f308 	mul.w	r3, r0, r8
 80004e2:	428b      	cmp	r3, r1
 80004e4:	d907      	bls.n	80004f6 <__udivmoddi4+0x27e>
 80004e6:	1869      	adds	r1, r5, r1
 80004e8:	f100 3cff 	add.w	ip, r0, #4294967295
 80004ec:	d217      	bcs.n	800051e <__udivmoddi4+0x2a6>
 80004ee:	428b      	cmp	r3, r1
 80004f0:	d915      	bls.n	800051e <__udivmoddi4+0x2a6>
 80004f2:	3802      	subs	r0, #2
 80004f4:	4429      	add	r1, r5
 80004f6:	1ac9      	subs	r1, r1, r3
 80004f8:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004fc:	e73b      	b.n	8000376 <__udivmoddi4+0xfe>
 80004fe:	4637      	mov	r7, r6
 8000500:	4630      	mov	r0, r6
 8000502:	e709      	b.n	8000318 <__udivmoddi4+0xa0>
 8000504:	4607      	mov	r7, r0
 8000506:	e6e7      	b.n	80002d8 <__udivmoddi4+0x60>
 8000508:	4618      	mov	r0, r3
 800050a:	e6fb      	b.n	8000304 <__udivmoddi4+0x8c>
 800050c:	4541      	cmp	r1, r8
 800050e:	d2ab      	bcs.n	8000468 <__udivmoddi4+0x1f0>
 8000510:	ebb8 0a02 	subs.w	sl, r8, r2
 8000514:	eb69 020e 	sbc.w	r2, r9, lr
 8000518:	3801      	subs	r0, #1
 800051a:	4613      	mov	r3, r2
 800051c:	e7a4      	b.n	8000468 <__udivmoddi4+0x1f0>
 800051e:	4660      	mov	r0, ip
 8000520:	e7e9      	b.n	80004f6 <__udivmoddi4+0x27e>
 8000522:	4618      	mov	r0, r3
 8000524:	e795      	b.n	8000452 <__udivmoddi4+0x1da>
 8000526:	4667      	mov	r7, ip
 8000528:	e7d1      	b.n	80004ce <__udivmoddi4+0x256>
 800052a:	4681      	mov	r9, r0
 800052c:	e77c      	b.n	8000428 <__udivmoddi4+0x1b0>
 800052e:	3802      	subs	r0, #2
 8000530:	442c      	add	r4, r5
 8000532:	e747      	b.n	80003c4 <__udivmoddi4+0x14c>
 8000534:	f1ac 0c02 	sub.w	ip, ip, #2
 8000538:	442b      	add	r3, r5
 800053a:	e72f      	b.n	800039c <__udivmoddi4+0x124>
 800053c:	4638      	mov	r0, r7
 800053e:	e708      	b.n	8000352 <__udivmoddi4+0xda>
 8000540:	4637      	mov	r7, r6
 8000542:	e6e9      	b.n	8000318 <__udivmoddi4+0xa0>

08000544 <__aeabi_idiv0>:
 8000544:	4770      	bx	lr
 8000546:	bf00      	nop

08000548 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000548:	b580      	push	{r7, lr}
 800054a:	b09a      	sub	sp, #104	; 0x68
 800054c:	af04      	add	r7, sp, #16
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800054e:	f000 fd72 	bl	8001036 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000552:	f000 f8d7 	bl	8000704 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000556:	f000 fa4b 	bl	80009f0 <MX_GPIO_Init>
  MX_ETH_Init();
 800055a:	f000 f96b 	bl	8000834 <MX_ETH_Init>
  MX_USART3_UART_Init();
 800055e:	f000 f9e9 	bl	8000934 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000562:	f000 fa17 	bl	8000994 <MX_USB_OTG_FS_PCD_Init>
  MX_I2C1_Init();
 8000566:	f000 f9a5 	bl	80008b4 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  /* MPL3115A2 INITIALIZATION */

  // check MPL3115A2 sensor by reading WHO_AM_I register
  if (HAL_I2C_Mem_Read(&hi2c1, MPL3115A2_DEV_ADDR, MPL3115A2_REG_WHO_AM_I, 1, i2cRxBuff, 1, 100) == HAL_OK){
 800056a:	2364      	movs	r3, #100	; 0x64
 800056c:	9302      	str	r3, [sp, #8]
 800056e:	2301      	movs	r3, #1
 8000570:	9301      	str	r3, [sp, #4]
 8000572:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000576:	9300      	str	r3, [sp, #0]
 8000578:	2301      	movs	r3, #1
 800057a:	220c      	movs	r2, #12
 800057c:	21c0      	movs	r1, #192	; 0xc0
 800057e:	485f      	ldr	r0, [pc, #380]	; (80006fc <main+0x1b4>)
 8000580:	f001 feac 	bl	80022dc <HAL_I2C_Mem_Read>
 8000584:	4603      	mov	r3, r0
 8000586:	2b00      	cmp	r3, #0
 8000588:	d11c      	bne.n	80005c4 <main+0x7c>
	  if (i2cRxBuff[0] == MPL3115A2_REG_WHO_AM_VALUE) {
 800058a:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800058e:	2bc4      	cmp	r3, #196	; 0xc4
 8000590:	d112      	bne.n	80005b8 <main+0x70>
		  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin); // BLUE LED set
 8000592:	2180      	movs	r1, #128	; 0x80
 8000594:	485a      	ldr	r0, [pc, #360]	; (8000700 <main+0x1b8>)
 8000596:	f001 fce2 	bl	8001f5e <HAL_GPIO_TogglePin>

		  //read system mode
		  HAL_I2C_Mem_Read(&hi2c1, MPL3115A2_DEV_ADDR, MPL3115A2_REG_SYSMOD, 1, &i2cRxBuff[1], 1, 100);
 800059a:	2364      	movs	r3, #100	; 0x64
 800059c:	9302      	str	r3, [sp, #8]
 800059e:	2301      	movs	r3, #1
 80005a0:	9301      	str	r3, [sp, #4]
 80005a2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80005a6:	3301      	adds	r3, #1
 80005a8:	9300      	str	r3, [sp, #0]
 80005aa:	2301      	movs	r3, #1
 80005ac:	2211      	movs	r2, #17
 80005ae:	21c0      	movs	r1, #192	; 0xc0
 80005b0:	4852      	ldr	r0, [pc, #328]	; (80006fc <main+0x1b4>)
 80005b2:	f001 fe93 	bl	80022dc <HAL_I2C_Mem_Read>
 80005b6:	e00a      	b.n	80005ce <main+0x86>

	  } else {
		  HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin); // RED LED set
 80005b8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80005bc:	4850      	ldr	r0, [pc, #320]	; (8000700 <main+0x1b8>)
 80005be:	f001 fcce 	bl	8001f5e <HAL_GPIO_TogglePin>
 80005c2:	e004      	b.n	80005ce <main+0x86>
	  }
  } else {
	  HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin); // RED LED set
 80005c4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80005c8:	484d      	ldr	r0, [pc, #308]	; (8000700 <main+0x1b8>)
 80005ca:	f001 fcc8 	bl	8001f5e <HAL_GPIO_TogglePin>
  }

  i2cTxBuff=0x07;
 80005ce:	2307      	movs	r3, #7
 80005d0:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  HAL_I2C_Mem_Write(&hi2c1, MPL3115A2_DEV_ADDR, MPL3115A2_REG_PT_DATA_CFG, 1, &i2cTxBuff, 1, 100);
 80005d4:	2364      	movs	r3, #100	; 0x64
 80005d6:	9302      	str	r3, [sp, #8]
 80005d8:	2301      	movs	r3, #1
 80005da:	9301      	str	r3, [sp, #4]
 80005dc:	f107 0347 	add.w	r3, r7, #71	; 0x47
 80005e0:	9300      	str	r3, [sp, #0]
 80005e2:	2301      	movs	r3, #1
 80005e4:	2213      	movs	r2, #19
 80005e6:	21c0      	movs	r1, #192	; 0xc0
 80005e8:	4844      	ldr	r0, [pc, #272]	; (80006fc <main+0x1b4>)
 80005ea:	f001 fd63 	bl	80020b4 <HAL_I2C_Mem_Write>

  i2cTxBuff=0x80;
 80005ee:	2380      	movs	r3, #128	; 0x80
 80005f0:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  HAL_I2C_Mem_Write(&hi2c1, MPL3115A2_DEV_ADDR, MPL3115A2_REG_CTRL_REG4, 1, &i2cTxBuff, 1, 100);
 80005f4:	2364      	movs	r3, #100	; 0x64
 80005f6:	9302      	str	r3, [sp, #8]
 80005f8:	2301      	movs	r3, #1
 80005fa:	9301      	str	r3, [sp, #4]
 80005fc:	f107 0347 	add.w	r3, r7, #71	; 0x47
 8000600:	9300      	str	r3, [sp, #0]
 8000602:	2301      	movs	r3, #1
 8000604:	2229      	movs	r2, #41	; 0x29
 8000606:	21c0      	movs	r1, #192	; 0xc0
 8000608:	483c      	ldr	r0, [pc, #240]	; (80006fc <main+0x1b4>)
 800060a:	f001 fd53 	bl	80020b4 <HAL_I2C_Mem_Write>

  i2cTxBuff=0x80;
 800060e:	2380      	movs	r3, #128	; 0x80
 8000610:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  HAL_I2C_Mem_Write(&hi2c1, MPL3115A2_DEV_ADDR, MPL3115A2_REG_CTRL_REG5, 1, &i2cTxBuff, 1, 100);
 8000614:	2364      	movs	r3, #100	; 0x64
 8000616:	9302      	str	r3, [sp, #8]
 8000618:	2301      	movs	r3, #1
 800061a:	9301      	str	r3, [sp, #4]
 800061c:	f107 0347 	add.w	r3, r7, #71	; 0x47
 8000620:	9300      	str	r3, [sp, #0]
 8000622:	2301      	movs	r3, #1
 8000624:	222a      	movs	r2, #42	; 0x2a
 8000626:	21c0      	movs	r1, #192	; 0xc0
 8000628:	4834      	ldr	r0, [pc, #208]	; (80006fc <main+0x1b4>)
 800062a:	f001 fd43 	bl	80020b4 <HAL_I2C_Mem_Write>

  // put sensor to ACTIVE mode
  i2cTxBuff=0xA1;
 800062e:	23a1      	movs	r3, #161	; 0xa1
 8000630:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  HAL_I2C_Mem_Write(&hi2c1, MPL3115A2_DEV_ADDR, MPL3115A2_REG_CTRL_REG1, 1, &i2cTxBuff, 1, 100);
 8000634:	2364      	movs	r3, #100	; 0x64
 8000636:	9302      	str	r3, [sp, #8]
 8000638:	2301      	movs	r3, #1
 800063a:	9301      	str	r3, [sp, #4]
 800063c:	f107 0347 	add.w	r3, r7, #71	; 0x47
 8000640:	9300      	str	r3, [sp, #0]
 8000642:	2301      	movs	r3, #1
 8000644:	2226      	movs	r2, #38	; 0x26
 8000646:	21c0      	movs	r1, #192	; 0xc0
 8000648:	482c      	ldr	r0, [pc, #176]	; (80006fc <main+0x1b4>)
 800064a:	f001 fd33 	bl	80020b4 <HAL_I2C_Mem_Write>

  //read system mode
  HAL_I2C_Mem_Read(&hi2c1, MPL3115A2_DEV_ADDR, MPL3115A2_REG_SYSMOD, 1, &i2cRxBuff[1], 1, 100);
 800064e:	2364      	movs	r3, #100	; 0x64
 8000650:	9302      	str	r3, [sp, #8]
 8000652:	2301      	movs	r3, #1
 8000654:	9301      	str	r3, [sp, #4]
 8000656:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800065a:	3301      	adds	r3, #1
 800065c:	9300      	str	r3, [sp, #0]
 800065e:	2301      	movs	r3, #1
 8000660:	2211      	movs	r2, #17
 8000662:	21c0      	movs	r1, #192	; 0xc0
 8000664:	4825      	ldr	r0, [pc, #148]	; (80006fc <main+0x1b4>)
 8000666:	f001 fe39 	bl	80022dc <HAL_I2C_Mem_Read>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
 800066a:	2101      	movs	r1, #1
 800066c:	4824      	ldr	r0, [pc, #144]	; (8000700 <main+0x1b8>)
 800066e:	f001 fc76 	bl	8001f5e <HAL_GPIO_TogglePin>
	  HAL_Delay(50);
 8000672:	2032      	movs	r0, #50	; 0x32
 8000674:	f000 fd3c 	bl	80010f0 <HAL_Delay>

	  // read all data at once
	  if (HAL_I2C_Mem_Read(&hi2c1, MPL3115A2_DEV_ADDR, MPL3115A2_REG_OUT_P_MSB, 1, i2cRxBuff, 5, 100) == HAL_OK) {
 8000678:	2364      	movs	r3, #100	; 0x64
 800067a:	9302      	str	r3, [sp, #8]
 800067c:	2305      	movs	r3, #5
 800067e:	9301      	str	r3, [sp, #4]
 8000680:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000684:	9300      	str	r3, [sp, #0]
 8000686:	2301      	movs	r3, #1
 8000688:	2201      	movs	r2, #1
 800068a:	21c0      	movs	r1, #192	; 0xc0
 800068c:	481b      	ldr	r0, [pc, #108]	; (80006fc <main+0x1b4>)
 800068e:	f001 fe25 	bl	80022dc <HAL_I2C_Mem_Read>
 8000692:	4603      	mov	r3, r0
 8000694:	2b00      	cmp	r3, #0
 8000696:	d1e8      	bne.n	800066a <main+0x122>

		  pData = i2cRxBuff[0]<<24 | i2cRxBuff[1]<<16 | i2cRxBuff[2] << 8;
 8000698:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800069c:	061a      	lsls	r2, r3, #24
 800069e:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 80006a2:	041b      	lsls	r3, r3, #16
 80006a4:	431a      	orrs	r2, r3
 80006a6:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 80006aa:	021b      	lsls	r3, r3, #8
 80006ac:	4313      	orrs	r3, r2
 80006ae:	657b      	str	r3, [r7, #84]	; 0x54
		  pData_f = pData / 65536;
 80006b0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80006b2:	2b00      	cmp	r3, #0
 80006b4:	da03      	bge.n	80006be <main+0x176>
 80006b6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80006ba:	441a      	add	r2, r3
 80006bc:	4613      	mov	r3, r2
 80006be:	141b      	asrs	r3, r3, #16
 80006c0:	ee07 3a90 	vmov	s15, r3
 80006c4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80006c8:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50

		  tData = i2cRxBuff[3]<<8 | i2cRxBuff[4];
 80006cc:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80006d0:	021b      	lsls	r3, r3, #8
 80006d2:	b21a      	sxth	r2, r3
 80006d4:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 80006d8:	b21b      	sxth	r3, r3
 80006da:	4313      	orrs	r3, r2
 80006dc:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
		  tData_f = tData / 256;
 80006e0:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 80006e4:	2b00      	cmp	r3, #0
 80006e6:	da00      	bge.n	80006ea <main+0x1a2>
 80006e8:	33ff      	adds	r3, #255	; 0xff
 80006ea:	121b      	asrs	r3, r3, #8
 80006ec:	b21b      	sxth	r3, r3
 80006ee:	ee07 3a90 	vmov	s15, r3
 80006f2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80006f6:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
	  HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
 80006fa:	e7b6      	b.n	800066a <main+0x122>
 80006fc:	20000284 	.word	0x20000284
 8000700:	40020400 	.word	0x40020400

08000704 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	b0b8      	sub	sp, #224	; 0xe0
 8000708:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800070a:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800070e:	2234      	movs	r2, #52	; 0x34
 8000710:	2100      	movs	r1, #0
 8000712:	4618      	mov	r0, r3
 8000714:	f004 facc 	bl	8004cb0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000718:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800071c:	2200      	movs	r2, #0
 800071e:	601a      	str	r2, [r3, #0]
 8000720:	605a      	str	r2, [r3, #4]
 8000722:	609a      	str	r2, [r3, #8]
 8000724:	60da      	str	r2, [r3, #12]
 8000726:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000728:	f107 0308 	add.w	r3, r7, #8
 800072c:	2290      	movs	r2, #144	; 0x90
 800072e:	2100      	movs	r1, #0
 8000730:	4618      	mov	r0, r3
 8000732:	f004 fabd 	bl	8004cb0 <memset>

  /** Configure LSE Drive Capability 
  */
  HAL_PWR_EnableBkUpAccess();
 8000736:	f002 fadb 	bl	8002cf0 <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800073a:	4b3b      	ldr	r3, [pc, #236]	; (8000828 <SystemClock_Config+0x124>)
 800073c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800073e:	4a3a      	ldr	r2, [pc, #232]	; (8000828 <SystemClock_Config+0x124>)
 8000740:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000744:	6413      	str	r3, [r2, #64]	; 0x40
 8000746:	4b38      	ldr	r3, [pc, #224]	; (8000828 <SystemClock_Config+0x124>)
 8000748:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800074a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800074e:	607b      	str	r3, [r7, #4]
 8000750:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000752:	4b36      	ldr	r3, [pc, #216]	; (800082c <SystemClock_Config+0x128>)
 8000754:	681b      	ldr	r3, [r3, #0]
 8000756:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800075a:	4a34      	ldr	r2, [pc, #208]	; (800082c <SystemClock_Config+0x128>)
 800075c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000760:	6013      	str	r3, [r2, #0]
 8000762:	4b32      	ldr	r3, [pc, #200]	; (800082c <SystemClock_Config+0x128>)
 8000764:	681b      	ldr	r3, [r3, #0]
 8000766:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800076a:	603b      	str	r3, [r7, #0]
 800076c:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800076e:	2301      	movs	r3, #1
 8000770:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000774:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000778:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800077c:	2302      	movs	r3, #2
 800077e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000782:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000786:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 4;
 800078a:	2304      	movs	r3, #4
 800078c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 96;
 8000790:	2360      	movs	r3, #96	; 0x60
 8000792:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000796:	2302      	movs	r3, #2
 8000798:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800079c:	2304      	movs	r3, #4
 800079e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007a2:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80007a6:	4618      	mov	r0, r3
 80007a8:	f002 fb02 	bl	8002db0 <HAL_RCC_OscConfig>
 80007ac:	4603      	mov	r3, r0
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	d001      	beq.n	80007b6 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 80007b2:	f000 f9bf 	bl	8000b34 <Error_Handler>
  }
  /** Activate the Over-Drive mode 
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80007b6:	f002 faab 	bl	8002d10 <HAL_PWREx_EnableOverDrive>
 80007ba:	4603      	mov	r3, r0
 80007bc:	2b00      	cmp	r3, #0
 80007be:	d001      	beq.n	80007c4 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80007c0:	f000 f9b8 	bl	8000b34 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007c4:	230f      	movs	r3, #15
 80007c6:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007ca:	2302      	movs	r3, #2
 80007cc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007d0:	2300      	movs	r3, #0
 80007d2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80007d6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007da:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007de:	2300      	movs	r3, #0
 80007e0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80007e4:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80007e8:	2103      	movs	r1, #3
 80007ea:	4618      	mov	r0, r3
 80007ec:	f002 fd52 	bl	8003294 <HAL_RCC_ClockConfig>
 80007f0:	4603      	mov	r3, r0
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	d001      	beq.n	80007fa <SystemClock_Config+0xf6>
  {
    Error_Handler();
 80007f6:	f000 f99d 	bl	8000b34 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_I2C1
 80007fa:	4b0d      	ldr	r3, [pc, #52]	; (8000830 <SystemClock_Config+0x12c>)
 80007fc:	60bb      	str	r3, [r7, #8]
                              |RCC_PERIPHCLK_CLK48;
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80007fe:	2300      	movs	r3, #0
 8000800:	657b      	str	r3, [r7, #84]	; 0x54
  PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000802:	2300      	movs	r3, #0
 8000804:	66fb      	str	r3, [r7, #108]	; 0x6c
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8000806:	2300      	movs	r3, #0
 8000808:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800080c:	f107 0308 	add.w	r3, r7, #8
 8000810:	4618      	mov	r0, r3
 8000812:	f002 ff33 	bl	800367c <HAL_RCCEx_PeriphCLKConfig>
 8000816:	4603      	mov	r3, r0
 8000818:	2b00      	cmp	r3, #0
 800081a:	d001      	beq.n	8000820 <SystemClock_Config+0x11c>
  {
    Error_Handler();
 800081c:	f000 f98a 	bl	8000b34 <Error_Handler>
  }
}
 8000820:	bf00      	nop
 8000822:	37e0      	adds	r7, #224	; 0xe0
 8000824:	46bd      	mov	sp, r7
 8000826:	bd80      	pop	{r7, pc}
 8000828:	40023800 	.word	0x40023800
 800082c:	40007000 	.word	0x40007000
 8000830:	00204100 	.word	0x00204100

08000834 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	af00      	add	r7, sp, #0
  /* USER CODE END ETH_Init 0 */

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000838:	4b1c      	ldr	r3, [pc, #112]	; (80008ac <MX_ETH_Init+0x78>)
 800083a:	4a1d      	ldr	r2, [pc, #116]	; (80008b0 <MX_ETH_Init+0x7c>)
 800083c:	601a      	str	r2, [r3, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 800083e:	4b1b      	ldr	r3, [pc, #108]	; (80008ac <MX_ETH_Init+0x78>)
 8000840:	2201      	movs	r2, #1
 8000842:	605a      	str	r2, [r3, #4]
  heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 8000844:	4b19      	ldr	r3, [pc, #100]	; (80008ac <MX_ETH_Init+0x78>)
 8000846:	2200      	movs	r2, #0
 8000848:	821a      	strh	r2, [r3, #16]
  heth.Init.MACAddr[0] =   0x00;
 800084a:	4b18      	ldr	r3, [pc, #96]	; (80008ac <MX_ETH_Init+0x78>)
 800084c:	695b      	ldr	r3, [r3, #20]
 800084e:	2200      	movs	r2, #0
 8000850:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[1] =   0x80;
 8000852:	4b16      	ldr	r3, [pc, #88]	; (80008ac <MX_ETH_Init+0x78>)
 8000854:	695b      	ldr	r3, [r3, #20]
 8000856:	3301      	adds	r3, #1
 8000858:	2280      	movs	r2, #128	; 0x80
 800085a:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[2] =   0xE1;
 800085c:	4b13      	ldr	r3, [pc, #76]	; (80008ac <MX_ETH_Init+0x78>)
 800085e:	695b      	ldr	r3, [r3, #20]
 8000860:	3302      	adds	r3, #2
 8000862:	22e1      	movs	r2, #225	; 0xe1
 8000864:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[3] =   0x00;
 8000866:	4b11      	ldr	r3, [pc, #68]	; (80008ac <MX_ETH_Init+0x78>)
 8000868:	695b      	ldr	r3, [r3, #20]
 800086a:	3303      	adds	r3, #3
 800086c:	2200      	movs	r2, #0
 800086e:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[4] =   0x00;
 8000870:	4b0e      	ldr	r3, [pc, #56]	; (80008ac <MX_ETH_Init+0x78>)
 8000872:	695b      	ldr	r3, [r3, #20]
 8000874:	3304      	adds	r3, #4
 8000876:	2200      	movs	r2, #0
 8000878:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[5] =   0x00;
 800087a:	4b0c      	ldr	r3, [pc, #48]	; (80008ac <MX_ETH_Init+0x78>)
 800087c:	695b      	ldr	r3, [r3, #20]
 800087e:	3305      	adds	r3, #5
 8000880:	2200      	movs	r2, #0
 8000882:	701a      	strb	r2, [r3, #0]
  heth.Init.RxMode = ETH_RXPOLLING_MODE;
 8000884:	4b09      	ldr	r3, [pc, #36]	; (80008ac <MX_ETH_Init+0x78>)
 8000886:	2200      	movs	r2, #0
 8000888:	619a      	str	r2, [r3, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 800088a:	4b08      	ldr	r3, [pc, #32]	; (80008ac <MX_ETH_Init+0x78>)
 800088c:	2200      	movs	r2, #0
 800088e:	61da      	str	r2, [r3, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 8000890:	4b06      	ldr	r3, [pc, #24]	; (80008ac <MX_ETH_Init+0x78>)
 8000892:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8000896:	621a      	str	r2, [r3, #32]

  /* USER CODE BEGIN MACADDRESS */
    
  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000898:	4804      	ldr	r0, [pc, #16]	; (80008ac <MX_ETH_Init+0x78>)
 800089a:	f000 fd31 	bl	8001300 <HAL_ETH_Init>
 800089e:	4603      	mov	r3, r0
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	d001      	beq.n	80008a8 <MX_ETH_Init+0x74>
  {
    Error_Handler();
 80008a4:	f000 f946 	bl	8000b34 <Error_Handler>
  }
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 80008a8:	bf00      	nop
 80008aa:	bd80      	pop	{r7, pc}
 80008ac:	200006d4 	.word	0x200006d4
 80008b0:	40028000 	.word	0x40028000

080008b4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80008b8:	4b1b      	ldr	r3, [pc, #108]	; (8000928 <MX_I2C1_Init+0x74>)
 80008ba:	4a1c      	ldr	r2, [pc, #112]	; (800092c <MX_I2C1_Init+0x78>)
 80008bc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20303E5D;
 80008be:	4b1a      	ldr	r3, [pc, #104]	; (8000928 <MX_I2C1_Init+0x74>)
 80008c0:	4a1b      	ldr	r2, [pc, #108]	; (8000930 <MX_I2C1_Init+0x7c>)
 80008c2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80008c4:	4b18      	ldr	r3, [pc, #96]	; (8000928 <MX_I2C1_Init+0x74>)
 80008c6:	2200      	movs	r2, #0
 80008c8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80008ca:	4b17      	ldr	r3, [pc, #92]	; (8000928 <MX_I2C1_Init+0x74>)
 80008cc:	2201      	movs	r2, #1
 80008ce:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80008d0:	4b15      	ldr	r3, [pc, #84]	; (8000928 <MX_I2C1_Init+0x74>)
 80008d2:	2200      	movs	r2, #0
 80008d4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80008d6:	4b14      	ldr	r3, [pc, #80]	; (8000928 <MX_I2C1_Init+0x74>)
 80008d8:	2200      	movs	r2, #0
 80008da:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80008dc:	4b12      	ldr	r3, [pc, #72]	; (8000928 <MX_I2C1_Init+0x74>)
 80008de:	2200      	movs	r2, #0
 80008e0:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80008e2:	4b11      	ldr	r3, [pc, #68]	; (8000928 <MX_I2C1_Init+0x74>)
 80008e4:	2200      	movs	r2, #0
 80008e6:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80008e8:	4b0f      	ldr	r3, [pc, #60]	; (8000928 <MX_I2C1_Init+0x74>)
 80008ea:	2200      	movs	r2, #0
 80008ec:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80008ee:	480e      	ldr	r0, [pc, #56]	; (8000928 <MX_I2C1_Init+0x74>)
 80008f0:	f001 fb50 	bl	8001f94 <HAL_I2C_Init>
 80008f4:	4603      	mov	r3, r0
 80008f6:	2b00      	cmp	r3, #0
 80008f8:	d001      	beq.n	80008fe <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80008fa:	f000 f91b 	bl	8000b34 <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80008fe:	2100      	movs	r1, #0
 8000900:	4809      	ldr	r0, [pc, #36]	; (8000928 <MX_I2C1_Init+0x74>)
 8000902:	f002 f821 	bl	8002948 <HAL_I2CEx_ConfigAnalogFilter>
 8000906:	4603      	mov	r3, r0
 8000908:	2b00      	cmp	r3, #0
 800090a:	d001      	beq.n	8000910 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800090c:	f000 f912 	bl	8000b34 <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000910:	2100      	movs	r1, #0
 8000912:	4805      	ldr	r0, [pc, #20]	; (8000928 <MX_I2C1_Init+0x74>)
 8000914:	f002 f863 	bl	80029de <HAL_I2CEx_ConfigDigitalFilter>
 8000918:	4603      	mov	r3, r0
 800091a:	2b00      	cmp	r3, #0
 800091c:	d001      	beq.n	8000922 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800091e:	f000 f909 	bl	8000b34 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000922:	bf00      	nop
 8000924:	bd80      	pop	{r7, pc}
 8000926:	bf00      	nop
 8000928:	20000284 	.word	0x20000284
 800092c:	40005400 	.word	0x40005400
 8000930:	20303e5d 	.word	0x20303e5d

08000934 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000938:	4b14      	ldr	r3, [pc, #80]	; (800098c <MX_USART3_UART_Init+0x58>)
 800093a:	4a15      	ldr	r2, [pc, #84]	; (8000990 <MX_USART3_UART_Init+0x5c>)
 800093c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800093e:	4b13      	ldr	r3, [pc, #76]	; (800098c <MX_USART3_UART_Init+0x58>)
 8000940:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000944:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000946:	4b11      	ldr	r3, [pc, #68]	; (800098c <MX_USART3_UART_Init+0x58>)
 8000948:	2200      	movs	r2, #0
 800094a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800094c:	4b0f      	ldr	r3, [pc, #60]	; (800098c <MX_USART3_UART_Init+0x58>)
 800094e:	2200      	movs	r2, #0
 8000950:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000952:	4b0e      	ldr	r3, [pc, #56]	; (800098c <MX_USART3_UART_Init+0x58>)
 8000954:	2200      	movs	r2, #0
 8000956:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000958:	4b0c      	ldr	r3, [pc, #48]	; (800098c <MX_USART3_UART_Init+0x58>)
 800095a:	220c      	movs	r2, #12
 800095c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800095e:	4b0b      	ldr	r3, [pc, #44]	; (800098c <MX_USART3_UART_Init+0x58>)
 8000960:	2200      	movs	r2, #0
 8000962:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000964:	4b09      	ldr	r3, [pc, #36]	; (800098c <MX_USART3_UART_Init+0x58>)
 8000966:	2200      	movs	r2, #0
 8000968:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800096a:	4b08      	ldr	r3, [pc, #32]	; (800098c <MX_USART3_UART_Init+0x58>)
 800096c:	2200      	movs	r2, #0
 800096e:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000970:	4b06      	ldr	r3, [pc, #24]	; (800098c <MX_USART3_UART_Init+0x58>)
 8000972:	2200      	movs	r2, #0
 8000974:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000976:	4805      	ldr	r0, [pc, #20]	; (800098c <MX_USART3_UART_Init+0x58>)
 8000978:	f003 faa6 	bl	8003ec8 <HAL_UART_Init>
 800097c:	4603      	mov	r3, r0
 800097e:	2b00      	cmp	r3, #0
 8000980:	d001      	beq.n	8000986 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000982:	f000 f8d7 	bl	8000b34 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000986:	bf00      	nop
 8000988:	bd80      	pop	{r7, pc}
 800098a:	bf00      	nop
 800098c:	20000204 	.word	0x20000204
 8000990:	40004800 	.word	0x40004800

08000994 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000998:	4b14      	ldr	r3, [pc, #80]	; (80009ec <MX_USB_OTG_FS_PCD_Init+0x58>)
 800099a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800099e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 80009a0:	4b12      	ldr	r3, [pc, #72]	; (80009ec <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009a2:	2206      	movs	r2, #6
 80009a4:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80009a6:	4b11      	ldr	r3, [pc, #68]	; (80009ec <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009a8:	2202      	movs	r2, #2
 80009aa:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80009ac:	4b0f      	ldr	r3, [pc, #60]	; (80009ec <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009ae:	2200      	movs	r2, #0
 80009b0:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80009b2:	4b0e      	ldr	r3, [pc, #56]	; (80009ec <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009b4:	2202      	movs	r2, #2
 80009b6:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 80009b8:	4b0c      	ldr	r3, [pc, #48]	; (80009ec <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009ba:	2201      	movs	r2, #1
 80009bc:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80009be:	4b0b      	ldr	r3, [pc, #44]	; (80009ec <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009c0:	2200      	movs	r2, #0
 80009c2:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80009c4:	4b09      	ldr	r3, [pc, #36]	; (80009ec <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009c6:	2200      	movs	r2, #0
 80009c8:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80009ca:	4b08      	ldr	r3, [pc, #32]	; (80009ec <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009cc:	2201      	movs	r2, #1
 80009ce:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80009d0:	4b06      	ldr	r3, [pc, #24]	; (80009ec <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009d2:	2200      	movs	r2, #0
 80009d4:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80009d6:	4805      	ldr	r0, [pc, #20]	; (80009ec <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009d8:	f002 f84d 	bl	8002a76 <HAL_PCD_Init>
 80009dc:	4603      	mov	r3, r0
 80009de:	2b00      	cmp	r3, #0
 80009e0:	d001      	beq.n	80009e6 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 80009e2:	f000 f8a7 	bl	8000b34 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80009e6:	bf00      	nop
 80009e8:	bd80      	pop	{r7, pc}
 80009ea:	bf00      	nop
 80009ec:	200002d0 	.word	0x200002d0

080009f0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	b08c      	sub	sp, #48	; 0x30
 80009f4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009f6:	f107 031c 	add.w	r3, r7, #28
 80009fa:	2200      	movs	r2, #0
 80009fc:	601a      	str	r2, [r3, #0]
 80009fe:	605a      	str	r2, [r3, #4]
 8000a00:	609a      	str	r2, [r3, #8]
 8000a02:	60da      	str	r2, [r3, #12]
 8000a04:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a06:	4b46      	ldr	r3, [pc, #280]	; (8000b20 <MX_GPIO_Init+0x130>)
 8000a08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a0a:	4a45      	ldr	r2, [pc, #276]	; (8000b20 <MX_GPIO_Init+0x130>)
 8000a0c:	f043 0304 	orr.w	r3, r3, #4
 8000a10:	6313      	str	r3, [r2, #48]	; 0x30
 8000a12:	4b43      	ldr	r3, [pc, #268]	; (8000b20 <MX_GPIO_Init+0x130>)
 8000a14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a16:	f003 0304 	and.w	r3, r3, #4
 8000a1a:	61bb      	str	r3, [r7, #24]
 8000a1c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a1e:	4b40      	ldr	r3, [pc, #256]	; (8000b20 <MX_GPIO_Init+0x130>)
 8000a20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a22:	4a3f      	ldr	r2, [pc, #252]	; (8000b20 <MX_GPIO_Init+0x130>)
 8000a24:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a28:	6313      	str	r3, [r2, #48]	; 0x30
 8000a2a:	4b3d      	ldr	r3, [pc, #244]	; (8000b20 <MX_GPIO_Init+0x130>)
 8000a2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a32:	617b      	str	r3, [r7, #20]
 8000a34:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a36:	4b3a      	ldr	r3, [pc, #232]	; (8000b20 <MX_GPIO_Init+0x130>)
 8000a38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a3a:	4a39      	ldr	r2, [pc, #228]	; (8000b20 <MX_GPIO_Init+0x130>)
 8000a3c:	f043 0301 	orr.w	r3, r3, #1
 8000a40:	6313      	str	r3, [r2, #48]	; 0x30
 8000a42:	4b37      	ldr	r3, [pc, #220]	; (8000b20 <MX_GPIO_Init+0x130>)
 8000a44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a46:	f003 0301 	and.w	r3, r3, #1
 8000a4a:	613b      	str	r3, [r7, #16]
 8000a4c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a4e:	4b34      	ldr	r3, [pc, #208]	; (8000b20 <MX_GPIO_Init+0x130>)
 8000a50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a52:	4a33      	ldr	r2, [pc, #204]	; (8000b20 <MX_GPIO_Init+0x130>)
 8000a54:	f043 0302 	orr.w	r3, r3, #2
 8000a58:	6313      	str	r3, [r2, #48]	; 0x30
 8000a5a:	4b31      	ldr	r3, [pc, #196]	; (8000b20 <MX_GPIO_Init+0x130>)
 8000a5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a5e:	f003 0302 	and.w	r3, r3, #2
 8000a62:	60fb      	str	r3, [r7, #12]
 8000a64:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a66:	4b2e      	ldr	r3, [pc, #184]	; (8000b20 <MX_GPIO_Init+0x130>)
 8000a68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a6a:	4a2d      	ldr	r2, [pc, #180]	; (8000b20 <MX_GPIO_Init+0x130>)
 8000a6c:	f043 0308 	orr.w	r3, r3, #8
 8000a70:	6313      	str	r3, [r2, #48]	; 0x30
 8000a72:	4b2b      	ldr	r3, [pc, #172]	; (8000b20 <MX_GPIO_Init+0x130>)
 8000a74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a76:	f003 0308 	and.w	r3, r3, #8
 8000a7a:	60bb      	str	r3, [r7, #8]
 8000a7c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000a7e:	4b28      	ldr	r3, [pc, #160]	; (8000b20 <MX_GPIO_Init+0x130>)
 8000a80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a82:	4a27      	ldr	r2, [pc, #156]	; (8000b20 <MX_GPIO_Init+0x130>)
 8000a84:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000a88:	6313      	str	r3, [r2, #48]	; 0x30
 8000a8a:	4b25      	ldr	r3, [pc, #148]	; (8000b20 <MX_GPIO_Init+0x130>)
 8000a8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000a92:	607b      	str	r3, [r7, #4]
 8000a94:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000a96:	2200      	movs	r2, #0
 8000a98:	f244 0181 	movw	r1, #16513	; 0x4081
 8000a9c:	4821      	ldr	r0, [pc, #132]	; (8000b24 <MX_GPIO_Init+0x134>)
 8000a9e:	f001 fa45 	bl	8001f2c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	2140      	movs	r1, #64	; 0x40
 8000aa6:	4820      	ldr	r0, [pc, #128]	; (8000b28 <MX_GPIO_Init+0x138>)
 8000aa8:	f001 fa40 	bl	8001f2c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000aac:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ab0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000ab2:	4b1e      	ldr	r3, [pc, #120]	; (8000b2c <MX_GPIO_Init+0x13c>)
 8000ab4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000aba:	f107 031c 	add.w	r3, r7, #28
 8000abe:	4619      	mov	r1, r3
 8000ac0:	481b      	ldr	r0, [pc, #108]	; (8000b30 <MX_GPIO_Init+0x140>)
 8000ac2:	f001 f889 	bl	8001bd8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000ac6:	f244 0381 	movw	r3, #16513	; 0x4081
 8000aca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000acc:	2301      	movs	r3, #1
 8000ace:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ad8:	f107 031c 	add.w	r3, r7, #28
 8000adc:	4619      	mov	r1, r3
 8000ade:	4811      	ldr	r0, [pc, #68]	; (8000b24 <MX_GPIO_Init+0x134>)
 8000ae0:	f001 f87a 	bl	8001bd8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000ae4:	2340      	movs	r3, #64	; 0x40
 8000ae6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ae8:	2301      	movs	r3, #1
 8000aea:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aec:	2300      	movs	r3, #0
 8000aee:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000af0:	2300      	movs	r3, #0
 8000af2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000af4:	f107 031c 	add.w	r3, r7, #28
 8000af8:	4619      	mov	r1, r3
 8000afa:	480b      	ldr	r0, [pc, #44]	; (8000b28 <MX_GPIO_Init+0x138>)
 8000afc:	f001 f86c 	bl	8001bd8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000b00:	2380      	movs	r3, #128	; 0x80
 8000b02:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b04:	2300      	movs	r3, #0
 8000b06:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b08:	2300      	movs	r3, #0
 8000b0a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000b0c:	f107 031c 	add.w	r3, r7, #28
 8000b10:	4619      	mov	r1, r3
 8000b12:	4805      	ldr	r0, [pc, #20]	; (8000b28 <MX_GPIO_Init+0x138>)
 8000b14:	f001 f860 	bl	8001bd8 <HAL_GPIO_Init>

}
 8000b18:	bf00      	nop
 8000b1a:	3730      	adds	r7, #48	; 0x30
 8000b1c:	46bd      	mov	sp, r7
 8000b1e:	bd80      	pop	{r7, pc}
 8000b20:	40023800 	.word	0x40023800
 8000b24:	40020400 	.word	0x40020400
 8000b28:	40021800 	.word	0x40021800
 8000b2c:	10110000 	.word	0x10110000
 8000b30:	40020800 	.word	0x40020800

08000b34 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b34:	b480      	push	{r7}
 8000b36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000b38:	bf00      	nop
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b40:	4770      	bx	lr
	...

08000b44 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b44:	b480      	push	{r7}
 8000b46:	b083      	sub	sp, #12
 8000b48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000b4a:	4b0f      	ldr	r3, [pc, #60]	; (8000b88 <HAL_MspInit+0x44>)
 8000b4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b4e:	4a0e      	ldr	r2, [pc, #56]	; (8000b88 <HAL_MspInit+0x44>)
 8000b50:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b54:	6413      	str	r3, [r2, #64]	; 0x40
 8000b56:	4b0c      	ldr	r3, [pc, #48]	; (8000b88 <HAL_MspInit+0x44>)
 8000b58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b5e:	607b      	str	r3, [r7, #4]
 8000b60:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b62:	4b09      	ldr	r3, [pc, #36]	; (8000b88 <HAL_MspInit+0x44>)
 8000b64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b66:	4a08      	ldr	r2, [pc, #32]	; (8000b88 <HAL_MspInit+0x44>)
 8000b68:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b6c:	6453      	str	r3, [r2, #68]	; 0x44
 8000b6e:	4b06      	ldr	r3, [pc, #24]	; (8000b88 <HAL_MspInit+0x44>)
 8000b70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b72:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b76:	603b      	str	r3, [r7, #0]
 8000b78:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b7a:	bf00      	nop
 8000b7c:	370c      	adds	r7, #12
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b84:	4770      	bx	lr
 8000b86:	bf00      	nop
 8000b88:	40023800 	.word	0x40023800

08000b8c <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b08e      	sub	sp, #56	; 0x38
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b94:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b98:	2200      	movs	r2, #0
 8000b9a:	601a      	str	r2, [r3, #0]
 8000b9c:	605a      	str	r2, [r3, #4]
 8000b9e:	609a      	str	r2, [r3, #8]
 8000ba0:	60da      	str	r2, [r3, #12]
 8000ba2:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	4a4e      	ldr	r2, [pc, #312]	; (8000ce4 <HAL_ETH_MspInit+0x158>)
 8000baa:	4293      	cmp	r3, r2
 8000bac:	f040 8096 	bne.w	8000cdc <HAL_ETH_MspInit+0x150>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8000bb0:	4b4d      	ldr	r3, [pc, #308]	; (8000ce8 <HAL_ETH_MspInit+0x15c>)
 8000bb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bb4:	4a4c      	ldr	r2, [pc, #304]	; (8000ce8 <HAL_ETH_MspInit+0x15c>)
 8000bb6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000bba:	6313      	str	r3, [r2, #48]	; 0x30
 8000bbc:	4b4a      	ldr	r3, [pc, #296]	; (8000ce8 <HAL_ETH_MspInit+0x15c>)
 8000bbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bc0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000bc4:	623b      	str	r3, [r7, #32]
 8000bc6:	6a3b      	ldr	r3, [r7, #32]
 8000bc8:	4b47      	ldr	r3, [pc, #284]	; (8000ce8 <HAL_ETH_MspInit+0x15c>)
 8000bca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bcc:	4a46      	ldr	r2, [pc, #280]	; (8000ce8 <HAL_ETH_MspInit+0x15c>)
 8000bce:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000bd2:	6313      	str	r3, [r2, #48]	; 0x30
 8000bd4:	4b44      	ldr	r3, [pc, #272]	; (8000ce8 <HAL_ETH_MspInit+0x15c>)
 8000bd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bd8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000bdc:	61fb      	str	r3, [r7, #28]
 8000bde:	69fb      	ldr	r3, [r7, #28]
 8000be0:	4b41      	ldr	r3, [pc, #260]	; (8000ce8 <HAL_ETH_MspInit+0x15c>)
 8000be2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000be4:	4a40      	ldr	r2, [pc, #256]	; (8000ce8 <HAL_ETH_MspInit+0x15c>)
 8000be6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8000bea:	6313      	str	r3, [r2, #48]	; 0x30
 8000bec:	4b3e      	ldr	r3, [pc, #248]	; (8000ce8 <HAL_ETH_MspInit+0x15c>)
 8000bee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bf0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8000bf4:	61bb      	str	r3, [r7, #24]
 8000bf6:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bf8:	4b3b      	ldr	r3, [pc, #236]	; (8000ce8 <HAL_ETH_MspInit+0x15c>)
 8000bfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bfc:	4a3a      	ldr	r2, [pc, #232]	; (8000ce8 <HAL_ETH_MspInit+0x15c>)
 8000bfe:	f043 0304 	orr.w	r3, r3, #4
 8000c02:	6313      	str	r3, [r2, #48]	; 0x30
 8000c04:	4b38      	ldr	r3, [pc, #224]	; (8000ce8 <HAL_ETH_MspInit+0x15c>)
 8000c06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c08:	f003 0304 	and.w	r3, r3, #4
 8000c0c:	617b      	str	r3, [r7, #20]
 8000c0e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c10:	4b35      	ldr	r3, [pc, #212]	; (8000ce8 <HAL_ETH_MspInit+0x15c>)
 8000c12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c14:	4a34      	ldr	r2, [pc, #208]	; (8000ce8 <HAL_ETH_MspInit+0x15c>)
 8000c16:	f043 0301 	orr.w	r3, r3, #1
 8000c1a:	6313      	str	r3, [r2, #48]	; 0x30
 8000c1c:	4b32      	ldr	r3, [pc, #200]	; (8000ce8 <HAL_ETH_MspInit+0x15c>)
 8000c1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c20:	f003 0301 	and.w	r3, r3, #1
 8000c24:	613b      	str	r3, [r7, #16]
 8000c26:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c28:	4b2f      	ldr	r3, [pc, #188]	; (8000ce8 <HAL_ETH_MspInit+0x15c>)
 8000c2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c2c:	4a2e      	ldr	r2, [pc, #184]	; (8000ce8 <HAL_ETH_MspInit+0x15c>)
 8000c2e:	f043 0302 	orr.w	r3, r3, #2
 8000c32:	6313      	str	r3, [r2, #48]	; 0x30
 8000c34:	4b2c      	ldr	r3, [pc, #176]	; (8000ce8 <HAL_ETH_MspInit+0x15c>)
 8000c36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c38:	f003 0302 	and.w	r3, r3, #2
 8000c3c:	60fb      	str	r3, [r7, #12]
 8000c3e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000c40:	4b29      	ldr	r3, [pc, #164]	; (8000ce8 <HAL_ETH_MspInit+0x15c>)
 8000c42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c44:	4a28      	ldr	r2, [pc, #160]	; (8000ce8 <HAL_ETH_MspInit+0x15c>)
 8000c46:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000c4a:	6313      	str	r3, [r2, #48]	; 0x30
 8000c4c:	4b26      	ldr	r3, [pc, #152]	; (8000ce8 <HAL_ETH_MspInit+0x15c>)
 8000c4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000c54:	60bb      	str	r3, [r7, #8]
 8000c56:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0 
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000c58:	2332      	movs	r3, #50	; 0x32
 8000c5a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c5c:	2302      	movs	r3, #2
 8000c5e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c60:	2300      	movs	r3, #0
 8000c62:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c64:	2303      	movs	r3, #3
 8000c66:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000c68:	230b      	movs	r3, #11
 8000c6a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c6c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c70:	4619      	mov	r1, r3
 8000c72:	481e      	ldr	r0, [pc, #120]	; (8000cec <HAL_ETH_MspInit+0x160>)
 8000c74:	f000 ffb0 	bl	8001bd8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000c78:	2386      	movs	r3, #134	; 0x86
 8000c7a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c7c:	2302      	movs	r3, #2
 8000c7e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c80:	2300      	movs	r3, #0
 8000c82:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c84:	2303      	movs	r3, #3
 8000c86:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000c88:	230b      	movs	r3, #11
 8000c8a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c8c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c90:	4619      	mov	r1, r3
 8000c92:	4817      	ldr	r0, [pc, #92]	; (8000cf0 <HAL_ETH_MspInit+0x164>)
 8000c94:	f000 ffa0 	bl	8001bd8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000c98:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c9c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c9e:	2302      	movs	r3, #2
 8000ca0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ca6:	2303      	movs	r3, #3
 8000ca8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000caa:	230b      	movs	r3, #11
 8000cac:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000cae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cb2:	4619      	mov	r1, r3
 8000cb4:	480f      	ldr	r0, [pc, #60]	; (8000cf4 <HAL_ETH_MspInit+0x168>)
 8000cb6:	f000 ff8f 	bl	8001bd8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000cba:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000cbe:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cc0:	2302      	movs	r3, #2
 8000cc2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cc8:	2303      	movs	r3, #3
 8000cca:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000ccc:	230b      	movs	r3, #11
 8000cce:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000cd0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cd4:	4619      	mov	r1, r3
 8000cd6:	4808      	ldr	r0, [pc, #32]	; (8000cf8 <HAL_ETH_MspInit+0x16c>)
 8000cd8:	f000 ff7e 	bl	8001bd8 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8000cdc:	bf00      	nop
 8000cde:	3738      	adds	r7, #56	; 0x38
 8000ce0:	46bd      	mov	sp, r7
 8000ce2:	bd80      	pop	{r7, pc}
 8000ce4:	40028000 	.word	0x40028000
 8000ce8:	40023800 	.word	0x40023800
 8000cec:	40020800 	.word	0x40020800
 8000cf0:	40020000 	.word	0x40020000
 8000cf4:	40020400 	.word	0x40020400
 8000cf8:	40021800 	.word	0x40021800

08000cfc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b08a      	sub	sp, #40	; 0x28
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d04:	f107 0314 	add.w	r3, r7, #20
 8000d08:	2200      	movs	r2, #0
 8000d0a:	601a      	str	r2, [r3, #0]
 8000d0c:	605a      	str	r2, [r3, #4]
 8000d0e:	609a      	str	r2, [r3, #8]
 8000d10:	60da      	str	r2, [r3, #12]
 8000d12:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	4a17      	ldr	r2, [pc, #92]	; (8000d78 <HAL_I2C_MspInit+0x7c>)
 8000d1a:	4293      	cmp	r3, r2
 8000d1c:	d128      	bne.n	8000d70 <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d1e:	4b17      	ldr	r3, [pc, #92]	; (8000d7c <HAL_I2C_MspInit+0x80>)
 8000d20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d22:	4a16      	ldr	r2, [pc, #88]	; (8000d7c <HAL_I2C_MspInit+0x80>)
 8000d24:	f043 0302 	orr.w	r3, r3, #2
 8000d28:	6313      	str	r3, [r2, #48]	; 0x30
 8000d2a:	4b14      	ldr	r3, [pc, #80]	; (8000d7c <HAL_I2C_MspInit+0x80>)
 8000d2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d2e:	f003 0302 	and.w	r3, r3, #2
 8000d32:	613b      	str	r3, [r7, #16]
 8000d34:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000d36:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000d3a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d3c:	2312      	movs	r3, #18
 8000d3e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d40:	2301      	movs	r3, #1
 8000d42:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d44:	2303      	movs	r3, #3
 8000d46:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000d48:	2304      	movs	r3, #4
 8000d4a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d4c:	f107 0314 	add.w	r3, r7, #20
 8000d50:	4619      	mov	r1, r3
 8000d52:	480b      	ldr	r0, [pc, #44]	; (8000d80 <HAL_I2C_MspInit+0x84>)
 8000d54:	f000 ff40 	bl	8001bd8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000d58:	4b08      	ldr	r3, [pc, #32]	; (8000d7c <HAL_I2C_MspInit+0x80>)
 8000d5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d5c:	4a07      	ldr	r2, [pc, #28]	; (8000d7c <HAL_I2C_MspInit+0x80>)
 8000d5e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000d62:	6413      	str	r3, [r2, #64]	; 0x40
 8000d64:	4b05      	ldr	r3, [pc, #20]	; (8000d7c <HAL_I2C_MspInit+0x80>)
 8000d66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d68:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000d6c:	60fb      	str	r3, [r7, #12]
 8000d6e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000d70:	bf00      	nop
 8000d72:	3728      	adds	r7, #40	; 0x28
 8000d74:	46bd      	mov	sp, r7
 8000d76:	bd80      	pop	{r7, pc}
 8000d78:	40005400 	.word	0x40005400
 8000d7c:	40023800 	.word	0x40023800
 8000d80:	40020400 	.word	0x40020400

08000d84 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	b08a      	sub	sp, #40	; 0x28
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d8c:	f107 0314 	add.w	r3, r7, #20
 8000d90:	2200      	movs	r2, #0
 8000d92:	601a      	str	r2, [r3, #0]
 8000d94:	605a      	str	r2, [r3, #4]
 8000d96:	609a      	str	r2, [r3, #8]
 8000d98:	60da      	str	r2, [r3, #12]
 8000d9a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	4a17      	ldr	r2, [pc, #92]	; (8000e00 <HAL_UART_MspInit+0x7c>)
 8000da2:	4293      	cmp	r3, r2
 8000da4:	d128      	bne.n	8000df8 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000da6:	4b17      	ldr	r3, [pc, #92]	; (8000e04 <HAL_UART_MspInit+0x80>)
 8000da8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000daa:	4a16      	ldr	r2, [pc, #88]	; (8000e04 <HAL_UART_MspInit+0x80>)
 8000dac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000db0:	6413      	str	r3, [r2, #64]	; 0x40
 8000db2:	4b14      	ldr	r3, [pc, #80]	; (8000e04 <HAL_UART_MspInit+0x80>)
 8000db4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000db6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000dba:	613b      	str	r3, [r7, #16]
 8000dbc:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000dbe:	4b11      	ldr	r3, [pc, #68]	; (8000e04 <HAL_UART_MspInit+0x80>)
 8000dc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dc2:	4a10      	ldr	r2, [pc, #64]	; (8000e04 <HAL_UART_MspInit+0x80>)
 8000dc4:	f043 0308 	orr.w	r3, r3, #8
 8000dc8:	6313      	str	r3, [r2, #48]	; 0x30
 8000dca:	4b0e      	ldr	r3, [pc, #56]	; (8000e04 <HAL_UART_MspInit+0x80>)
 8000dcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dce:	f003 0308 	and.w	r3, r3, #8
 8000dd2:	60fb      	str	r3, [r7, #12]
 8000dd4:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration    
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX 
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000dd6:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000dda:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ddc:	2302      	movs	r3, #2
 8000dde:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000de0:	2300      	movs	r3, #0
 8000de2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000de4:	2303      	movs	r3, #3
 8000de6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000de8:	2307      	movs	r3, #7
 8000dea:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000dec:	f107 0314 	add.w	r3, r7, #20
 8000df0:	4619      	mov	r1, r3
 8000df2:	4805      	ldr	r0, [pc, #20]	; (8000e08 <HAL_UART_MspInit+0x84>)
 8000df4:	f000 fef0 	bl	8001bd8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000df8:	bf00      	nop
 8000dfa:	3728      	adds	r7, #40	; 0x28
 8000dfc:	46bd      	mov	sp, r7
 8000dfe:	bd80      	pop	{r7, pc}
 8000e00:	40004800 	.word	0x40004800
 8000e04:	40023800 	.word	0x40023800
 8000e08:	40020c00 	.word	0x40020c00

08000e0c <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	b08a      	sub	sp, #40	; 0x28
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e14:	f107 0314 	add.w	r3, r7, #20
 8000e18:	2200      	movs	r2, #0
 8000e1a:	601a      	str	r2, [r3, #0]
 8000e1c:	605a      	str	r2, [r3, #4]
 8000e1e:	609a      	str	r2, [r3, #8]
 8000e20:	60da      	str	r2, [r3, #12]
 8000e22:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000e2c:	d141      	bne.n	8000eb2 <HAL_PCD_MspInit+0xa6>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e2e:	4b23      	ldr	r3, [pc, #140]	; (8000ebc <HAL_PCD_MspInit+0xb0>)
 8000e30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e32:	4a22      	ldr	r2, [pc, #136]	; (8000ebc <HAL_PCD_MspInit+0xb0>)
 8000e34:	f043 0301 	orr.w	r3, r3, #1
 8000e38:	6313      	str	r3, [r2, #48]	; 0x30
 8000e3a:	4b20      	ldr	r3, [pc, #128]	; (8000ebc <HAL_PCD_MspInit+0xb0>)
 8000e3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e3e:	f003 0301 	and.w	r3, r3, #1
 8000e42:	613b      	str	r3, [r7, #16]
 8000e44:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000e46:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000e4a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e4c:	2302      	movs	r3, #2
 8000e4e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e50:	2300      	movs	r3, #0
 8000e52:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e54:	2303      	movs	r3, #3
 8000e56:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000e58:	230a      	movs	r3, #10
 8000e5a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e5c:	f107 0314 	add.w	r3, r7, #20
 8000e60:	4619      	mov	r1, r3
 8000e62:	4817      	ldr	r0, [pc, #92]	; (8000ec0 <HAL_PCD_MspInit+0xb4>)
 8000e64:	f000 feb8 	bl	8001bd8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000e68:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000e6c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e6e:	2300      	movs	r3, #0
 8000e70:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e72:	2300      	movs	r3, #0
 8000e74:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000e76:	f107 0314 	add.w	r3, r7, #20
 8000e7a:	4619      	mov	r1, r3
 8000e7c:	4810      	ldr	r0, [pc, #64]	; (8000ec0 <HAL_PCD_MspInit+0xb4>)
 8000e7e:	f000 feab 	bl	8001bd8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000e82:	4b0e      	ldr	r3, [pc, #56]	; (8000ebc <HAL_PCD_MspInit+0xb0>)
 8000e84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000e86:	4a0d      	ldr	r2, [pc, #52]	; (8000ebc <HAL_PCD_MspInit+0xb0>)
 8000e88:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000e8c:	6353      	str	r3, [r2, #52]	; 0x34
 8000e8e:	4b0b      	ldr	r3, [pc, #44]	; (8000ebc <HAL_PCD_MspInit+0xb0>)
 8000e90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000e92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000e96:	60fb      	str	r3, [r7, #12]
 8000e98:	68fb      	ldr	r3, [r7, #12]
 8000e9a:	4b08      	ldr	r3, [pc, #32]	; (8000ebc <HAL_PCD_MspInit+0xb0>)
 8000e9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e9e:	4a07      	ldr	r2, [pc, #28]	; (8000ebc <HAL_PCD_MspInit+0xb0>)
 8000ea0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ea4:	6453      	str	r3, [r2, #68]	; 0x44
 8000ea6:	4b05      	ldr	r3, [pc, #20]	; (8000ebc <HAL_PCD_MspInit+0xb0>)
 8000ea8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000eaa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000eae:	60bb      	str	r3, [r7, #8]
 8000eb0:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8000eb2:	bf00      	nop
 8000eb4:	3728      	adds	r7, #40	; 0x28
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	bd80      	pop	{r7, pc}
 8000eba:	bf00      	nop
 8000ebc:	40023800 	.word	0x40023800
 8000ec0:	40020000 	.word	0x40020000

08000ec4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ec4:	b480      	push	{r7}
 8000ec6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000ec8:	bf00      	nop
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed0:	4770      	bx	lr

08000ed2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ed2:	b480      	push	{r7}
 8000ed4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ed6:	e7fe      	b.n	8000ed6 <HardFault_Handler+0x4>

08000ed8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ed8:	b480      	push	{r7}
 8000eda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000edc:	e7fe      	b.n	8000edc <MemManage_Handler+0x4>

08000ede <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ede:	b480      	push	{r7}
 8000ee0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ee2:	e7fe      	b.n	8000ee2 <BusFault_Handler+0x4>

08000ee4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ee4:	b480      	push	{r7}
 8000ee6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ee8:	e7fe      	b.n	8000ee8 <UsageFault_Handler+0x4>

08000eea <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000eea:	b480      	push	{r7}
 8000eec:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000eee:	bf00      	nop
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef6:	4770      	bx	lr

08000ef8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ef8:	b480      	push	{r7}
 8000efa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000efc:	bf00      	nop
 8000efe:	46bd      	mov	sp, r7
 8000f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f04:	4770      	bx	lr

08000f06 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f06:	b480      	push	{r7}
 8000f08:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f0a:	bf00      	nop
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f12:	4770      	bx	lr

08000f14 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f18:	f000 f8ca 	bl	80010b0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f1c:	bf00      	nop
 8000f1e:	bd80      	pop	{r7, pc}

08000f20 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b084      	sub	sp, #16
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8000f28:	4b11      	ldr	r3, [pc, #68]	; (8000f70 <_sbrk+0x50>)
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d102      	bne.n	8000f36 <_sbrk+0x16>
		heap_end = &end;
 8000f30:	4b0f      	ldr	r3, [pc, #60]	; (8000f70 <_sbrk+0x50>)
 8000f32:	4a10      	ldr	r2, [pc, #64]	; (8000f74 <_sbrk+0x54>)
 8000f34:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8000f36:	4b0e      	ldr	r3, [pc, #56]	; (8000f70 <_sbrk+0x50>)
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8000f3c:	4b0c      	ldr	r3, [pc, #48]	; (8000f70 <_sbrk+0x50>)
 8000f3e:	681a      	ldr	r2, [r3, #0]
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	4413      	add	r3, r2
 8000f44:	466a      	mov	r2, sp
 8000f46:	4293      	cmp	r3, r2
 8000f48:	d907      	bls.n	8000f5a <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8000f4a:	f003 fe87 	bl	8004c5c <__errno>
 8000f4e:	4602      	mov	r2, r0
 8000f50:	230c      	movs	r3, #12
 8000f52:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8000f54:	f04f 33ff 	mov.w	r3, #4294967295
 8000f58:	e006      	b.n	8000f68 <_sbrk+0x48>
	}

	heap_end += incr;
 8000f5a:	4b05      	ldr	r3, [pc, #20]	; (8000f70 <_sbrk+0x50>)
 8000f5c:	681a      	ldr	r2, [r3, #0]
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	4413      	add	r3, r2
 8000f62:	4a03      	ldr	r2, [pc, #12]	; (8000f70 <_sbrk+0x50>)
 8000f64:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8000f66:	68fb      	ldr	r3, [r7, #12]
}
 8000f68:	4618      	mov	r0, r3
 8000f6a:	3710      	adds	r7, #16
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	bd80      	pop	{r7, pc}
 8000f70:	200001f8 	.word	0x200001f8
 8000f74:	20000728 	.word	0x20000728

08000f78 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f78:	b480      	push	{r7}
 8000f7a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f7c:	4b15      	ldr	r3, [pc, #84]	; (8000fd4 <SystemInit+0x5c>)
 8000f7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f82:	4a14      	ldr	r2, [pc, #80]	; (8000fd4 <SystemInit+0x5c>)
 8000f84:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f88:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8000f8c:	4b12      	ldr	r3, [pc, #72]	; (8000fd8 <SystemInit+0x60>)
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	4a11      	ldr	r2, [pc, #68]	; (8000fd8 <SystemInit+0x60>)
 8000f92:	f043 0301 	orr.w	r3, r3, #1
 8000f96:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000f98:	4b0f      	ldr	r3, [pc, #60]	; (8000fd8 <SystemInit+0x60>)
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8000f9e:	4b0e      	ldr	r3, [pc, #56]	; (8000fd8 <SystemInit+0x60>)
 8000fa0:	681a      	ldr	r2, [r3, #0]
 8000fa2:	490d      	ldr	r1, [pc, #52]	; (8000fd8 <SystemInit+0x60>)
 8000fa4:	4b0d      	ldr	r3, [pc, #52]	; (8000fdc <SystemInit+0x64>)
 8000fa6:	4013      	ands	r3, r2
 8000fa8:	600b      	str	r3, [r1, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8000faa:	4b0b      	ldr	r3, [pc, #44]	; (8000fd8 <SystemInit+0x60>)
 8000fac:	4a0c      	ldr	r2, [pc, #48]	; (8000fe0 <SystemInit+0x68>)
 8000fae:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000fb0:	4b09      	ldr	r3, [pc, #36]	; (8000fd8 <SystemInit+0x60>)
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	4a08      	ldr	r2, [pc, #32]	; (8000fd8 <SystemInit+0x60>)
 8000fb6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000fba:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8000fbc:	4b06      	ldr	r3, [pc, #24]	; (8000fd8 <SystemInit+0x60>)
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000fc2:	4b04      	ldr	r3, [pc, #16]	; (8000fd4 <SystemInit+0x5c>)
 8000fc4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000fc8:	609a      	str	r2, [r3, #8]
#endif
}
 8000fca:	bf00      	nop
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd2:	4770      	bx	lr
 8000fd4:	e000ed00 	.word	0xe000ed00
 8000fd8:	40023800 	.word	0x40023800
 8000fdc:	fef6ffff 	.word	0xfef6ffff
 8000fe0:	24003010 	.word	0x24003010

08000fe4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000fe4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800101c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000fe8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000fea:	e003      	b.n	8000ff4 <LoopCopyDataInit>

08000fec <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000fec:	4b0c      	ldr	r3, [pc, #48]	; (8001020 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000fee:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000ff0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000ff2:	3104      	adds	r1, #4

08000ff4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000ff4:	480b      	ldr	r0, [pc, #44]	; (8001024 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000ff6:	4b0c      	ldr	r3, [pc, #48]	; (8001028 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000ff8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000ffa:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000ffc:	d3f6      	bcc.n	8000fec <CopyDataInit>
  ldr  r2, =_sbss
 8000ffe:	4a0b      	ldr	r2, [pc, #44]	; (800102c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001000:	e002      	b.n	8001008 <LoopFillZerobss>

08001002 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001002:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001004:	f842 3b04 	str.w	r3, [r2], #4

08001008 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001008:	4b09      	ldr	r3, [pc, #36]	; (8001030 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800100a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800100c:	d3f9      	bcc.n	8001002 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800100e:	f7ff ffb3 	bl	8000f78 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001012:	f003 fe29 	bl	8004c68 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001016:	f7ff fa97 	bl	8000548 <main>
  bx  lr    
 800101a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800101c:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 8001020:	08006860 	.word	0x08006860
  ldr  r0, =_sdata
 8001024:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001028:	200001dc 	.word	0x200001dc
  ldr  r2, =_sbss
 800102c:	200001dc 	.word	0x200001dc
  ldr  r3, = _ebss
 8001030:	20000724 	.word	0x20000724

08001034 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001034:	e7fe      	b.n	8001034 <ADC_IRQHandler>

08001036 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001036:	b580      	push	{r7, lr}
 8001038:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800103a:	2003      	movs	r0, #3
 800103c:	f000 f92c 	bl	8001298 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001040:	2000      	movs	r0, #0
 8001042:	f000 f805 	bl	8001050 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8001046:	f7ff fd7d 	bl	8000b44 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 800104a:	2300      	movs	r3, #0
}
 800104c:	4618      	mov	r0, r3
 800104e:	bd80      	pop	{r7, pc}

08001050 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	b082      	sub	sp, #8
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001058:	4b12      	ldr	r3, [pc, #72]	; (80010a4 <HAL_InitTick+0x54>)
 800105a:	681a      	ldr	r2, [r3, #0]
 800105c:	4b12      	ldr	r3, [pc, #72]	; (80010a8 <HAL_InitTick+0x58>)
 800105e:	781b      	ldrb	r3, [r3, #0]
 8001060:	4619      	mov	r1, r3
 8001062:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001066:	fbb3 f3f1 	udiv	r3, r3, r1
 800106a:	fbb2 f3f3 	udiv	r3, r2, r3
 800106e:	4618      	mov	r0, r3
 8001070:	f000 f939 	bl	80012e6 <HAL_SYSTICK_Config>
 8001074:	4603      	mov	r3, r0
 8001076:	2b00      	cmp	r3, #0
 8001078:	d001      	beq.n	800107e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800107a:	2301      	movs	r3, #1
 800107c:	e00e      	b.n	800109c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	2b0f      	cmp	r3, #15
 8001082:	d80a      	bhi.n	800109a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001084:	2200      	movs	r2, #0
 8001086:	6879      	ldr	r1, [r7, #4]
 8001088:	f04f 30ff 	mov.w	r0, #4294967295
 800108c:	f000 f90f 	bl	80012ae <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001090:	4a06      	ldr	r2, [pc, #24]	; (80010ac <HAL_InitTick+0x5c>)
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001096:	2300      	movs	r3, #0
 8001098:	e000      	b.n	800109c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800109a:	2301      	movs	r3, #1
}
 800109c:	4618      	mov	r0, r3
 800109e:	3708      	adds	r7, #8
 80010a0:	46bd      	mov	sp, r7
 80010a2:	bd80      	pop	{r7, pc}
 80010a4:	20000000 	.word	0x20000000
 80010a8:	20000008 	.word	0x20000008
 80010ac:	20000004 	.word	0x20000004

080010b0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010b0:	b480      	push	{r7}
 80010b2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80010b4:	4b06      	ldr	r3, [pc, #24]	; (80010d0 <HAL_IncTick+0x20>)
 80010b6:	781b      	ldrb	r3, [r3, #0]
 80010b8:	461a      	mov	r2, r3
 80010ba:	4b06      	ldr	r3, [pc, #24]	; (80010d4 <HAL_IncTick+0x24>)
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	4413      	add	r3, r2
 80010c0:	4a04      	ldr	r2, [pc, #16]	; (80010d4 <HAL_IncTick+0x24>)
 80010c2:	6013      	str	r3, [r2, #0]
}
 80010c4:	bf00      	nop
 80010c6:	46bd      	mov	sp, r7
 80010c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010cc:	4770      	bx	lr
 80010ce:	bf00      	nop
 80010d0:	20000008 	.word	0x20000008
 80010d4:	2000071c 	.word	0x2000071c

080010d8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010d8:	b480      	push	{r7}
 80010da:	af00      	add	r7, sp, #0
  return uwTick;
 80010dc:	4b03      	ldr	r3, [pc, #12]	; (80010ec <HAL_GetTick+0x14>)
 80010de:	681b      	ldr	r3, [r3, #0]
}
 80010e0:	4618      	mov	r0, r3
 80010e2:	46bd      	mov	sp, r7
 80010e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e8:	4770      	bx	lr
 80010ea:	bf00      	nop
 80010ec:	2000071c 	.word	0x2000071c

080010f0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b084      	sub	sp, #16
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80010f8:	f7ff ffee 	bl	80010d8 <HAL_GetTick>
 80010fc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001102:	68fb      	ldr	r3, [r7, #12]
 8001104:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001108:	d005      	beq.n	8001116 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800110a:	4b09      	ldr	r3, [pc, #36]	; (8001130 <HAL_Delay+0x40>)
 800110c:	781b      	ldrb	r3, [r3, #0]
 800110e:	461a      	mov	r2, r3
 8001110:	68fb      	ldr	r3, [r7, #12]
 8001112:	4413      	add	r3, r2
 8001114:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001116:	bf00      	nop
 8001118:	f7ff ffde 	bl	80010d8 <HAL_GetTick>
 800111c:	4602      	mov	r2, r0
 800111e:	68bb      	ldr	r3, [r7, #8]
 8001120:	1ad3      	subs	r3, r2, r3
 8001122:	68fa      	ldr	r2, [r7, #12]
 8001124:	429a      	cmp	r2, r3
 8001126:	d8f7      	bhi.n	8001118 <HAL_Delay+0x28>
  {
  }
}
 8001128:	bf00      	nop
 800112a:	3710      	adds	r7, #16
 800112c:	46bd      	mov	sp, r7
 800112e:	bd80      	pop	{r7, pc}
 8001130:	20000008 	.word	0x20000008

08001134 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001134:	b480      	push	{r7}
 8001136:	b085      	sub	sp, #20
 8001138:	af00      	add	r7, sp, #0
 800113a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	f003 0307 	and.w	r3, r3, #7
 8001142:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001144:	4b0b      	ldr	r3, [pc, #44]	; (8001174 <__NVIC_SetPriorityGrouping+0x40>)
 8001146:	68db      	ldr	r3, [r3, #12]
 8001148:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800114a:	68ba      	ldr	r2, [r7, #8]
 800114c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001150:	4013      	ands	r3, r2
 8001152:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001154:	68fb      	ldr	r3, [r7, #12]
 8001156:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001158:	68bb      	ldr	r3, [r7, #8]
 800115a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800115c:	4b06      	ldr	r3, [pc, #24]	; (8001178 <__NVIC_SetPriorityGrouping+0x44>)
 800115e:	4313      	orrs	r3, r2
 8001160:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001162:	4a04      	ldr	r2, [pc, #16]	; (8001174 <__NVIC_SetPriorityGrouping+0x40>)
 8001164:	68bb      	ldr	r3, [r7, #8]
 8001166:	60d3      	str	r3, [r2, #12]
}
 8001168:	bf00      	nop
 800116a:	3714      	adds	r7, #20
 800116c:	46bd      	mov	sp, r7
 800116e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001172:	4770      	bx	lr
 8001174:	e000ed00 	.word	0xe000ed00
 8001178:	05fa0000 	.word	0x05fa0000

0800117c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800117c:	b480      	push	{r7}
 800117e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001180:	4b04      	ldr	r3, [pc, #16]	; (8001194 <__NVIC_GetPriorityGrouping+0x18>)
 8001182:	68db      	ldr	r3, [r3, #12]
 8001184:	0a1b      	lsrs	r3, r3, #8
 8001186:	f003 0307 	and.w	r3, r3, #7
}
 800118a:	4618      	mov	r0, r3
 800118c:	46bd      	mov	sp, r7
 800118e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001192:	4770      	bx	lr
 8001194:	e000ed00 	.word	0xe000ed00

08001198 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001198:	b480      	push	{r7}
 800119a:	b083      	sub	sp, #12
 800119c:	af00      	add	r7, sp, #0
 800119e:	4603      	mov	r3, r0
 80011a0:	6039      	str	r1, [r7, #0]
 80011a2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	db0a      	blt.n	80011c2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011ac:	683b      	ldr	r3, [r7, #0]
 80011ae:	b2da      	uxtb	r2, r3
 80011b0:	490c      	ldr	r1, [pc, #48]	; (80011e4 <__NVIC_SetPriority+0x4c>)
 80011b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011b6:	0112      	lsls	r2, r2, #4
 80011b8:	b2d2      	uxtb	r2, r2
 80011ba:	440b      	add	r3, r1
 80011bc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80011c0:	e00a      	b.n	80011d8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011c2:	683b      	ldr	r3, [r7, #0]
 80011c4:	b2da      	uxtb	r2, r3
 80011c6:	4908      	ldr	r1, [pc, #32]	; (80011e8 <__NVIC_SetPriority+0x50>)
 80011c8:	79fb      	ldrb	r3, [r7, #7]
 80011ca:	f003 030f 	and.w	r3, r3, #15
 80011ce:	3b04      	subs	r3, #4
 80011d0:	0112      	lsls	r2, r2, #4
 80011d2:	b2d2      	uxtb	r2, r2
 80011d4:	440b      	add	r3, r1
 80011d6:	761a      	strb	r2, [r3, #24]
}
 80011d8:	bf00      	nop
 80011da:	370c      	adds	r7, #12
 80011dc:	46bd      	mov	sp, r7
 80011de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e2:	4770      	bx	lr
 80011e4:	e000e100 	.word	0xe000e100
 80011e8:	e000ed00 	.word	0xe000ed00

080011ec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011ec:	b480      	push	{r7}
 80011ee:	b089      	sub	sp, #36	; 0x24
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	60f8      	str	r0, [r7, #12]
 80011f4:	60b9      	str	r1, [r7, #8]
 80011f6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80011f8:	68fb      	ldr	r3, [r7, #12]
 80011fa:	f003 0307 	and.w	r3, r3, #7
 80011fe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001200:	69fb      	ldr	r3, [r7, #28]
 8001202:	f1c3 0307 	rsb	r3, r3, #7
 8001206:	2b04      	cmp	r3, #4
 8001208:	bf28      	it	cs
 800120a:	2304      	movcs	r3, #4
 800120c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800120e:	69fb      	ldr	r3, [r7, #28]
 8001210:	3304      	adds	r3, #4
 8001212:	2b06      	cmp	r3, #6
 8001214:	d902      	bls.n	800121c <NVIC_EncodePriority+0x30>
 8001216:	69fb      	ldr	r3, [r7, #28]
 8001218:	3b03      	subs	r3, #3
 800121a:	e000      	b.n	800121e <NVIC_EncodePriority+0x32>
 800121c:	2300      	movs	r3, #0
 800121e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001220:	f04f 32ff 	mov.w	r2, #4294967295
 8001224:	69bb      	ldr	r3, [r7, #24]
 8001226:	fa02 f303 	lsl.w	r3, r2, r3
 800122a:	43da      	mvns	r2, r3
 800122c:	68bb      	ldr	r3, [r7, #8]
 800122e:	401a      	ands	r2, r3
 8001230:	697b      	ldr	r3, [r7, #20]
 8001232:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001234:	f04f 31ff 	mov.w	r1, #4294967295
 8001238:	697b      	ldr	r3, [r7, #20]
 800123a:	fa01 f303 	lsl.w	r3, r1, r3
 800123e:	43d9      	mvns	r1, r3
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001244:	4313      	orrs	r3, r2
         );
}
 8001246:	4618      	mov	r0, r3
 8001248:	3724      	adds	r7, #36	; 0x24
 800124a:	46bd      	mov	sp, r7
 800124c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001250:	4770      	bx	lr
	...

08001254 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	b082      	sub	sp, #8
 8001258:	af00      	add	r7, sp, #0
 800125a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	3b01      	subs	r3, #1
 8001260:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001264:	d301      	bcc.n	800126a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001266:	2301      	movs	r3, #1
 8001268:	e00f      	b.n	800128a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800126a:	4a0a      	ldr	r2, [pc, #40]	; (8001294 <SysTick_Config+0x40>)
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	3b01      	subs	r3, #1
 8001270:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001272:	210f      	movs	r1, #15
 8001274:	f04f 30ff 	mov.w	r0, #4294967295
 8001278:	f7ff ff8e 	bl	8001198 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800127c:	4b05      	ldr	r3, [pc, #20]	; (8001294 <SysTick_Config+0x40>)
 800127e:	2200      	movs	r2, #0
 8001280:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001282:	4b04      	ldr	r3, [pc, #16]	; (8001294 <SysTick_Config+0x40>)
 8001284:	2207      	movs	r2, #7
 8001286:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001288:	2300      	movs	r3, #0
}
 800128a:	4618      	mov	r0, r3
 800128c:	3708      	adds	r7, #8
 800128e:	46bd      	mov	sp, r7
 8001290:	bd80      	pop	{r7, pc}
 8001292:	bf00      	nop
 8001294:	e000e010 	.word	0xe000e010

08001298 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	b082      	sub	sp, #8
 800129c:	af00      	add	r7, sp, #0
 800129e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80012a0:	6878      	ldr	r0, [r7, #4]
 80012a2:	f7ff ff47 	bl	8001134 <__NVIC_SetPriorityGrouping>
}
 80012a6:	bf00      	nop
 80012a8:	3708      	adds	r7, #8
 80012aa:	46bd      	mov	sp, r7
 80012ac:	bd80      	pop	{r7, pc}

080012ae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80012ae:	b580      	push	{r7, lr}
 80012b0:	b086      	sub	sp, #24
 80012b2:	af00      	add	r7, sp, #0
 80012b4:	4603      	mov	r3, r0
 80012b6:	60b9      	str	r1, [r7, #8]
 80012b8:	607a      	str	r2, [r7, #4]
 80012ba:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80012bc:	2300      	movs	r3, #0
 80012be:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80012c0:	f7ff ff5c 	bl	800117c <__NVIC_GetPriorityGrouping>
 80012c4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80012c6:	687a      	ldr	r2, [r7, #4]
 80012c8:	68b9      	ldr	r1, [r7, #8]
 80012ca:	6978      	ldr	r0, [r7, #20]
 80012cc:	f7ff ff8e 	bl	80011ec <NVIC_EncodePriority>
 80012d0:	4602      	mov	r2, r0
 80012d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012d6:	4611      	mov	r1, r2
 80012d8:	4618      	mov	r0, r3
 80012da:	f7ff ff5d 	bl	8001198 <__NVIC_SetPriority>
}
 80012de:	bf00      	nop
 80012e0:	3718      	adds	r7, #24
 80012e2:	46bd      	mov	sp, r7
 80012e4:	bd80      	pop	{r7, pc}

080012e6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80012e6:	b580      	push	{r7, lr}
 80012e8:	b082      	sub	sp, #8
 80012ea:	af00      	add	r7, sp, #0
 80012ec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80012ee:	6878      	ldr	r0, [r7, #4]
 80012f0:	f7ff ffb0 	bl	8001254 <SysTick_Config>
 80012f4:	4603      	mov	r3, r0
}
 80012f6:	4618      	mov	r0, r3
 80012f8:	3708      	adds	r7, #8
 80012fa:	46bd      	mov	sp, r7
 80012fc:	bd80      	pop	{r7, pc}
	...

08001300 <HAL_ETH_Init>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	b088      	sub	sp, #32
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]
  uint32_t tempreg = 0, phyreg = 0;
 8001308:	2300      	movs	r3, #0
 800130a:	61fb      	str	r3, [r7, #28]
 800130c:	2300      	movs	r3, #0
 800130e:	60fb      	str	r3, [r7, #12]
  uint32_t hclk = 60000000;
 8001310:	4ba9      	ldr	r3, [pc, #676]	; (80015b8 <HAL_ETH_Init+0x2b8>)
 8001312:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart = 0;
 8001314:	2300      	movs	r3, #0
 8001316:	617b      	str	r3, [r7, #20]
  uint32_t err = ETH_SUCCESS;
 8001318:	2300      	movs	r3, #0
 800131a:	613b      	str	r3, [r7, #16]
  
  /* Check the ETH peripheral state */
  if(heth == NULL)
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	2b00      	cmp	r3, #0
 8001320:	d101      	bne.n	8001326 <HAL_ETH_Init+0x26>
  {
    return HAL_ERROR;
 8001322:	2301      	movs	r3, #1
 8001324:	e183      	b.n	800162e <HAL_ETH_Init+0x32e>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));  
  
  if(heth->State == HAL_ETH_STATE_RESET)
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800132c:	b2db      	uxtb	r3, r3
 800132e:	2b00      	cmp	r3, #0
 8001330:	d106      	bne.n	8001340 <HAL_ETH_Init+0x40>
  {
    /* Allocate lock resource and initialize it */
    heth->Lock = HAL_UNLOCKED;
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	2200      	movs	r2, #0
 8001336:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    heth->MspInitCallback(heth);

#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 800133a:	6878      	ldr	r0, [r7, #4]
 800133c:	f7ff fc26 	bl	8000b8c <HAL_ETH_MspInit>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
  
  /* Enable SYSCFG Clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001340:	4b9e      	ldr	r3, [pc, #632]	; (80015bc <HAL_ETH_Init+0x2bc>)
 8001342:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001344:	4a9d      	ldr	r2, [pc, #628]	; (80015bc <HAL_ETH_Init+0x2bc>)
 8001346:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800134a:	6453      	str	r3, [r2, #68]	; 0x44
 800134c:	4b9b      	ldr	r3, [pc, #620]	; (80015bc <HAL_ETH_Init+0x2bc>)
 800134e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001350:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001354:	60bb      	str	r3, [r7, #8]
 8001356:	68bb      	ldr	r3, [r7, #8]
  
  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8001358:	4b99      	ldr	r3, [pc, #612]	; (80015c0 <HAL_ETH_Init+0x2c0>)
 800135a:	685b      	ldr	r3, [r3, #4]
 800135c:	4a98      	ldr	r2, [pc, #608]	; (80015c0 <HAL_ETH_Init+0x2c0>)
 800135e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001362:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8001364:	4b96      	ldr	r3, [pc, #600]	; (80015c0 <HAL_ETH_Init+0x2c0>)
 8001366:	685a      	ldr	r2, [r3, #4]
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	6a1b      	ldr	r3, [r3, #32]
 800136c:	4994      	ldr	r1, [pc, #592]	; (80015c0 <HAL_ETH_Init+0x2c0>)
 800136e:	4313      	orrs	r3, r2
 8001370:	604b      	str	r3, [r1, #4]
  
  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800137a:	681a      	ldr	r2, [r3, #0]
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	f042 0201 	orr.w	r2, r2, #1
 8001384:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001388:	601a      	str	r2, [r3, #0]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 800138a:	f7ff fea5 	bl	80010d8 <HAL_GetTick>
 800138e:	6178      	str	r0, [r7, #20]
  
  /* Wait for software reset */
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8001390:	e011      	b.n	80013b6 <HAL_ETH_Init+0xb6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 8001392:	f7ff fea1 	bl	80010d8 <HAL_GetTick>
 8001396:	4602      	mov	r2, r0
 8001398:	697b      	ldr	r3, [r7, #20]
 800139a:	1ad3      	subs	r3, r2, r3
 800139c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80013a0:	d909      	bls.n	80013b6 <HAL_ETH_Init+0xb6>
    {     
      heth->State= HAL_ETH_STATE_TIMEOUT;
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	2203      	movs	r2, #3
 80013a6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	2200      	movs	r2, #0
 80013ae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      /* Note: The SWR is not performed if the ETH_RX_CLK or the ETH_TX_CLK are  
         not available, please check your external PHY or the IO configuration */
               
      return HAL_TIMEOUT;
 80013b2:	2303      	movs	r3, #3
 80013b4:	e13b      	b.n	800162e <HAL_ETH_Init+0x32e>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	f003 0301 	and.w	r3, r3, #1
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d1e4      	bne.n	8001392 <HAL_ETH_Init+0x92>
    }
  }
  
  /*-------------------------------- MAC Initialization ----------------------*/
  /* Get the ETHERNET MACMIIAR value */
  tempreg = (heth->Instance)->MACMIIAR;
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	691b      	ldr	r3, [r3, #16]
 80013ce:	61fb      	str	r3, [r7, #28]
  /* Clear CSR Clock Range CR[2:0] bits */
  tempreg &= ETH_MACMIIAR_CR_MASK;
 80013d0:	69fb      	ldr	r3, [r7, #28]
 80013d2:	f023 031c 	bic.w	r3, r3, #28
 80013d6:	61fb      	str	r3, [r7, #28]
  
  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 80013d8:	f002 f91c 	bl	8003614 <HAL_RCC_GetHCLKFreq>
 80013dc:	61b8      	str	r0, [r7, #24]
  
  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000)&&(hclk < 35000000))
 80013de:	69bb      	ldr	r3, [r7, #24]
 80013e0:	4a78      	ldr	r2, [pc, #480]	; (80015c4 <HAL_ETH_Init+0x2c4>)
 80013e2:	4293      	cmp	r3, r2
 80013e4:	d908      	bls.n	80013f8 <HAL_ETH_Init+0xf8>
 80013e6:	69bb      	ldr	r3, [r7, #24]
 80013e8:	4a77      	ldr	r2, [pc, #476]	; (80015c8 <HAL_ETH_Init+0x2c8>)
 80013ea:	4293      	cmp	r3, r2
 80013ec:	d804      	bhi.n	80013f8 <HAL_ETH_Init+0xf8>
  {
    /* CSR Clock Range between 20-35 MHz */
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 80013ee:	69fb      	ldr	r3, [r7, #28]
 80013f0:	f043 0308 	orr.w	r3, r3, #8
 80013f4:	61fb      	str	r3, [r7, #28]
 80013f6:	e027      	b.n	8001448 <HAL_ETH_Init+0x148>
  }
  else if((hclk >= 35000000)&&(hclk < 60000000))
 80013f8:	69bb      	ldr	r3, [r7, #24]
 80013fa:	4a73      	ldr	r2, [pc, #460]	; (80015c8 <HAL_ETH_Init+0x2c8>)
 80013fc:	4293      	cmp	r3, r2
 80013fe:	d908      	bls.n	8001412 <HAL_ETH_Init+0x112>
 8001400:	69bb      	ldr	r3, [r7, #24]
 8001402:	4a72      	ldr	r2, [pc, #456]	; (80015cc <HAL_ETH_Init+0x2cc>)
 8001404:	4293      	cmp	r3, r2
 8001406:	d804      	bhi.n	8001412 <HAL_ETH_Init+0x112>
  {
    /* CSR Clock Range between 35-60 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8001408:	69fb      	ldr	r3, [r7, #28]
 800140a:	f043 030c 	orr.w	r3, r3, #12
 800140e:	61fb      	str	r3, [r7, #28]
 8001410:	e01a      	b.n	8001448 <HAL_ETH_Init+0x148>
  }  
  else if((hclk >= 60000000)&&(hclk < 100000000))
 8001412:	69bb      	ldr	r3, [r7, #24]
 8001414:	4a6d      	ldr	r2, [pc, #436]	; (80015cc <HAL_ETH_Init+0x2cc>)
 8001416:	4293      	cmp	r3, r2
 8001418:	d903      	bls.n	8001422 <HAL_ETH_Init+0x122>
 800141a:	69bb      	ldr	r3, [r7, #24]
 800141c:	4a6c      	ldr	r2, [pc, #432]	; (80015d0 <HAL_ETH_Init+0x2d0>)
 800141e:	4293      	cmp	r3, r2
 8001420:	d911      	bls.n	8001446 <HAL_ETH_Init+0x146>
  {
    /* CSR Clock Range between 60-100 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }  
  else if((hclk >= 100000000)&&(hclk < 150000000))
 8001422:	69bb      	ldr	r3, [r7, #24]
 8001424:	4a6a      	ldr	r2, [pc, #424]	; (80015d0 <HAL_ETH_Init+0x2d0>)
 8001426:	4293      	cmp	r3, r2
 8001428:	d908      	bls.n	800143c <HAL_ETH_Init+0x13c>
 800142a:	69bb      	ldr	r3, [r7, #24]
 800142c:	4a69      	ldr	r2, [pc, #420]	; (80015d4 <HAL_ETH_Init+0x2d4>)
 800142e:	4293      	cmp	r3, r2
 8001430:	d804      	bhi.n	800143c <HAL_ETH_Init+0x13c>
  {
    /* CSR Clock Range between 100-150 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8001432:	69fb      	ldr	r3, [r7, #28]
 8001434:	f043 0304 	orr.w	r3, r3, #4
 8001438:	61fb      	str	r3, [r7, #28]
 800143a:	e005      	b.n	8001448 <HAL_ETH_Init+0x148>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 216000000)) */
  {
    /* CSR Clock Range between 150-216 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 800143c:	69fb      	ldr	r3, [r7, #28]
 800143e:	f043 0310 	orr.w	r3, r3, #16
 8001442:	61fb      	str	r3, [r7, #28]
 8001444:	e000      	b.n	8001448 <HAL_ETH_Init+0x148>
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 8001446:	bf00      	nop
  }
  
  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tempreg;
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	69fa      	ldr	r2, [r7, #28]
 800144e:	611a      	str	r2, [r3, #16]
  
  /*-------------------- PHY initialization and configuration ----------------*/
  /* Put the PHY in reset mode */
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 8001450:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001454:	2100      	movs	r1, #0
 8001456:	6878      	ldr	r0, [r7, #4]
 8001458:	f000 f956 	bl	8001708 <HAL_ETH_WritePHYRegister>
 800145c:	4603      	mov	r3, r0
 800145e:	2b00      	cmp	r3, #0
 8001460:	d00b      	beq.n	800147a <HAL_ETH_Init+0x17a>
  {
    /* In case of write timeout */
    err = ETH_ERROR;
 8001462:	2301      	movs	r3, #1
 8001464:	613b      	str	r3, [r7, #16]
    
    /* Config MAC and DMA */
    ETH_MACDMAConfig(heth, err);
 8001466:	6939      	ldr	r1, [r7, #16]
 8001468:	6878      	ldr	r0, [r7, #4]
 800146a:	f000 f9b3 	bl	80017d4 <ETH_MACDMAConfig>
    
    /* Set the ETH peripheral state to READY */
    heth->State = HAL_ETH_STATE_READY;
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	2201      	movs	r2, #1
 8001472:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Return HAL_ERROR */
    return HAL_ERROR;
 8001476:	2301      	movs	r3, #1
 8001478:	e0d9      	b.n	800162e <HAL_ETH_Init+0x32e>
  }
  
  /* Delay to assure PHY reset */
  HAL_Delay(PHY_RESET_DELAY);
 800147a:	20ff      	movs	r0, #255	; 0xff
 800147c:	f7ff fe38 	bl	80010f0 <HAL_Delay>
  
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	685b      	ldr	r3, [r3, #4]
 8001484:	2b00      	cmp	r3, #0
 8001486:	f000 80a7 	beq.w	80015d8 <HAL_ETH_Init+0x2d8>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 800148a:	f7ff fe25 	bl	80010d8 <HAL_GetTick>
 800148e:	6178      	str	r0, [r7, #20]
    
    /* We wait for linked status */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8001490:	f107 030c 	add.w	r3, r7, #12
 8001494:	461a      	mov	r2, r3
 8001496:	2101      	movs	r1, #1
 8001498:	6878      	ldr	r0, [r7, #4]
 800149a:	f000 f8cd 	bl	8001638 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 800149e:	f7ff fe1b 	bl	80010d8 <HAL_GetTick>
 80014a2:	4602      	mov	r2, r0
 80014a4:	697b      	ldr	r3, [r7, #20]
 80014a6:	1ad3      	subs	r3, r2, r3
 80014a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80014ac:	4293      	cmp	r3, r2
 80014ae:	d90f      	bls.n	80014d0 <HAL_ETH_Init+0x1d0>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 80014b0:	2301      	movs	r3, #1
 80014b2:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 80014b4:	6939      	ldr	r1, [r7, #16]
 80014b6:	6878      	ldr	r0, [r7, #4]
 80014b8:	f000 f98c 	bl	80017d4 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	2201      	movs	r2, #1
 80014c0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	2200      	movs	r2, #0
 80014c8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 80014cc:	2303      	movs	r3, #3
 80014ce:	e0ae      	b.n	800162e <HAL_ETH_Init+0x32e>
      }
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 80014d0:	68fb      	ldr	r3, [r7, #12]
 80014d2:	f003 0304 	and.w	r3, r3, #4
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d0da      	beq.n	8001490 <HAL_ETH_Init+0x190>

    
    /* Enable Auto-Negotiation */
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 80014da:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80014de:	2100      	movs	r1, #0
 80014e0:	6878      	ldr	r0, [r7, #4]
 80014e2:	f000 f911 	bl	8001708 <HAL_ETH_WritePHYRegister>
 80014e6:	4603      	mov	r3, r0
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d00b      	beq.n	8001504 <HAL_ETH_Init+0x204>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 80014ec:	2301      	movs	r3, #1
 80014ee:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 80014f0:	6939      	ldr	r1, [r7, #16]
 80014f2:	6878      	ldr	r0, [r7, #4]
 80014f4:	f000 f96e 	bl	80017d4 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	2201      	movs	r2, #1
 80014fc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8001500:	2301      	movs	r3, #1
 8001502:	e094      	b.n	800162e <HAL_ETH_Init+0x32e>
    }
    
    /* Get tick */
    tickstart = HAL_GetTick();
 8001504:	f7ff fde8 	bl	80010d8 <HAL_GetTick>
 8001508:	6178      	str	r0, [r7, #20]
    
    /* Wait until the auto-negotiation will be completed */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 800150a:	f107 030c 	add.w	r3, r7, #12
 800150e:	461a      	mov	r2, r3
 8001510:	2101      	movs	r1, #1
 8001512:	6878      	ldr	r0, [r7, #4]
 8001514:	f000 f890 	bl	8001638 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 8001518:	f7ff fdde 	bl	80010d8 <HAL_GetTick>
 800151c:	4602      	mov	r2, r0
 800151e:	697b      	ldr	r3, [r7, #20]
 8001520:	1ad3      	subs	r3, r2, r3
 8001522:	f241 3288 	movw	r2, #5000	; 0x1388
 8001526:	4293      	cmp	r3, r2
 8001528:	d90f      	bls.n	800154a <HAL_ETH_Init+0x24a>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 800152a:	2301      	movs	r3, #1
 800152c:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 800152e:	6939      	ldr	r1, [r7, #16]
 8001530:	6878      	ldr	r0, [r7, #4]
 8001532:	f000 f94f 	bl	80017d4 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	2201      	movs	r2, #1
 800153a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	2200      	movs	r2, #0
 8001542:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8001546:	2303      	movs	r3, #3
 8001548:	e071      	b.n	800162e <HAL_ETH_Init+0x32e>
      }
      
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 800154a:	68fb      	ldr	r3, [r7, #12]
 800154c:	f003 0320 	and.w	r3, r3, #32
 8001550:	2b00      	cmp	r3, #0
 8001552:	d0da      	beq.n	800150a <HAL_ETH_Init+0x20a>
    
    /* Read the result of the auto-negotiation */
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 8001554:	f107 030c 	add.w	r3, r7, #12
 8001558:	461a      	mov	r2, r3
 800155a:	211f      	movs	r1, #31
 800155c:	6878      	ldr	r0, [r7, #4]
 800155e:	f000 f86b 	bl	8001638 <HAL_ETH_ReadPHYRegister>
 8001562:	4603      	mov	r3, r0
 8001564:	2b00      	cmp	r3, #0
 8001566:	d00b      	beq.n	8001580 <HAL_ETH_Init+0x280>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8001568:	2301      	movs	r3, #1
 800156a:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 800156c:	6939      	ldr	r1, [r7, #16]
 800156e:	6878      	ldr	r0, [r7, #4]
 8001570:	f000 f930 	bl	80017d4 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	2201      	movs	r2, #1
 8001578:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 800157c:	2301      	movs	r3, #1
 800157e:	e056      	b.n	800162e <HAL_ETH_Init+0x32e>
    }
    
    /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	f003 0310 	and.w	r3, r3, #16
 8001586:	2b00      	cmp	r3, #0
 8001588:	d004      	beq.n	8001594 <HAL_ETH_Init+0x294>
    {
      /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001590:	60da      	str	r2, [r3, #12]
 8001592:	e002      	b.n	800159a <HAL_ETH_Init+0x29a>
    }
    else
    {
      /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	2200      	movs	r2, #0
 8001598:	60da      	str	r2, [r3, #12]
    }
    /* Configure the MAC with the speed fixed by the auto-negotiation process */
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 800159a:	68fb      	ldr	r3, [r7, #12]
 800159c:	f003 0304 	and.w	r3, r3, #4
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d003      	beq.n	80015ac <HAL_ETH_Init+0x2ac>
    {  
      /* Set Ethernet speed to 10M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_10M; 
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	2200      	movs	r2, #0
 80015a8:	609a      	str	r2, [r3, #8]
 80015aa:	e037      	b.n	800161c <HAL_ETH_Init+0x31c>
    }
    else
    {   
      /* Set Ethernet speed to 100M following the auto-negotiation */ 
      (heth->Init).Speed = ETH_SPEED_100M;
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80015b2:	609a      	str	r2, [r3, #8]
 80015b4:	e032      	b.n	800161c <HAL_ETH_Init+0x31c>
 80015b6:	bf00      	nop
 80015b8:	03938700 	.word	0x03938700
 80015bc:	40023800 	.word	0x40023800
 80015c0:	40013800 	.word	0x40013800
 80015c4:	01312cff 	.word	0x01312cff
 80015c8:	02160ebf 	.word	0x02160ebf
 80015cc:	039386ff 	.word	0x039386ff
 80015d0:	05f5e0ff 	.word	0x05f5e0ff
 80015d4:	08f0d17f 	.word	0x08f0d17f
    /* Check parameters */
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));
    
    /* Set MAC Speed and Duplex Mode */
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	68db      	ldr	r3, [r3, #12]
 80015dc:	08db      	lsrs	r3, r3, #3
 80015de:	b29a      	uxth	r2, r3
                                                (uint16_t)((heth->Init).Speed >> 1))) != HAL_OK)
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	689b      	ldr	r3, [r3, #8]
 80015e4:	085b      	lsrs	r3, r3, #1
 80015e6:	b29b      	uxth	r3, r3
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 80015e8:	4313      	orrs	r3, r2
 80015ea:	b29b      	uxth	r3, r3
 80015ec:	461a      	mov	r2, r3
 80015ee:	2100      	movs	r1, #0
 80015f0:	6878      	ldr	r0, [r7, #4]
 80015f2:	f000 f889 	bl	8001708 <HAL_ETH_WritePHYRegister>
 80015f6:	4603      	mov	r3, r0
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d00b      	beq.n	8001614 <HAL_ETH_Init+0x314>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 80015fc:	2301      	movs	r3, #1
 80015fe:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8001600:	6939      	ldr	r1, [r7, #16]
 8001602:	6878      	ldr	r0, [r7, #4]
 8001604:	f000 f8e6 	bl	80017d4 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	2201      	movs	r2, #1
 800160c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;
 8001610:	2301      	movs	r3, #1
 8001612:	e00c      	b.n	800162e <HAL_ETH_Init+0x32e>
    }  
    
    /* Delay to assure PHY configuration */
    HAL_Delay(PHY_CONFIG_DELAY);
 8001614:	f640 70ff 	movw	r0, #4095	; 0xfff
 8001618:	f7ff fd6a 	bl	80010f0 <HAL_Delay>
  }
  
  /* Config MAC and DMA */
  ETH_MACDMAConfig(heth, err);
 800161c:	6939      	ldr	r1, [r7, #16]
 800161e:	6878      	ldr	r0, [r7, #4]
 8001620:	f000 f8d8 	bl	80017d4 <ETH_MACDMAConfig>
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	2201      	movs	r2, #1
 8001628:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 800162c:	2300      	movs	r3, #0
}
 800162e:	4618      	mov	r0, r3
 8001630:	3720      	adds	r7, #32
 8001632:	46bd      	mov	sp, r7
 8001634:	bd80      	pop	{r7, pc}
 8001636:	bf00      	nop

08001638 <HAL_ETH_ReadPHYRegister>:
  *                   More PHY register could be read depending on the used PHY
  * @param RegValue PHY register value                  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t *RegValue)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	b086      	sub	sp, #24
 800163c:	af00      	add	r7, sp, #0
 800163e:	60f8      	str	r0, [r7, #12]
 8001640:	460b      	mov	r3, r1
 8001642:	607a      	str	r2, [r7, #4]
 8001644:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg = 0;     
 8001646:	2300      	movs	r3, #0
 8001648:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0;
 800164a:	2300      	movs	r3, #0
 800164c:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 800164e:	68fb      	ldr	r3, [r7, #12]
 8001650:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001654:	b2db      	uxtb	r3, r3
 8001656:	2b82      	cmp	r3, #130	; 0x82
 8001658:	d101      	bne.n	800165e <HAL_ETH_ReadPHYRegister+0x26>
  {
    return HAL_BUSY;
 800165a:	2302      	movs	r3, #2
 800165c:	e050      	b.n	8001700 <HAL_ETH_ReadPHYRegister+0xc8>
  }
  /* Set ETH HAL State to BUSY_RD */
  heth->State = HAL_ETH_STATE_BUSY_RD;
 800165e:	68fb      	ldr	r3, [r7, #12]
 8001660:	2282      	movs	r2, #130	; 0x82
 8001662:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg = heth->Instance->MACMIIAR;
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	691b      	ldr	r3, [r3, #16]
 800166c:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 800166e:	697b      	ldr	r3, [r7, #20]
 8001670:	f003 031c 	and.w	r3, r3, #28
 8001674:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII address register value */
  tmpreg |=(((uint32_t)heth->Init.PhyAddress << 11) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 8001676:	68fb      	ldr	r3, [r7, #12]
 8001678:	8a1b      	ldrh	r3, [r3, #16]
 800167a:	02db      	lsls	r3, r3, #11
 800167c:	b29b      	uxth	r3, r3
 800167e:	697a      	ldr	r2, [r7, #20]
 8001680:	4313      	orrs	r3, r2
 8001682:	617b      	str	r3, [r7, #20]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 8001684:	897b      	ldrh	r3, [r7, #10]
 8001686:	019b      	lsls	r3, r3, #6
 8001688:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 800168c:	697a      	ldr	r2, [r7, #20]
 800168e:	4313      	orrs	r3, r2
 8001690:	617b      	str	r3, [r7, #20]
  tmpreg &= ~ETH_MACMIIAR_MW;                                           /* Set the read mode            */
 8001692:	697b      	ldr	r3, [r7, #20]
 8001694:	f023 0302 	bic.w	r3, r3, #2
 8001698:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MB;                                            /* Set the MII Busy bit         */
 800169a:	697b      	ldr	r3, [r7, #20]
 800169c:	f043 0301 	orr.w	r3, r3, #1
 80016a0:	617b      	str	r3, [r7, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg;
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	697a      	ldr	r2, [r7, #20]
 80016a8:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 80016aa:	f7ff fd15 	bl	80010d8 <HAL_GetTick>
 80016ae:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80016b0:	e015      	b.n	80016de <HAL_ETH_ReadPHYRegister+0xa6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 80016b2:	f7ff fd11 	bl	80010d8 <HAL_GetTick>
 80016b6:	4602      	mov	r2, r0
 80016b8:	693b      	ldr	r3, [r7, #16]
 80016ba:	1ad3      	subs	r3, r2, r3
 80016bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80016c0:	d309      	bcc.n	80016d6 <HAL_ETH_ReadPHYRegister+0x9e>
    {
      heth->State= HAL_ETH_STATE_READY;
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	2201      	movs	r2, #1
 80016c6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 80016ca:	68fb      	ldr	r3, [r7, #12]
 80016cc:	2200      	movs	r2, #0
 80016ce:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 80016d2:	2303      	movs	r3, #3
 80016d4:	e014      	b.n	8001700 <HAL_ETH_ReadPHYRegister+0xc8>
    }
    
    tmpreg = heth->Instance->MACMIIAR;
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	691b      	ldr	r3, [r3, #16]
 80016dc:	617b      	str	r3, [r7, #20]
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80016de:	697b      	ldr	r3, [r7, #20]
 80016e0:	f003 0301 	and.w	r3, r3, #1
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d1e4      	bne.n	80016b2 <HAL_ETH_ReadPHYRegister+0x7a>
  }
  
  /* Get MACMIIDR value */
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	695b      	ldr	r3, [r3, #20]
 80016ee:	b29b      	uxth	r3, r3
 80016f0:	461a      	mov	r2, r3
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	2201      	movs	r2, #1
 80016fa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 80016fe:	2300      	movs	r3, #0
}
 8001700:	4618      	mov	r0, r3
 8001702:	3718      	adds	r7, #24
 8001704:	46bd      	mov	sp, r7
 8001706:	bd80      	pop	{r7, pc}

08001708 <HAL_ETH_WritePHYRegister>:
  *             More PHY register could be written depending on the used PHY
  * @param  RegValue the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t RegValue)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	b086      	sub	sp, #24
 800170c:	af00      	add	r7, sp, #0
 800170e:	60f8      	str	r0, [r7, #12]
 8001710:	460b      	mov	r3, r1
 8001712:	607a      	str	r2, [r7, #4]
 8001714:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg = 0;
 8001716:	2300      	movs	r3, #0
 8001718:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0;
 800171a:	2300      	movs	r3, #0
 800171c:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001724:	b2db      	uxtb	r3, r3
 8001726:	2b42      	cmp	r3, #66	; 0x42
 8001728:	d101      	bne.n	800172e <HAL_ETH_WritePHYRegister+0x26>
  {
    return HAL_BUSY;
 800172a:	2302      	movs	r3, #2
 800172c:	e04e      	b.n	80017cc <HAL_ETH_WritePHYRegister+0xc4>
  }
  /* Set ETH HAL State to BUSY_WR */
  heth->State = HAL_ETH_STATE_BUSY_WR;
 800172e:	68fb      	ldr	r3, [r7, #12]
 8001730:	2242      	movs	r2, #66	; 0x42
 8001732:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg = heth->Instance->MACMIIAR;
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	691b      	ldr	r3, [r3, #16]
 800173c:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 800173e:	697b      	ldr	r3, [r7, #20]
 8001740:	f003 031c 	and.w	r3, r3, #28
 8001744:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII register address value */
  tmpreg |=(((uint32_t)heth->Init.PhyAddress<<11) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 8001746:	68fb      	ldr	r3, [r7, #12]
 8001748:	8a1b      	ldrh	r3, [r3, #16]
 800174a:	02db      	lsls	r3, r3, #11
 800174c:	b29b      	uxth	r3, r3
 800174e:	697a      	ldr	r2, [r7, #20]
 8001750:	4313      	orrs	r3, r2
 8001752:	617b      	str	r3, [r7, #20]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 8001754:	897b      	ldrh	r3, [r7, #10]
 8001756:	019b      	lsls	r3, r3, #6
 8001758:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 800175c:	697a      	ldr	r2, [r7, #20]
 800175e:	4313      	orrs	r3, r2
 8001760:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MW;                                          /* Set the write mode */
 8001762:	697b      	ldr	r3, [r7, #20]
 8001764:	f043 0302 	orr.w	r3, r3, #2
 8001768:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MB;                                          /* Set the MII Busy bit */
 800176a:	697b      	ldr	r3, [r7, #20]
 800176c:	f043 0301 	orr.w	r3, r3, #1
 8001770:	617b      	str	r3, [r7, #20]
  
  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	b29a      	uxth	r2, r3
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	615a      	str	r2, [r3, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg;
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	697a      	ldr	r2, [r7, #20]
 8001782:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8001784:	f7ff fca8 	bl	80010d8 <HAL_GetTick>
 8001788:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800178a:	e015      	b.n	80017b8 <HAL_ETH_WritePHYRegister+0xb0>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 800178c:	f7ff fca4 	bl	80010d8 <HAL_GetTick>
 8001790:	4602      	mov	r2, r0
 8001792:	693b      	ldr	r3, [r7, #16]
 8001794:	1ad3      	subs	r3, r2, r3
 8001796:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800179a:	d309      	bcc.n	80017b0 <HAL_ETH_WritePHYRegister+0xa8>
    {
      heth->State= HAL_ETH_STATE_READY;
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	2201      	movs	r2, #1
 80017a0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	2200      	movs	r2, #0
 80017a8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 80017ac:	2303      	movs	r3, #3
 80017ae:	e00d      	b.n	80017cc <HAL_ETH_WritePHYRegister+0xc4>
    }
    
    tmpreg = heth->Instance->MACMIIAR;
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	691b      	ldr	r3, [r3, #16]
 80017b6:	617b      	str	r3, [r7, #20]
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80017b8:	697b      	ldr	r3, [r7, #20]
 80017ba:	f003 0301 	and.w	r3, r3, #1
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d1e4      	bne.n	800178c <HAL_ETH_WritePHYRegister+0x84>
  }
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	2201      	movs	r2, #1
 80017c6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK; 
 80017ca:	2300      	movs	r3, #0
}
 80017cc:	4618      	mov	r0, r3
 80017ce:	3718      	adds	r7, #24
 80017d0:	46bd      	mov	sp, r7
 80017d2:	bd80      	pop	{r7, pc}

080017d4 <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b0b0      	sub	sp, #192	; 0xc0
 80017d8:	af00      	add	r7, sp, #0
 80017da:	6078      	str	r0, [r7, #4]
 80017dc:	6039      	str	r1, [r7, #0]
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg = 0;
 80017de:	2300      	movs	r3, #0
 80017e0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 80017e4:	683b      	ldr	r3, [r7, #0]
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d007      	beq.n	80017fa <ETH_MACDMAConfig+0x26>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80017f0:	60da      	str	r2, [r3, #12]
    
    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80017f8:	609a      	str	r2, [r3, #8]
  }
  
  /* Ethernet MAC default initialization **************************************/
  macinit.Watchdog = ETH_WATCHDOG_ENABLE;
 80017fa:	2300      	movs	r3, #0
 80017fc:	64bb      	str	r3, [r7, #72]	; 0x48
  macinit.Jabber = ETH_JABBER_ENABLE;
 80017fe:	2300      	movs	r3, #0
 8001800:	64fb      	str	r3, [r7, #76]	; 0x4c
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
 8001802:	2300      	movs	r3, #0
 8001804:	653b      	str	r3, [r7, #80]	; 0x50
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
 8001806:	2300      	movs	r3, #0
 8001808:	657b      	str	r3, [r7, #84]	; 0x54
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
 800180a:	2300      	movs	r3, #0
 800180c:	65bb      	str	r3, [r7, #88]	; 0x58
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
 800180e:	2300      	movs	r3, #0
 8001810:	65fb      	str	r3, [r7, #92]	; 0x5c
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	69db      	ldr	r3, [r3, #28]
 8001816:	2b00      	cmp	r3, #0
 8001818:	d103      	bne.n	8001822 <ETH_MACDMAConfig+0x4e>
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 800181a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800181e:	663b      	str	r3, [r7, #96]	; 0x60
 8001820:	e001      	b.n	8001826 <ETH_MACDMAConfig+0x52>
  }
  else
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 8001822:	2300      	movs	r3, #0
 8001824:	663b      	str	r3, [r7, #96]	; 0x60
  }
  macinit.RetryTransmission = ETH_RETRYTRANSMISSION_DISABLE;
 8001826:	f44f 7300 	mov.w	r3, #512	; 0x200
 800182a:	667b      	str	r3, [r7, #100]	; 0x64
  macinit.AutomaticPadCRCStrip = ETH_AUTOMATICPADCRCSTRIP_DISABLE;
 800182c:	2300      	movs	r3, #0
 800182e:	66bb      	str	r3, [r7, #104]	; 0x68
  macinit.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8001830:	2300      	movs	r3, #0
 8001832:	66fb      	str	r3, [r7, #108]	; 0x6c
  macinit.DeferralCheck = ETH_DEFFERRALCHECK_DISABLE;
 8001834:	2300      	movs	r3, #0
 8001836:	673b      	str	r3, [r7, #112]	; 0x70
  macinit.ReceiveAll = ETH_RECEIVEAll_DISABLE;
 8001838:	2300      	movs	r3, #0
 800183a:	677b      	str	r3, [r7, #116]	; 0x74
  macinit.SourceAddrFilter = ETH_SOURCEADDRFILTER_DISABLE;
 800183c:	2300      	movs	r3, #0
 800183e:	67bb      	str	r3, [r7, #120]	; 0x78
  macinit.PassControlFrames = ETH_PASSCONTROLFRAMES_BLOCKALL;
 8001840:	2340      	movs	r3, #64	; 0x40
 8001842:	67fb      	str	r3, [r7, #124]	; 0x7c
  macinit.BroadcastFramesReception = ETH_BROADCASTFRAMESRECEPTION_ENABLE;
 8001844:	2300      	movs	r3, #0
 8001846:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  macinit.DestinationAddrFilter = ETH_DESTINATIONADDRFILTER_NORMAL;
 800184a:	2300      	movs	r3, #0
 800184c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macinit.PromiscuousMode = ETH_PROMISCUOUS_MODE_DISABLE;
 8001850:	2300      	movs	r3, #0
 8001852:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macinit.MulticastFramesFilter = ETH_MULTICASTFRAMESFILTER_PERFECT;
 8001856:	2300      	movs	r3, #0
 8001858:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  macinit.UnicastFramesFilter = ETH_UNICASTFRAMESFILTER_PERFECT;
 800185c:	2300      	movs	r3, #0
 800185e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  macinit.HashTableHigh = 0x0;
 8001862:	2300      	movs	r3, #0
 8001864:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  macinit.HashTableLow = 0x0;
 8001868:	2300      	movs	r3, #0
 800186a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  macinit.PauseTime = 0x0;
 800186e:	2300      	movs	r3, #0
 8001870:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  macinit.ZeroQuantaPause = ETH_ZEROQUANTAPAUSE_DISABLE;
 8001874:	2380      	movs	r3, #128	; 0x80
 8001876:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  macinit.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 800187a:	2300      	movs	r3, #0
 800187c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  macinit.UnicastPauseFrameDetect = ETH_UNICASTPAUSEFRAMEDETECT_DISABLE;
 8001880:	2300      	movs	r3, #0
 8001882:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  macinit.ReceiveFlowControl = ETH_RECEIVEFLOWCONTROL_DISABLE;
 8001886:	2300      	movs	r3, #0
 8001888:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  macinit.TransmitFlowControl = ETH_TRANSMITFLOWCONTROL_DISABLE;
 800188c:	2300      	movs	r3, #0
 800188e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
 8001892:	2300      	movs	r3, #0
 8001894:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  macinit.VLANTagIdentifier = 0x0;
 8001898:	2300      	movs	r3, #0
 800189a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  
  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg = (heth->Instance)->MACCR;
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg &= ETH_MACCR_CLEAR_MASK;
 80018a8:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80018ac:	4bab      	ldr	r3, [pc, #684]	; (8001b5c <ETH_MACDMAConfig+0x388>)
 80018ae:	4013      	ands	r3, r2
 80018b0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the IPCO bit according to ETH ChecksumOffload value */
  /* Set the DR bit according to ETH RetryTransmission value */
  /* Set the ACS bit according to ETH AutomaticPadCRCStrip value */
  /* Set the BL bit according to ETH BackOffLimit value */
  /* Set the DC bit according to ETH DeferralCheck value */
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 80018b4:	6cba      	ldr	r2, [r7, #72]	; 0x48
                       macinit.Jabber | 
 80018b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 80018b8:	431a      	orrs	r2, r3
                       macinit.InterFrameGap |
 80018ba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                       macinit.Jabber | 
 80018bc:	431a      	orrs	r2, r3
                       macinit.CarrierSense |
 80018be:	6d7b      	ldr	r3, [r7, #84]	; 0x54
                       macinit.InterFrameGap |
 80018c0:	431a      	orrs	r2, r3
                       (heth->Init).Speed | 
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	689b      	ldr	r3, [r3, #8]
                       macinit.CarrierSense |
 80018c6:	431a      	orrs	r2, r3
                       macinit.ReceiveOwn |
 80018c8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
                       (heth->Init).Speed | 
 80018ca:	431a      	orrs	r2, r3
                       macinit.LoopbackMode |
 80018cc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
                       macinit.ReceiveOwn |
 80018ce:	431a      	orrs	r2, r3
                       (heth->Init).DuplexMode | 
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	68db      	ldr	r3, [r3, #12]
                       macinit.LoopbackMode |
 80018d4:	431a      	orrs	r2, r3
                       macinit.ChecksumOffload |    
 80018d6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
                       (heth->Init).DuplexMode | 
 80018d8:	431a      	orrs	r2, r3
                       macinit.RetryTransmission | 
 80018da:	6e7b      	ldr	r3, [r7, #100]	; 0x64
                       macinit.ChecksumOffload |    
 80018dc:	431a      	orrs	r2, r3
                       macinit.AutomaticPadCRCStrip | 
 80018de:	6ebb      	ldr	r3, [r7, #104]	; 0x68
                       macinit.RetryTransmission | 
 80018e0:	431a      	orrs	r2, r3
                       macinit.BackOffLimit | 
 80018e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
                       macinit.AutomaticPadCRCStrip | 
 80018e4:	431a      	orrs	r2, r3
                       macinit.DeferralCheck);
 80018e6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
                       macinit.BackOffLimit | 
 80018e8:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 80018ea:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80018ee:	4313      	orrs	r3, r2
 80018f0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg;
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80018fc:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001908:	2001      	movs	r0, #1
 800190a:	f7ff fbf1 	bl	80010f0 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg; 
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001916:	601a      	str	r2, [r3, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */  
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8001918:	6f7a      	ldr	r2, [r7, #116]	; 0x74
                                        macinit.SourceAddrFilter |
 800191a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 800191c:	431a      	orrs	r2, r3
                                        macinit.PassControlFrames |
 800191e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
                                        macinit.SourceAddrFilter |
 8001920:	431a      	orrs	r2, r3
                                        macinit.BroadcastFramesReception | 
 8001922:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
                                        macinit.PassControlFrames |
 8001926:	431a      	orrs	r2, r3
                                        macinit.DestinationAddrFilter |
 8001928:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
                                        macinit.BroadcastFramesReception | 
 800192c:	431a      	orrs	r2, r3
                                        macinit.PromiscuousMode |
 800192e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
                                        macinit.DestinationAddrFilter |
 8001932:	431a      	orrs	r2, r3
                                        macinit.MulticastFramesFilter |
 8001934:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
                                        macinit.PromiscuousMode |
 8001938:	ea42 0103 	orr.w	r1, r2, r3
                                        macinit.UnicastFramesFilter);
 800193c:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
                                        macinit.MulticastFramesFilter |
 8001944:	430a      	orrs	r2, r1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8001946:	605a      	str	r2, [r3, #4]
   
   /* Wait until the write operation will be taken into account:
      at least four TX_CLK/RX_CLK clock cycles */
   tmpreg = (heth->Instance)->MACFFR;
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	685b      	ldr	r3, [r3, #4]
 800194e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8001952:	2001      	movs	r0, #1
 8001954:	f7ff fbcc 	bl	80010f0 <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg;
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001960:	605a      	str	r2, [r3, #4]
   
   /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
   /* Write to ETHERNET MACHTHR */
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800196a:	609a      	str	r2, [r3, #8]
   
   /* Write to ETHERNET MACHTLR */
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8001974:	60da      	str	r2, [r3, #12]
   /*----------------------- ETHERNET MACFCR Configuration -------------------*/
   
   /* Get the ETHERNET MACFCR value */  
   tmpreg = (heth->Instance)->MACFCR;
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	699b      	ldr	r3, [r3, #24]
 800197c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Clear xx bits */
   tmpreg &= ETH_MACFCR_CLEAR_MASK;
 8001980:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001984:	f64f 7341 	movw	r3, #65345	; 0xff41
 8001988:	4013      	ands	r3, r2
 800198a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
   /* Set the PLT bit according to ETH PauseLowThreshold value */
   /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
   /* Set the RFE bit according to ETH ReceiveFlowControl value */
   /* Set the TFE bit according to ETH TransmitFlowControl value */ 
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 800198e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001992:	041a      	lsls	r2, r3, #16
                        macinit.ZeroQuantaPause |
 8001994:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 8001998:	431a      	orrs	r2, r3
                        macinit.PauseLowThreshold |
 800199a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        macinit.ZeroQuantaPause |
 800199e:	431a      	orrs	r2, r3
                        macinit.UnicastPauseFrameDetect | 
 80019a0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
                        macinit.PauseLowThreshold |
 80019a4:	431a      	orrs	r2, r3
                        macinit.ReceiveFlowControl |
 80019a6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
                        macinit.UnicastPauseFrameDetect | 
 80019aa:	431a      	orrs	r2, r3
                        macinit.TransmitFlowControl); 
 80019ac:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
                        macinit.ReceiveFlowControl |
 80019b0:	4313      	orrs	r3, r2
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 80019b2:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80019b6:	4313      	orrs	r3, r2
 80019b8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   
   /* Write to ETHERNET MACFCR */
   (heth->Instance)->MACFCR = (uint32_t)tmpreg;
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80019c4:	619a      	str	r2, [r3, #24]
   
   /* Wait until the write operation will be taken into account:
   at least four TX_CLK/RX_CLK clock cycles */
   tmpreg = (heth->Instance)->MACFCR;
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	699b      	ldr	r3, [r3, #24]
 80019cc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 80019d0:	2001      	movs	r0, #1
 80019d2:	f7ff fb8d 	bl	80010f0 <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg;
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80019de:	619a      	str	r2, [r3, #24]
   
   /*----------------------- ETHERNET MACVLANTR Configuration ----------------*/
   /* Set the ETV bit according to ETH VLANTagComparison value */
   /* Set the VL bit according to ETH VLANTagIdentifier value */  
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 80019e0:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
                                            macinit.VLANTagIdentifier);
 80019e4:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	430a      	orrs	r2, r1
 80019ee:	61da      	str	r2, [r3, #28]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->MACVLANTR;
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	69db      	ldr	r3, [r3, #28]
 80019f6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80019fa:	2001      	movs	r0, #1
 80019fc:	f7ff fb78 	bl	80010f0 <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg;
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001a08:	61da      	str	r2, [r3, #28]
    
    /* Ethernet DMA default initialization ************************************/
    dmainit.DropTCPIPChecksumErrorFrame = ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE;
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	60bb      	str	r3, [r7, #8]
    dmainit.ReceiveStoreForward = ETH_RECEIVESTOREFORWARD_ENABLE;
 8001a0e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001a12:	60fb      	str	r3, [r7, #12]
    dmainit.FlushReceivedFrame = ETH_FLUSHRECEIVEDFRAME_ENABLE;
 8001a14:	2300      	movs	r3, #0
 8001a16:	613b      	str	r3, [r7, #16]
    dmainit.TransmitStoreForward = ETH_TRANSMITSTOREFORWARD_ENABLE;  
 8001a18:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001a1c:	617b      	str	r3, [r7, #20]
    dmainit.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8001a1e:	2300      	movs	r3, #0
 8001a20:	61bb      	str	r3, [r7, #24]
    dmainit.ForwardErrorFrames = ETH_FORWARDERRORFRAMES_DISABLE;
 8001a22:	2300      	movs	r3, #0
 8001a24:	61fb      	str	r3, [r7, #28]
    dmainit.ForwardUndersizedGoodFrames = ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE;
 8001a26:	2300      	movs	r3, #0
 8001a28:	623b      	str	r3, [r7, #32]
    dmainit.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	627b      	str	r3, [r7, #36]	; 0x24
    dmainit.SecondFrameOperate = ETH_SECONDFRAMEOPERARTE_ENABLE;
 8001a2e:	2304      	movs	r3, #4
 8001a30:	62bb      	str	r3, [r7, #40]	; 0x28
    dmainit.AddressAlignedBeats = ETH_ADDRESSALIGNEDBEATS_ENABLE;
 8001a32:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001a36:	62fb      	str	r3, [r7, #44]	; 0x2c
    dmainit.FixedBurst = ETH_FIXEDBURST_ENABLE;
 8001a38:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001a3c:	633b      	str	r3, [r7, #48]	; 0x30
    dmainit.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8001a3e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001a42:	637b      	str	r3, [r7, #52]	; 0x34
    dmainit.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8001a44:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001a48:	63bb      	str	r3, [r7, #56]	; 0x38
    dmainit.EnhancedDescriptorFormat = ETH_DMAENHANCEDDESCRIPTOR_ENABLE;
 8001a4a:	2380      	movs	r3, #128	; 0x80
 8001a4c:	63fb      	str	r3, [r7, #60]	; 0x3c
    dmainit.DescriptorSkipLength = 0x0;
 8001a4e:	2300      	movs	r3, #0
 8001a50:	643b      	str	r3, [r7, #64]	; 0x40
    dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8001a52:	2300      	movs	r3, #0
 8001a54:	647b      	str	r3, [r7, #68]	; 0x44
    
    /* Get the ETHERNET DMAOMR value */
    tmpreg = (heth->Instance)->DMAOMR;
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681a      	ldr	r2, [r3, #0]
 8001a5a:	f241 0318 	movw	r3, #4120	; 0x1018
 8001a5e:	4413      	add	r3, r2
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Clear xx bits */
    tmpreg &= ETH_DMAOMR_CLEAR_MASK;
 8001a66:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001a6a:	4b3d      	ldr	r3, [pc, #244]	; (8001b60 <ETH_MACDMAConfig+0x38c>)
 8001a6c:	4013      	ands	r3, r2
 8001a6e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Set the TTC bit according to ETH TransmitThresholdControl value */
    /* Set the FEF bit according to ETH ForwardErrorFrames value */
    /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
    /* Set the RTC bit according to ETH ReceiveThresholdControl value */
    /* Set the OSF bit according to ETH SecondFrameOperate value */
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8001a72:	68ba      	ldr	r2, [r7, #8]
                         dmainit.ReceiveStoreForward |
 8001a74:	68fb      	ldr	r3, [r7, #12]
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8001a76:	431a      	orrs	r2, r3
                         dmainit.FlushReceivedFrame |
 8001a78:	693b      	ldr	r3, [r7, #16]
                         dmainit.ReceiveStoreForward |
 8001a7a:	431a      	orrs	r2, r3
                         dmainit.TransmitStoreForward | 
 8001a7c:	697b      	ldr	r3, [r7, #20]
                         dmainit.FlushReceivedFrame |
 8001a7e:	431a      	orrs	r2, r3
                         dmainit.TransmitThresholdControl |
 8001a80:	69bb      	ldr	r3, [r7, #24]
                         dmainit.TransmitStoreForward | 
 8001a82:	431a      	orrs	r2, r3
                         dmainit.ForwardErrorFrames |
 8001a84:	69fb      	ldr	r3, [r7, #28]
                         dmainit.TransmitThresholdControl |
 8001a86:	431a      	orrs	r2, r3
                         dmainit.ForwardUndersizedGoodFrames |
 8001a88:	6a3b      	ldr	r3, [r7, #32]
                         dmainit.ForwardErrorFrames |
 8001a8a:	431a      	orrs	r2, r3
                         dmainit.ReceiveThresholdControl |
 8001a8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                         dmainit.ForwardUndersizedGoodFrames |
 8001a8e:	431a      	orrs	r2, r3
                         dmainit.SecondFrameOperate);
 8001a90:	6abb      	ldr	r3, [r7, #40]	; 0x28
                         dmainit.ReceiveThresholdControl |
 8001a92:	4313      	orrs	r3, r2
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8001a94:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001a98:	4313      	orrs	r3, r2
 8001a9a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    
    /* Write to ETHERNET DMAOMR */
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg;
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681a      	ldr	r2, [r3, #0]
 8001aa2:	f241 0318 	movw	r3, #4120	; 0x1018
 8001aa6:	4413      	add	r3, r2
 8001aa8:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001aac:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->DMAOMR;
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681a      	ldr	r2, [r3, #0]
 8001ab2:	f241 0318 	movw	r3, #4120	; 0x1018
 8001ab6:	4413      	add	r3, r2
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001abe:	2001      	movs	r0, #1
 8001ac0:	f7ff fb16 	bl	80010f0 <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg;
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681a      	ldr	r2, [r3, #0]
 8001ac8:	f241 0318 	movw	r3, #4120	; 0x1018
 8001acc:	4413      	add	r3, r2
 8001ace:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001ad2:	601a      	str	r2, [r3, #0]
    /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
    /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
    /* Set the Enhanced DMA descriptors bit according to ETH EnhancedDescriptorFormat value*/
    /* Set the DSL bit according to ETH DesciptorSkipLength value */
    /* Set the PR and DA bits according to ETH DMAArbitration value */
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8001ad4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
                                          dmainit.FixedBurst |
 8001ad6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8001ad8:	431a      	orrs	r2, r3
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8001ada:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                          dmainit.FixedBurst |
 8001adc:	431a      	orrs	r2, r3
                                          dmainit.TxDMABurstLength |
 8001ade:	6bbb      	ldr	r3, [r7, #56]	; 0x38
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8001ae0:	431a      	orrs	r2, r3
                                          dmainit.EnhancedDescriptorFormat |
 8001ae2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                                          dmainit.TxDMABurstLength |
 8001ae4:	431a      	orrs	r2, r3
                                          (dmainit.DescriptorSkipLength << 2) |
 8001ae6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001ae8:	009b      	lsls	r3, r3, #2
                                          dmainit.EnhancedDescriptorFormat |
 8001aea:	431a      	orrs	r2, r3
                                          dmainit.DMAArbitration |
 8001aec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
                                          (dmainit.DescriptorSkipLength << 2) |
 8001aee:	431a      	orrs	r2, r3
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001af8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001afc:	601a      	str	r2, [r3, #0]
                                          ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */
     
     /* Wait until the write operation will be taken into account:
        at least four TX_CLK/RX_CLK clock cycles */
     tmpreg = (heth->Instance)->DMABMR;
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8001b0c:	2001      	movs	r0, #1
 8001b0e:	f7ff faef 	bl	80010f0 <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg;
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001b1a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001b1e:	601a      	str	r2, [r3, #0]

     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	699b      	ldr	r3, [r3, #24]
 8001b24:	2b01      	cmp	r3, #1
 8001b26:	d10d      	bne.n	8001b44 <ETH_MACDMAConfig+0x370>
     {
       /* Enable the Ethernet Rx Interrupt */
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681a      	ldr	r2, [r3, #0]
 8001b2c:	f241 031c 	movw	r3, #4124	; 0x101c
 8001b30:	4413      	add	r3, r2
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	687a      	ldr	r2, [r7, #4]
 8001b36:	6811      	ldr	r1, [r2, #0]
 8001b38:	4a0a      	ldr	r2, [pc, #40]	; (8001b64 <ETH_MACDMAConfig+0x390>)
 8001b3a:	431a      	orrs	r2, r3
 8001b3c:	f241 031c 	movw	r3, #4124	; 0x101c
 8001b40:	440b      	add	r3, r1
 8001b42:	601a      	str	r2, [r3, #0]
     }

     /* Initialize MAC address in ethernet MAC */ 
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	695b      	ldr	r3, [r3, #20]
 8001b48:	461a      	mov	r2, r3
 8001b4a:	2100      	movs	r1, #0
 8001b4c:	6878      	ldr	r0, [r7, #4]
 8001b4e:	f000 f80b 	bl	8001b68 <ETH_MACAddressConfig>
}
 8001b52:	bf00      	nop
 8001b54:	37c0      	adds	r7, #192	; 0xc0
 8001b56:	46bd      	mov	sp, r7
 8001b58:	bd80      	pop	{r7, pc}
 8001b5a:	bf00      	nop
 8001b5c:	ff20810f 	.word	0xff20810f
 8001b60:	f8de3f23 	.word	0xf8de3f23
 8001b64:	00010040 	.word	0x00010040

08001b68 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8001b68:	b480      	push	{r7}
 8001b6a:	b087      	sub	sp, #28
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	60f8      	str	r0, [r7, #12]
 8001b70:	60b9      	str	r1, [r7, #8]
 8001b72:	607a      	str	r2, [r7, #4]
  
  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
  
  /* Calculate the selected MAC address high register */
  tmpreg = ((uint32_t)Addr[5] << 8) | (uint32_t)Addr[4];
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	3305      	adds	r3, #5
 8001b78:	781b      	ldrb	r3, [r3, #0]
 8001b7a:	021b      	lsls	r3, r3, #8
 8001b7c:	687a      	ldr	r2, [r7, #4]
 8001b7e:	3204      	adds	r2, #4
 8001b80:	7812      	ldrb	r2, [r2, #0]
 8001b82:	4313      	orrs	r3, r2
 8001b84:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg;
 8001b86:	68ba      	ldr	r2, [r7, #8]
 8001b88:	4b11      	ldr	r3, [pc, #68]	; (8001bd0 <ETH_MACAddressConfig+0x68>)
 8001b8a:	4413      	add	r3, r2
 8001b8c:	461a      	mov	r2, r3
 8001b8e:	697b      	ldr	r3, [r7, #20]
 8001b90:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg = ((uint32_t)Addr[3] << 24) | ((uint32_t)Addr[2] << 16) | ((uint32_t)Addr[1] << 8) | Addr[0];
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	3303      	adds	r3, #3
 8001b96:	781b      	ldrb	r3, [r3, #0]
 8001b98:	061a      	lsls	r2, r3, #24
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	3302      	adds	r3, #2
 8001b9e:	781b      	ldrb	r3, [r3, #0]
 8001ba0:	041b      	lsls	r3, r3, #16
 8001ba2:	431a      	orrs	r2, r3
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	3301      	adds	r3, #1
 8001ba8:	781b      	ldrb	r3, [r3, #0]
 8001baa:	021b      	lsls	r3, r3, #8
 8001bac:	4313      	orrs	r3, r2
 8001bae:	687a      	ldr	r2, [r7, #4]
 8001bb0:	7812      	ldrb	r2, [r2, #0]
 8001bb2:	4313      	orrs	r3, r2
 8001bb4:	617b      	str	r3, [r7, #20]
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg;
 8001bb6:	68ba      	ldr	r2, [r7, #8]
 8001bb8:	4b06      	ldr	r3, [pc, #24]	; (8001bd4 <ETH_MACAddressConfig+0x6c>)
 8001bba:	4413      	add	r3, r2
 8001bbc:	461a      	mov	r2, r3
 8001bbe:	697b      	ldr	r3, [r7, #20]
 8001bc0:	6013      	str	r3, [r2, #0]
}
 8001bc2:	bf00      	nop
 8001bc4:	371c      	adds	r7, #28
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bcc:	4770      	bx	lr
 8001bce:	bf00      	nop
 8001bd0:	40028040 	.word	0x40028040
 8001bd4:	40028044 	.word	0x40028044

08001bd8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001bd8:	b480      	push	{r7}
 8001bda:	b089      	sub	sp, #36	; 0x24
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	6078      	str	r0, [r7, #4]
 8001be0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001be2:	2300      	movs	r3, #0
 8001be4:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8001be6:	2300      	movs	r3, #0
 8001be8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001bea:	2300      	movs	r3, #0
 8001bec:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001bee:	2300      	movs	r3, #0
 8001bf0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	61fb      	str	r3, [r7, #28]
 8001bf6:	e175      	b.n	8001ee4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001bf8:	2201      	movs	r2, #1
 8001bfa:	69fb      	ldr	r3, [r7, #28]
 8001bfc:	fa02 f303 	lsl.w	r3, r2, r3
 8001c00:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001c02:	683b      	ldr	r3, [r7, #0]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	697a      	ldr	r2, [r7, #20]
 8001c08:	4013      	ands	r3, r2
 8001c0a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001c0c:	693a      	ldr	r2, [r7, #16]
 8001c0e:	697b      	ldr	r3, [r7, #20]
 8001c10:	429a      	cmp	r2, r3
 8001c12:	f040 8164 	bne.w	8001ede <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001c16:	683b      	ldr	r3, [r7, #0]
 8001c18:	685b      	ldr	r3, [r3, #4]
 8001c1a:	2b02      	cmp	r3, #2
 8001c1c:	d003      	beq.n	8001c26 <HAL_GPIO_Init+0x4e>
 8001c1e:	683b      	ldr	r3, [r7, #0]
 8001c20:	685b      	ldr	r3, [r3, #4]
 8001c22:	2b12      	cmp	r3, #18
 8001c24:	d123      	bne.n	8001c6e <HAL_GPIO_Init+0x96>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001c26:	69fb      	ldr	r3, [r7, #28]
 8001c28:	08da      	lsrs	r2, r3, #3
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	3208      	adds	r2, #8
 8001c2e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c32:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001c34:	69fb      	ldr	r3, [r7, #28]
 8001c36:	f003 0307 	and.w	r3, r3, #7
 8001c3a:	009b      	lsls	r3, r3, #2
 8001c3c:	220f      	movs	r2, #15
 8001c3e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c42:	43db      	mvns	r3, r3
 8001c44:	69ba      	ldr	r2, [r7, #24]
 8001c46:	4013      	ands	r3, r2
 8001c48:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001c4a:	683b      	ldr	r3, [r7, #0]
 8001c4c:	691a      	ldr	r2, [r3, #16]
 8001c4e:	69fb      	ldr	r3, [r7, #28]
 8001c50:	f003 0307 	and.w	r3, r3, #7
 8001c54:	009b      	lsls	r3, r3, #2
 8001c56:	fa02 f303 	lsl.w	r3, r2, r3
 8001c5a:	69ba      	ldr	r2, [r7, #24]
 8001c5c:	4313      	orrs	r3, r2
 8001c5e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001c60:	69fb      	ldr	r3, [r7, #28]
 8001c62:	08da      	lsrs	r2, r3, #3
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	3208      	adds	r2, #8
 8001c68:	69b9      	ldr	r1, [r7, #24]
 8001c6a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001c74:	69fb      	ldr	r3, [r7, #28]
 8001c76:	005b      	lsls	r3, r3, #1
 8001c78:	2203      	movs	r2, #3
 8001c7a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c7e:	43db      	mvns	r3, r3
 8001c80:	69ba      	ldr	r2, [r7, #24]
 8001c82:	4013      	ands	r3, r2
 8001c84:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001c86:	683b      	ldr	r3, [r7, #0]
 8001c88:	685b      	ldr	r3, [r3, #4]
 8001c8a:	f003 0203 	and.w	r2, r3, #3
 8001c8e:	69fb      	ldr	r3, [r7, #28]
 8001c90:	005b      	lsls	r3, r3, #1
 8001c92:	fa02 f303 	lsl.w	r3, r2, r3
 8001c96:	69ba      	ldr	r2, [r7, #24]
 8001c98:	4313      	orrs	r3, r2
 8001c9a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	69ba      	ldr	r2, [r7, #24]
 8001ca0:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001ca2:	683b      	ldr	r3, [r7, #0]
 8001ca4:	685b      	ldr	r3, [r3, #4]
 8001ca6:	2b01      	cmp	r3, #1
 8001ca8:	d00b      	beq.n	8001cc2 <HAL_GPIO_Init+0xea>
 8001caa:	683b      	ldr	r3, [r7, #0]
 8001cac:	685b      	ldr	r3, [r3, #4]
 8001cae:	2b02      	cmp	r3, #2
 8001cb0:	d007      	beq.n	8001cc2 <HAL_GPIO_Init+0xea>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001cb2:	683b      	ldr	r3, [r7, #0]
 8001cb4:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001cb6:	2b11      	cmp	r3, #17
 8001cb8:	d003      	beq.n	8001cc2 <HAL_GPIO_Init+0xea>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001cba:	683b      	ldr	r3, [r7, #0]
 8001cbc:	685b      	ldr	r3, [r3, #4]
 8001cbe:	2b12      	cmp	r3, #18
 8001cc0:	d130      	bne.n	8001d24 <HAL_GPIO_Init+0x14c>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	689b      	ldr	r3, [r3, #8]
 8001cc6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001cc8:	69fb      	ldr	r3, [r7, #28]
 8001cca:	005b      	lsls	r3, r3, #1
 8001ccc:	2203      	movs	r2, #3
 8001cce:	fa02 f303 	lsl.w	r3, r2, r3
 8001cd2:	43db      	mvns	r3, r3
 8001cd4:	69ba      	ldr	r2, [r7, #24]
 8001cd6:	4013      	ands	r3, r2
 8001cd8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001cda:	683b      	ldr	r3, [r7, #0]
 8001cdc:	68da      	ldr	r2, [r3, #12]
 8001cde:	69fb      	ldr	r3, [r7, #28]
 8001ce0:	005b      	lsls	r3, r3, #1
 8001ce2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ce6:	69ba      	ldr	r2, [r7, #24]
 8001ce8:	4313      	orrs	r3, r2
 8001cea:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	69ba      	ldr	r2, [r7, #24]
 8001cf0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	685b      	ldr	r3, [r3, #4]
 8001cf6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001cf8:	2201      	movs	r2, #1
 8001cfa:	69fb      	ldr	r3, [r7, #28]
 8001cfc:	fa02 f303 	lsl.w	r3, r2, r3
 8001d00:	43db      	mvns	r3, r3
 8001d02:	69ba      	ldr	r2, [r7, #24]
 8001d04:	4013      	ands	r3, r2
 8001d06:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8001d08:	683b      	ldr	r3, [r7, #0]
 8001d0a:	685b      	ldr	r3, [r3, #4]
 8001d0c:	091b      	lsrs	r3, r3, #4
 8001d0e:	f003 0201 	and.w	r2, r3, #1
 8001d12:	69fb      	ldr	r3, [r7, #28]
 8001d14:	fa02 f303 	lsl.w	r3, r2, r3
 8001d18:	69ba      	ldr	r2, [r7, #24]
 8001d1a:	4313      	orrs	r3, r2
 8001d1c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	69ba      	ldr	r2, [r7, #24]
 8001d22:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	68db      	ldr	r3, [r3, #12]
 8001d28:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001d2a:	69fb      	ldr	r3, [r7, #28]
 8001d2c:	005b      	lsls	r3, r3, #1
 8001d2e:	2203      	movs	r2, #3
 8001d30:	fa02 f303 	lsl.w	r3, r2, r3
 8001d34:	43db      	mvns	r3, r3
 8001d36:	69ba      	ldr	r2, [r7, #24]
 8001d38:	4013      	ands	r3, r2
 8001d3a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8001d3c:	683b      	ldr	r3, [r7, #0]
 8001d3e:	689a      	ldr	r2, [r3, #8]
 8001d40:	69fb      	ldr	r3, [r7, #28]
 8001d42:	005b      	lsls	r3, r3, #1
 8001d44:	fa02 f303 	lsl.w	r3, r2, r3
 8001d48:	69ba      	ldr	r2, [r7, #24]
 8001d4a:	4313      	orrs	r3, r2
 8001d4c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	69ba      	ldr	r2, [r7, #24]
 8001d52:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001d54:	683b      	ldr	r3, [r7, #0]
 8001d56:	685b      	ldr	r3, [r3, #4]
 8001d58:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	f000 80be 	beq.w	8001ede <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d62:	4b65      	ldr	r3, [pc, #404]	; (8001ef8 <HAL_GPIO_Init+0x320>)
 8001d64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d66:	4a64      	ldr	r2, [pc, #400]	; (8001ef8 <HAL_GPIO_Init+0x320>)
 8001d68:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d6c:	6453      	str	r3, [r2, #68]	; 0x44
 8001d6e:	4b62      	ldr	r3, [pc, #392]	; (8001ef8 <HAL_GPIO_Init+0x320>)
 8001d70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d72:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d76:	60fb      	str	r3, [r7, #12]
 8001d78:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001d7a:	4a60      	ldr	r2, [pc, #384]	; (8001efc <HAL_GPIO_Init+0x324>)
 8001d7c:	69fb      	ldr	r3, [r7, #28]
 8001d7e:	089b      	lsrs	r3, r3, #2
 8001d80:	3302      	adds	r3, #2
 8001d82:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d86:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001d88:	69fb      	ldr	r3, [r7, #28]
 8001d8a:	f003 0303 	and.w	r3, r3, #3
 8001d8e:	009b      	lsls	r3, r3, #2
 8001d90:	220f      	movs	r2, #15
 8001d92:	fa02 f303 	lsl.w	r3, r2, r3
 8001d96:	43db      	mvns	r3, r3
 8001d98:	69ba      	ldr	r2, [r7, #24]
 8001d9a:	4013      	ands	r3, r2
 8001d9c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	4a57      	ldr	r2, [pc, #348]	; (8001f00 <HAL_GPIO_Init+0x328>)
 8001da2:	4293      	cmp	r3, r2
 8001da4:	d037      	beq.n	8001e16 <HAL_GPIO_Init+0x23e>
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	4a56      	ldr	r2, [pc, #344]	; (8001f04 <HAL_GPIO_Init+0x32c>)
 8001daa:	4293      	cmp	r3, r2
 8001dac:	d031      	beq.n	8001e12 <HAL_GPIO_Init+0x23a>
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	4a55      	ldr	r2, [pc, #340]	; (8001f08 <HAL_GPIO_Init+0x330>)
 8001db2:	4293      	cmp	r3, r2
 8001db4:	d02b      	beq.n	8001e0e <HAL_GPIO_Init+0x236>
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	4a54      	ldr	r2, [pc, #336]	; (8001f0c <HAL_GPIO_Init+0x334>)
 8001dba:	4293      	cmp	r3, r2
 8001dbc:	d025      	beq.n	8001e0a <HAL_GPIO_Init+0x232>
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	4a53      	ldr	r2, [pc, #332]	; (8001f10 <HAL_GPIO_Init+0x338>)
 8001dc2:	4293      	cmp	r3, r2
 8001dc4:	d01f      	beq.n	8001e06 <HAL_GPIO_Init+0x22e>
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	4a52      	ldr	r2, [pc, #328]	; (8001f14 <HAL_GPIO_Init+0x33c>)
 8001dca:	4293      	cmp	r3, r2
 8001dcc:	d019      	beq.n	8001e02 <HAL_GPIO_Init+0x22a>
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	4a51      	ldr	r2, [pc, #324]	; (8001f18 <HAL_GPIO_Init+0x340>)
 8001dd2:	4293      	cmp	r3, r2
 8001dd4:	d013      	beq.n	8001dfe <HAL_GPIO_Init+0x226>
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	4a50      	ldr	r2, [pc, #320]	; (8001f1c <HAL_GPIO_Init+0x344>)
 8001dda:	4293      	cmp	r3, r2
 8001ddc:	d00d      	beq.n	8001dfa <HAL_GPIO_Init+0x222>
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	4a4f      	ldr	r2, [pc, #316]	; (8001f20 <HAL_GPIO_Init+0x348>)
 8001de2:	4293      	cmp	r3, r2
 8001de4:	d007      	beq.n	8001df6 <HAL_GPIO_Init+0x21e>
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	4a4e      	ldr	r2, [pc, #312]	; (8001f24 <HAL_GPIO_Init+0x34c>)
 8001dea:	4293      	cmp	r3, r2
 8001dec:	d101      	bne.n	8001df2 <HAL_GPIO_Init+0x21a>
 8001dee:	2309      	movs	r3, #9
 8001df0:	e012      	b.n	8001e18 <HAL_GPIO_Init+0x240>
 8001df2:	230a      	movs	r3, #10
 8001df4:	e010      	b.n	8001e18 <HAL_GPIO_Init+0x240>
 8001df6:	2308      	movs	r3, #8
 8001df8:	e00e      	b.n	8001e18 <HAL_GPIO_Init+0x240>
 8001dfa:	2307      	movs	r3, #7
 8001dfc:	e00c      	b.n	8001e18 <HAL_GPIO_Init+0x240>
 8001dfe:	2306      	movs	r3, #6
 8001e00:	e00a      	b.n	8001e18 <HAL_GPIO_Init+0x240>
 8001e02:	2305      	movs	r3, #5
 8001e04:	e008      	b.n	8001e18 <HAL_GPIO_Init+0x240>
 8001e06:	2304      	movs	r3, #4
 8001e08:	e006      	b.n	8001e18 <HAL_GPIO_Init+0x240>
 8001e0a:	2303      	movs	r3, #3
 8001e0c:	e004      	b.n	8001e18 <HAL_GPIO_Init+0x240>
 8001e0e:	2302      	movs	r3, #2
 8001e10:	e002      	b.n	8001e18 <HAL_GPIO_Init+0x240>
 8001e12:	2301      	movs	r3, #1
 8001e14:	e000      	b.n	8001e18 <HAL_GPIO_Init+0x240>
 8001e16:	2300      	movs	r3, #0
 8001e18:	69fa      	ldr	r2, [r7, #28]
 8001e1a:	f002 0203 	and.w	r2, r2, #3
 8001e1e:	0092      	lsls	r2, r2, #2
 8001e20:	4093      	lsls	r3, r2
 8001e22:	69ba      	ldr	r2, [r7, #24]
 8001e24:	4313      	orrs	r3, r2
 8001e26:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001e28:	4934      	ldr	r1, [pc, #208]	; (8001efc <HAL_GPIO_Init+0x324>)
 8001e2a:	69fb      	ldr	r3, [r7, #28]
 8001e2c:	089b      	lsrs	r3, r3, #2
 8001e2e:	3302      	adds	r3, #2
 8001e30:	69ba      	ldr	r2, [r7, #24]
 8001e32:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001e36:	4b3c      	ldr	r3, [pc, #240]	; (8001f28 <HAL_GPIO_Init+0x350>)
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e3c:	693b      	ldr	r3, [r7, #16]
 8001e3e:	43db      	mvns	r3, r3
 8001e40:	69ba      	ldr	r2, [r7, #24]
 8001e42:	4013      	ands	r3, r2
 8001e44:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001e46:	683b      	ldr	r3, [r7, #0]
 8001e48:	685b      	ldr	r3, [r3, #4]
 8001e4a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d003      	beq.n	8001e5a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001e52:	69ba      	ldr	r2, [r7, #24]
 8001e54:	693b      	ldr	r3, [r7, #16]
 8001e56:	4313      	orrs	r3, r2
 8001e58:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001e5a:	4a33      	ldr	r2, [pc, #204]	; (8001f28 <HAL_GPIO_Init+0x350>)
 8001e5c:	69bb      	ldr	r3, [r7, #24]
 8001e5e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001e60:	4b31      	ldr	r3, [pc, #196]	; (8001f28 <HAL_GPIO_Init+0x350>)
 8001e62:	685b      	ldr	r3, [r3, #4]
 8001e64:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e66:	693b      	ldr	r3, [r7, #16]
 8001e68:	43db      	mvns	r3, r3
 8001e6a:	69ba      	ldr	r2, [r7, #24]
 8001e6c:	4013      	ands	r3, r2
 8001e6e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001e70:	683b      	ldr	r3, [r7, #0]
 8001e72:	685b      	ldr	r3, [r3, #4]
 8001e74:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d003      	beq.n	8001e84 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001e7c:	69ba      	ldr	r2, [r7, #24]
 8001e7e:	693b      	ldr	r3, [r7, #16]
 8001e80:	4313      	orrs	r3, r2
 8001e82:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001e84:	4a28      	ldr	r2, [pc, #160]	; (8001f28 <HAL_GPIO_Init+0x350>)
 8001e86:	69bb      	ldr	r3, [r7, #24]
 8001e88:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001e8a:	4b27      	ldr	r3, [pc, #156]	; (8001f28 <HAL_GPIO_Init+0x350>)
 8001e8c:	689b      	ldr	r3, [r3, #8]
 8001e8e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e90:	693b      	ldr	r3, [r7, #16]
 8001e92:	43db      	mvns	r3, r3
 8001e94:	69ba      	ldr	r2, [r7, #24]
 8001e96:	4013      	ands	r3, r2
 8001e98:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001e9a:	683b      	ldr	r3, [r7, #0]
 8001e9c:	685b      	ldr	r3, [r3, #4]
 8001e9e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d003      	beq.n	8001eae <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001ea6:	69ba      	ldr	r2, [r7, #24]
 8001ea8:	693b      	ldr	r3, [r7, #16]
 8001eaa:	4313      	orrs	r3, r2
 8001eac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001eae:	4a1e      	ldr	r2, [pc, #120]	; (8001f28 <HAL_GPIO_Init+0x350>)
 8001eb0:	69bb      	ldr	r3, [r7, #24]
 8001eb2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001eb4:	4b1c      	ldr	r3, [pc, #112]	; (8001f28 <HAL_GPIO_Init+0x350>)
 8001eb6:	68db      	ldr	r3, [r3, #12]
 8001eb8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001eba:	693b      	ldr	r3, [r7, #16]
 8001ebc:	43db      	mvns	r3, r3
 8001ebe:	69ba      	ldr	r2, [r7, #24]
 8001ec0:	4013      	ands	r3, r2
 8001ec2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001ec4:	683b      	ldr	r3, [r7, #0]
 8001ec6:	685b      	ldr	r3, [r3, #4]
 8001ec8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d003      	beq.n	8001ed8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001ed0:	69ba      	ldr	r2, [r7, #24]
 8001ed2:	693b      	ldr	r3, [r7, #16]
 8001ed4:	4313      	orrs	r3, r2
 8001ed6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001ed8:	4a13      	ldr	r2, [pc, #76]	; (8001f28 <HAL_GPIO_Init+0x350>)
 8001eda:	69bb      	ldr	r3, [r7, #24]
 8001edc:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8001ede:	69fb      	ldr	r3, [r7, #28]
 8001ee0:	3301      	adds	r3, #1
 8001ee2:	61fb      	str	r3, [r7, #28]
 8001ee4:	69fb      	ldr	r3, [r7, #28]
 8001ee6:	2b0f      	cmp	r3, #15
 8001ee8:	f67f ae86 	bls.w	8001bf8 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001eec:	bf00      	nop
 8001eee:	3724      	adds	r7, #36	; 0x24
 8001ef0:	46bd      	mov	sp, r7
 8001ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef6:	4770      	bx	lr
 8001ef8:	40023800 	.word	0x40023800
 8001efc:	40013800 	.word	0x40013800
 8001f00:	40020000 	.word	0x40020000
 8001f04:	40020400 	.word	0x40020400
 8001f08:	40020800 	.word	0x40020800
 8001f0c:	40020c00 	.word	0x40020c00
 8001f10:	40021000 	.word	0x40021000
 8001f14:	40021400 	.word	0x40021400
 8001f18:	40021800 	.word	0x40021800
 8001f1c:	40021c00 	.word	0x40021c00
 8001f20:	40022000 	.word	0x40022000
 8001f24:	40022400 	.word	0x40022400
 8001f28:	40013c00 	.word	0x40013c00

08001f2c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001f2c:	b480      	push	{r7}
 8001f2e:	b083      	sub	sp, #12
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	6078      	str	r0, [r7, #4]
 8001f34:	460b      	mov	r3, r1
 8001f36:	807b      	strh	r3, [r7, #2]
 8001f38:	4613      	mov	r3, r2
 8001f3a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001f3c:	787b      	ldrb	r3, [r7, #1]
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d003      	beq.n	8001f4a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001f42:	887a      	ldrh	r2, [r7, #2]
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8001f48:	e003      	b.n	8001f52 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8001f4a:	887b      	ldrh	r3, [r7, #2]
 8001f4c:	041a      	lsls	r2, r3, #16
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	619a      	str	r2, [r3, #24]
}
 8001f52:	bf00      	nop
 8001f54:	370c      	adds	r7, #12
 8001f56:	46bd      	mov	sp, r7
 8001f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5c:	4770      	bx	lr

08001f5e <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001f5e:	b480      	push	{r7}
 8001f60:	b083      	sub	sp, #12
 8001f62:	af00      	add	r7, sp, #0
 8001f64:	6078      	str	r0, [r7, #4]
 8001f66:	460b      	mov	r3, r1
 8001f68:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	695a      	ldr	r2, [r3, #20]
 8001f6e:	887b      	ldrh	r3, [r7, #2]
 8001f70:	401a      	ands	r2, r3
 8001f72:	887b      	ldrh	r3, [r7, #2]
 8001f74:	429a      	cmp	r2, r3
 8001f76:	d104      	bne.n	8001f82 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001f78:	887b      	ldrh	r3, [r7, #2]
 8001f7a:	041a      	lsls	r2, r3, #16
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8001f80:	e002      	b.n	8001f88 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8001f82:	887a      	ldrh	r2, [r7, #2]
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	619a      	str	r2, [r3, #24]
}
 8001f88:	bf00      	nop
 8001f8a:	370c      	adds	r7, #12
 8001f8c:	46bd      	mov	sp, r7
 8001f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f92:	4770      	bx	lr

08001f94 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001f94:	b580      	push	{r7, lr}
 8001f96:	b082      	sub	sp, #8
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d101      	bne.n	8001fa6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001fa2:	2301      	movs	r3, #1
 8001fa4:	e07f      	b.n	80020a6 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001fac:	b2db      	uxtb	r3, r3
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d106      	bne.n	8001fc0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001fba:	6878      	ldr	r0, [r7, #4]
 8001fbc:	f7fe fe9e 	bl	8000cfc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	2224      	movs	r2, #36	; 0x24
 8001fc4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	681a      	ldr	r2, [r3, #0]
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	f022 0201 	bic.w	r2, r2, #1
 8001fd6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	685a      	ldr	r2, [r3, #4]
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001fe4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	689a      	ldr	r2, [r3, #8]
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001ff4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	68db      	ldr	r3, [r3, #12]
 8001ffa:	2b01      	cmp	r3, #1
 8001ffc:	d107      	bne.n	800200e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	689a      	ldr	r2, [r3, #8]
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800200a:	609a      	str	r2, [r3, #8]
 800200c:	e006      	b.n	800201c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	689a      	ldr	r2, [r3, #8]
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800201a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	68db      	ldr	r3, [r3, #12]
 8002020:	2b02      	cmp	r3, #2
 8002022:	d104      	bne.n	800202e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800202c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	6859      	ldr	r1, [r3, #4]
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681a      	ldr	r2, [r3, #0]
 8002038:	4b1d      	ldr	r3, [pc, #116]	; (80020b0 <HAL_I2C_Init+0x11c>)
 800203a:	430b      	orrs	r3, r1
 800203c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	68da      	ldr	r2, [r3, #12]
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800204c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	691a      	ldr	r2, [r3, #16]
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	695b      	ldr	r3, [r3, #20]
 8002056:	ea42 0103 	orr.w	r1, r2, r3
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	699b      	ldr	r3, [r3, #24]
 800205e:	021a      	lsls	r2, r3, #8
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	430a      	orrs	r2, r1
 8002066:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	69d9      	ldr	r1, [r3, #28]
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	6a1a      	ldr	r2, [r3, #32]
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	430a      	orrs	r2, r1
 8002076:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	681a      	ldr	r2, [r3, #0]
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	f042 0201 	orr.w	r2, r2, #1
 8002086:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	2200      	movs	r2, #0
 800208c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	2220      	movs	r2, #32
 8002092:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	2200      	movs	r2, #0
 800209a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	2200      	movs	r2, #0
 80020a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80020a4:	2300      	movs	r3, #0
}
 80020a6:	4618      	mov	r0, r3
 80020a8:	3708      	adds	r7, #8
 80020aa:	46bd      	mov	sp, r7
 80020ac:	bd80      	pop	{r7, pc}
 80020ae:	bf00      	nop
 80020b0:	02008000 	.word	0x02008000

080020b4 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80020b4:	b580      	push	{r7, lr}
 80020b6:	b088      	sub	sp, #32
 80020b8:	af02      	add	r7, sp, #8
 80020ba:	60f8      	str	r0, [r7, #12]
 80020bc:	4608      	mov	r0, r1
 80020be:	4611      	mov	r1, r2
 80020c0:	461a      	mov	r2, r3
 80020c2:	4603      	mov	r3, r0
 80020c4:	817b      	strh	r3, [r7, #10]
 80020c6:	460b      	mov	r3, r1
 80020c8:	813b      	strh	r3, [r7, #8]
 80020ca:	4613      	mov	r3, r2
 80020cc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80020d4:	b2db      	uxtb	r3, r3
 80020d6:	2b20      	cmp	r3, #32
 80020d8:	f040 80f9 	bne.w	80022ce <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80020dc:	6a3b      	ldr	r3, [r7, #32]
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d002      	beq.n	80020e8 <HAL_I2C_Mem_Write+0x34>
 80020e2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d105      	bne.n	80020f4 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	f44f 7200 	mov.w	r2, #512	; 0x200
 80020ee:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80020f0:	2301      	movs	r3, #1
 80020f2:	e0ed      	b.n	80022d0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80020fa:	2b01      	cmp	r3, #1
 80020fc:	d101      	bne.n	8002102 <HAL_I2C_Mem_Write+0x4e>
 80020fe:	2302      	movs	r3, #2
 8002100:	e0e6      	b.n	80022d0 <HAL_I2C_Mem_Write+0x21c>
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	2201      	movs	r2, #1
 8002106:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800210a:	f7fe ffe5 	bl	80010d8 <HAL_GetTick>
 800210e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002110:	697b      	ldr	r3, [r7, #20]
 8002112:	9300      	str	r3, [sp, #0]
 8002114:	2319      	movs	r3, #25
 8002116:	2201      	movs	r2, #1
 8002118:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800211c:	68f8      	ldr	r0, [r7, #12]
 800211e:	f000 fac3 	bl	80026a8 <I2C_WaitOnFlagUntilTimeout>
 8002122:	4603      	mov	r3, r0
 8002124:	2b00      	cmp	r3, #0
 8002126:	d001      	beq.n	800212c <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8002128:	2301      	movs	r3, #1
 800212a:	e0d1      	b.n	80022d0 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	2221      	movs	r2, #33	; 0x21
 8002130:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	2240      	movs	r2, #64	; 0x40
 8002138:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	2200      	movs	r2, #0
 8002140:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	6a3a      	ldr	r2, [r7, #32]
 8002146:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800214c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	2200      	movs	r2, #0
 8002152:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002154:	88f8      	ldrh	r0, [r7, #6]
 8002156:	893a      	ldrh	r2, [r7, #8]
 8002158:	8979      	ldrh	r1, [r7, #10]
 800215a:	697b      	ldr	r3, [r7, #20]
 800215c:	9301      	str	r3, [sp, #4]
 800215e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002160:	9300      	str	r3, [sp, #0]
 8002162:	4603      	mov	r3, r0
 8002164:	68f8      	ldr	r0, [r7, #12]
 8002166:	f000 f9d3 	bl	8002510 <I2C_RequestMemoryWrite>
 800216a:	4603      	mov	r3, r0
 800216c:	2b00      	cmp	r3, #0
 800216e:	d005      	beq.n	800217c <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	2200      	movs	r2, #0
 8002174:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8002178:	2301      	movs	r3, #1
 800217a:	e0a9      	b.n	80022d0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002180:	b29b      	uxth	r3, r3
 8002182:	2bff      	cmp	r3, #255	; 0xff
 8002184:	d90e      	bls.n	80021a4 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	22ff      	movs	r2, #255	; 0xff
 800218a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002190:	b2da      	uxtb	r2, r3
 8002192:	8979      	ldrh	r1, [r7, #10]
 8002194:	2300      	movs	r3, #0
 8002196:	9300      	str	r3, [sp, #0]
 8002198:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800219c:	68f8      	ldr	r0, [r7, #12]
 800219e:	f000 fba5 	bl	80028ec <I2C_TransferConfig>
 80021a2:	e00f      	b.n	80021c4 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021a8:	b29a      	uxth	r2, r3
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021b2:	b2da      	uxtb	r2, r3
 80021b4:	8979      	ldrh	r1, [r7, #10]
 80021b6:	2300      	movs	r3, #0
 80021b8:	9300      	str	r3, [sp, #0]
 80021ba:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80021be:	68f8      	ldr	r0, [r7, #12]
 80021c0:	f000 fb94 	bl	80028ec <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80021c4:	697a      	ldr	r2, [r7, #20]
 80021c6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80021c8:	68f8      	ldr	r0, [r7, #12]
 80021ca:	f000 faad 	bl	8002728 <I2C_WaitOnTXISFlagUntilTimeout>
 80021ce:	4603      	mov	r3, r0
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d001      	beq.n	80021d8 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80021d4:	2301      	movs	r3, #1
 80021d6:	e07b      	b.n	80022d0 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021dc:	781a      	ldrb	r2, [r3, #0]
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021e8:	1c5a      	adds	r2, r3, #1
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021f2:	b29b      	uxth	r3, r3
 80021f4:	3b01      	subs	r3, #1
 80021f6:	b29a      	uxth	r2, r3
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002200:	3b01      	subs	r3, #1
 8002202:	b29a      	uxth	r2, r3
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800220c:	b29b      	uxth	r3, r3
 800220e:	2b00      	cmp	r3, #0
 8002210:	d034      	beq.n	800227c <HAL_I2C_Mem_Write+0x1c8>
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002216:	2b00      	cmp	r3, #0
 8002218:	d130      	bne.n	800227c <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800221a:	697b      	ldr	r3, [r7, #20]
 800221c:	9300      	str	r3, [sp, #0]
 800221e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002220:	2200      	movs	r2, #0
 8002222:	2180      	movs	r1, #128	; 0x80
 8002224:	68f8      	ldr	r0, [r7, #12]
 8002226:	f000 fa3f 	bl	80026a8 <I2C_WaitOnFlagUntilTimeout>
 800222a:	4603      	mov	r3, r0
 800222c:	2b00      	cmp	r3, #0
 800222e:	d001      	beq.n	8002234 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8002230:	2301      	movs	r3, #1
 8002232:	e04d      	b.n	80022d0 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002238:	b29b      	uxth	r3, r3
 800223a:	2bff      	cmp	r3, #255	; 0xff
 800223c:	d90e      	bls.n	800225c <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	22ff      	movs	r2, #255	; 0xff
 8002242:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002248:	b2da      	uxtb	r2, r3
 800224a:	8979      	ldrh	r1, [r7, #10]
 800224c:	2300      	movs	r3, #0
 800224e:	9300      	str	r3, [sp, #0]
 8002250:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002254:	68f8      	ldr	r0, [r7, #12]
 8002256:	f000 fb49 	bl	80028ec <I2C_TransferConfig>
 800225a:	e00f      	b.n	800227c <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002260:	b29a      	uxth	r2, r3
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800226a:	b2da      	uxtb	r2, r3
 800226c:	8979      	ldrh	r1, [r7, #10]
 800226e:	2300      	movs	r3, #0
 8002270:	9300      	str	r3, [sp, #0]
 8002272:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002276:	68f8      	ldr	r0, [r7, #12]
 8002278:	f000 fb38 	bl	80028ec <I2C_TransferConfig>
        }
      }

    }
    while (hi2c->XferCount > 0U);
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002280:	b29b      	uxth	r3, r3
 8002282:	2b00      	cmp	r3, #0
 8002284:	d19e      	bne.n	80021c4 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002286:	697a      	ldr	r2, [r7, #20]
 8002288:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800228a:	68f8      	ldr	r0, [r7, #12]
 800228c:	f000 fa8c 	bl	80027a8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002290:	4603      	mov	r3, r0
 8002292:	2b00      	cmp	r3, #0
 8002294:	d001      	beq.n	800229a <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8002296:	2301      	movs	r3, #1
 8002298:	e01a      	b.n	80022d0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	2220      	movs	r2, #32
 80022a0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	6859      	ldr	r1, [r3, #4]
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	681a      	ldr	r2, [r3, #0]
 80022ac:	4b0a      	ldr	r3, [pc, #40]	; (80022d8 <HAL_I2C_Mem_Write+0x224>)
 80022ae:	400b      	ands	r3, r1
 80022b0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	2220      	movs	r2, #32
 80022b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	2200      	movs	r2, #0
 80022be:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	2200      	movs	r2, #0
 80022c6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80022ca:	2300      	movs	r3, #0
 80022cc:	e000      	b.n	80022d0 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80022ce:	2302      	movs	r3, #2
  }
}
 80022d0:	4618      	mov	r0, r3
 80022d2:	3718      	adds	r7, #24
 80022d4:	46bd      	mov	sp, r7
 80022d6:	bd80      	pop	{r7, pc}
 80022d8:	fe00e800 	.word	0xfe00e800

080022dc <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80022dc:	b580      	push	{r7, lr}
 80022de:	b088      	sub	sp, #32
 80022e0:	af02      	add	r7, sp, #8
 80022e2:	60f8      	str	r0, [r7, #12]
 80022e4:	4608      	mov	r0, r1
 80022e6:	4611      	mov	r1, r2
 80022e8:	461a      	mov	r2, r3
 80022ea:	4603      	mov	r3, r0
 80022ec:	817b      	strh	r3, [r7, #10]
 80022ee:	460b      	mov	r3, r1
 80022f0:	813b      	strh	r3, [r7, #8]
 80022f2:	4613      	mov	r3, r2
 80022f4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80022fc:	b2db      	uxtb	r3, r3
 80022fe:	2b20      	cmp	r3, #32
 8002300:	f040 80fd 	bne.w	80024fe <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8002304:	6a3b      	ldr	r3, [r7, #32]
 8002306:	2b00      	cmp	r3, #0
 8002308:	d002      	beq.n	8002310 <HAL_I2C_Mem_Read+0x34>
 800230a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800230c:	2b00      	cmp	r3, #0
 800230e:	d105      	bne.n	800231c <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002316:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002318:	2301      	movs	r3, #1
 800231a:	e0f1      	b.n	8002500 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002322:	2b01      	cmp	r3, #1
 8002324:	d101      	bne.n	800232a <HAL_I2C_Mem_Read+0x4e>
 8002326:	2302      	movs	r3, #2
 8002328:	e0ea      	b.n	8002500 <HAL_I2C_Mem_Read+0x224>
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	2201      	movs	r2, #1
 800232e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002332:	f7fe fed1 	bl	80010d8 <HAL_GetTick>
 8002336:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002338:	697b      	ldr	r3, [r7, #20]
 800233a:	9300      	str	r3, [sp, #0]
 800233c:	2319      	movs	r3, #25
 800233e:	2201      	movs	r2, #1
 8002340:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002344:	68f8      	ldr	r0, [r7, #12]
 8002346:	f000 f9af 	bl	80026a8 <I2C_WaitOnFlagUntilTimeout>
 800234a:	4603      	mov	r3, r0
 800234c:	2b00      	cmp	r3, #0
 800234e:	d001      	beq.n	8002354 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8002350:	2301      	movs	r3, #1
 8002352:	e0d5      	b.n	8002500 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	2222      	movs	r2, #34	; 0x22
 8002358:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	2240      	movs	r2, #64	; 0x40
 8002360:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	2200      	movs	r2, #0
 8002368:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	6a3a      	ldr	r2, [r7, #32]
 800236e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002374:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	2200      	movs	r2, #0
 800237a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800237c:	88f8      	ldrh	r0, [r7, #6]
 800237e:	893a      	ldrh	r2, [r7, #8]
 8002380:	8979      	ldrh	r1, [r7, #10]
 8002382:	697b      	ldr	r3, [r7, #20]
 8002384:	9301      	str	r3, [sp, #4]
 8002386:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002388:	9300      	str	r3, [sp, #0]
 800238a:	4603      	mov	r3, r0
 800238c:	68f8      	ldr	r0, [r7, #12]
 800238e:	f000 f913 	bl	80025b8 <I2C_RequestMemoryRead>
 8002392:	4603      	mov	r3, r0
 8002394:	2b00      	cmp	r3, #0
 8002396:	d005      	beq.n	80023a4 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	2200      	movs	r2, #0
 800239c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80023a0:	2301      	movs	r3, #1
 80023a2:	e0ad      	b.n	8002500 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023a8:	b29b      	uxth	r3, r3
 80023aa:	2bff      	cmp	r3, #255	; 0xff
 80023ac:	d90e      	bls.n	80023cc <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	22ff      	movs	r2, #255	; 0xff
 80023b2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023b8:	b2da      	uxtb	r2, r3
 80023ba:	8979      	ldrh	r1, [r7, #10]
 80023bc:	4b52      	ldr	r3, [pc, #328]	; (8002508 <HAL_I2C_Mem_Read+0x22c>)
 80023be:	9300      	str	r3, [sp, #0]
 80023c0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80023c4:	68f8      	ldr	r0, [r7, #12]
 80023c6:	f000 fa91 	bl	80028ec <I2C_TransferConfig>
 80023ca:	e00f      	b.n	80023ec <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023d0:	b29a      	uxth	r2, r3
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023da:	b2da      	uxtb	r2, r3
 80023dc:	8979      	ldrh	r1, [r7, #10]
 80023de:	4b4a      	ldr	r3, [pc, #296]	; (8002508 <HAL_I2C_Mem_Read+0x22c>)
 80023e0:	9300      	str	r3, [sp, #0]
 80023e2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80023e6:	68f8      	ldr	r0, [r7, #12]
 80023e8:	f000 fa80 	bl	80028ec <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80023ec:	697b      	ldr	r3, [r7, #20]
 80023ee:	9300      	str	r3, [sp, #0]
 80023f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023f2:	2200      	movs	r2, #0
 80023f4:	2104      	movs	r1, #4
 80023f6:	68f8      	ldr	r0, [r7, #12]
 80023f8:	f000 f956 	bl	80026a8 <I2C_WaitOnFlagUntilTimeout>
 80023fc:	4603      	mov	r3, r0
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d001      	beq.n	8002406 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8002402:	2301      	movs	r3, #1
 8002404:	e07c      	b.n	8002500 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002410:	b2d2      	uxtb	r2, r2
 8002412:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002418:	1c5a      	adds	r2, r3, #1
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002422:	3b01      	subs	r3, #1
 8002424:	b29a      	uxth	r2, r3
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800242e:	b29b      	uxth	r3, r3
 8002430:	3b01      	subs	r3, #1
 8002432:	b29a      	uxth	r2, r3
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800243c:	b29b      	uxth	r3, r3
 800243e:	2b00      	cmp	r3, #0
 8002440:	d034      	beq.n	80024ac <HAL_I2C_Mem_Read+0x1d0>
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002446:	2b00      	cmp	r3, #0
 8002448:	d130      	bne.n	80024ac <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800244a:	697b      	ldr	r3, [r7, #20]
 800244c:	9300      	str	r3, [sp, #0]
 800244e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002450:	2200      	movs	r2, #0
 8002452:	2180      	movs	r1, #128	; 0x80
 8002454:	68f8      	ldr	r0, [r7, #12]
 8002456:	f000 f927 	bl	80026a8 <I2C_WaitOnFlagUntilTimeout>
 800245a:	4603      	mov	r3, r0
 800245c:	2b00      	cmp	r3, #0
 800245e:	d001      	beq.n	8002464 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8002460:	2301      	movs	r3, #1
 8002462:	e04d      	b.n	8002500 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002468:	b29b      	uxth	r3, r3
 800246a:	2bff      	cmp	r3, #255	; 0xff
 800246c:	d90e      	bls.n	800248c <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	22ff      	movs	r2, #255	; 0xff
 8002472:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002478:	b2da      	uxtb	r2, r3
 800247a:	8979      	ldrh	r1, [r7, #10]
 800247c:	2300      	movs	r3, #0
 800247e:	9300      	str	r3, [sp, #0]
 8002480:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002484:	68f8      	ldr	r0, [r7, #12]
 8002486:	f000 fa31 	bl	80028ec <I2C_TransferConfig>
 800248a:	e00f      	b.n	80024ac <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002490:	b29a      	uxth	r2, r3
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800249a:	b2da      	uxtb	r2, r3
 800249c:	8979      	ldrh	r1, [r7, #10]
 800249e:	2300      	movs	r3, #0
 80024a0:	9300      	str	r3, [sp, #0]
 80024a2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80024a6:	68f8      	ldr	r0, [r7, #12]
 80024a8:	f000 fa20 	bl	80028ec <I2C_TransferConfig>
        }
      }
    }
    while (hi2c->XferCount > 0U);
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024b0:	b29b      	uxth	r3, r3
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d19a      	bne.n	80023ec <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80024b6:	697a      	ldr	r2, [r7, #20]
 80024b8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80024ba:	68f8      	ldr	r0, [r7, #12]
 80024bc:	f000 f974 	bl	80027a8 <I2C_WaitOnSTOPFlagUntilTimeout>
 80024c0:	4603      	mov	r3, r0
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d001      	beq.n	80024ca <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 80024c6:	2301      	movs	r3, #1
 80024c8:	e01a      	b.n	8002500 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	2220      	movs	r2, #32
 80024d0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	6859      	ldr	r1, [r3, #4]
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	681a      	ldr	r2, [r3, #0]
 80024dc:	4b0b      	ldr	r3, [pc, #44]	; (800250c <HAL_I2C_Mem_Read+0x230>)
 80024de:	400b      	ands	r3, r1
 80024e0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	2220      	movs	r2, #32
 80024e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	2200      	movs	r2, #0
 80024ee:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	2200      	movs	r2, #0
 80024f6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80024fa:	2300      	movs	r3, #0
 80024fc:	e000      	b.n	8002500 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80024fe:	2302      	movs	r3, #2
  }
}
 8002500:	4618      	mov	r0, r3
 8002502:	3718      	adds	r7, #24
 8002504:	46bd      	mov	sp, r7
 8002506:	bd80      	pop	{r7, pc}
 8002508:	80002400 	.word	0x80002400
 800250c:	fe00e800 	.word	0xfe00e800

08002510 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002510:	b580      	push	{r7, lr}
 8002512:	b086      	sub	sp, #24
 8002514:	af02      	add	r7, sp, #8
 8002516:	60f8      	str	r0, [r7, #12]
 8002518:	4608      	mov	r0, r1
 800251a:	4611      	mov	r1, r2
 800251c:	461a      	mov	r2, r3
 800251e:	4603      	mov	r3, r0
 8002520:	817b      	strh	r3, [r7, #10]
 8002522:	460b      	mov	r3, r1
 8002524:	813b      	strh	r3, [r7, #8]
 8002526:	4613      	mov	r3, r2
 8002528:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800252a:	88fb      	ldrh	r3, [r7, #6]
 800252c:	b2da      	uxtb	r2, r3
 800252e:	8979      	ldrh	r1, [r7, #10]
 8002530:	4b20      	ldr	r3, [pc, #128]	; (80025b4 <I2C_RequestMemoryWrite+0xa4>)
 8002532:	9300      	str	r3, [sp, #0]
 8002534:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002538:	68f8      	ldr	r0, [r7, #12]
 800253a:	f000 f9d7 	bl	80028ec <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800253e:	69fa      	ldr	r2, [r7, #28]
 8002540:	69b9      	ldr	r1, [r7, #24]
 8002542:	68f8      	ldr	r0, [r7, #12]
 8002544:	f000 f8f0 	bl	8002728 <I2C_WaitOnTXISFlagUntilTimeout>
 8002548:	4603      	mov	r3, r0
 800254a:	2b00      	cmp	r3, #0
 800254c:	d001      	beq.n	8002552 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800254e:	2301      	movs	r3, #1
 8002550:	e02c      	b.n	80025ac <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002552:	88fb      	ldrh	r3, [r7, #6]
 8002554:	2b01      	cmp	r3, #1
 8002556:	d105      	bne.n	8002564 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002558:	893b      	ldrh	r3, [r7, #8]
 800255a:	b2da      	uxtb	r2, r3
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	629a      	str	r2, [r3, #40]	; 0x28
 8002562:	e015      	b.n	8002590 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002564:	893b      	ldrh	r3, [r7, #8]
 8002566:	0a1b      	lsrs	r3, r3, #8
 8002568:	b29b      	uxth	r3, r3
 800256a:	b2da      	uxtb	r2, r3
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002572:	69fa      	ldr	r2, [r7, #28]
 8002574:	69b9      	ldr	r1, [r7, #24]
 8002576:	68f8      	ldr	r0, [r7, #12]
 8002578:	f000 f8d6 	bl	8002728 <I2C_WaitOnTXISFlagUntilTimeout>
 800257c:	4603      	mov	r3, r0
 800257e:	2b00      	cmp	r3, #0
 8002580:	d001      	beq.n	8002586 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8002582:	2301      	movs	r3, #1
 8002584:	e012      	b.n	80025ac <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002586:	893b      	ldrh	r3, [r7, #8]
 8002588:	b2da      	uxtb	r2, r3
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8002590:	69fb      	ldr	r3, [r7, #28]
 8002592:	9300      	str	r3, [sp, #0]
 8002594:	69bb      	ldr	r3, [r7, #24]
 8002596:	2200      	movs	r2, #0
 8002598:	2180      	movs	r1, #128	; 0x80
 800259a:	68f8      	ldr	r0, [r7, #12]
 800259c:	f000 f884 	bl	80026a8 <I2C_WaitOnFlagUntilTimeout>
 80025a0:	4603      	mov	r3, r0
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d001      	beq.n	80025aa <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80025a6:	2301      	movs	r3, #1
 80025a8:	e000      	b.n	80025ac <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80025aa:	2300      	movs	r3, #0
}
 80025ac:	4618      	mov	r0, r3
 80025ae:	3710      	adds	r7, #16
 80025b0:	46bd      	mov	sp, r7
 80025b2:	bd80      	pop	{r7, pc}
 80025b4:	80002000 	.word	0x80002000

080025b8 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80025b8:	b580      	push	{r7, lr}
 80025ba:	b086      	sub	sp, #24
 80025bc:	af02      	add	r7, sp, #8
 80025be:	60f8      	str	r0, [r7, #12]
 80025c0:	4608      	mov	r0, r1
 80025c2:	4611      	mov	r1, r2
 80025c4:	461a      	mov	r2, r3
 80025c6:	4603      	mov	r3, r0
 80025c8:	817b      	strh	r3, [r7, #10]
 80025ca:	460b      	mov	r3, r1
 80025cc:	813b      	strh	r3, [r7, #8]
 80025ce:	4613      	mov	r3, r2
 80025d0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80025d2:	88fb      	ldrh	r3, [r7, #6]
 80025d4:	b2da      	uxtb	r2, r3
 80025d6:	8979      	ldrh	r1, [r7, #10]
 80025d8:	4b20      	ldr	r3, [pc, #128]	; (800265c <I2C_RequestMemoryRead+0xa4>)
 80025da:	9300      	str	r3, [sp, #0]
 80025dc:	2300      	movs	r3, #0
 80025de:	68f8      	ldr	r0, [r7, #12]
 80025e0:	f000 f984 	bl	80028ec <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80025e4:	69fa      	ldr	r2, [r7, #28]
 80025e6:	69b9      	ldr	r1, [r7, #24]
 80025e8:	68f8      	ldr	r0, [r7, #12]
 80025ea:	f000 f89d 	bl	8002728 <I2C_WaitOnTXISFlagUntilTimeout>
 80025ee:	4603      	mov	r3, r0
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d001      	beq.n	80025f8 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 80025f4:	2301      	movs	r3, #1
 80025f6:	e02c      	b.n	8002652 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80025f8:	88fb      	ldrh	r3, [r7, #6]
 80025fa:	2b01      	cmp	r3, #1
 80025fc:	d105      	bne.n	800260a <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80025fe:	893b      	ldrh	r3, [r7, #8]
 8002600:	b2da      	uxtb	r2, r3
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	629a      	str	r2, [r3, #40]	; 0x28
 8002608:	e015      	b.n	8002636 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800260a:	893b      	ldrh	r3, [r7, #8]
 800260c:	0a1b      	lsrs	r3, r3, #8
 800260e:	b29b      	uxth	r3, r3
 8002610:	b2da      	uxtb	r2, r3
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002618:	69fa      	ldr	r2, [r7, #28]
 800261a:	69b9      	ldr	r1, [r7, #24]
 800261c:	68f8      	ldr	r0, [r7, #12]
 800261e:	f000 f883 	bl	8002728 <I2C_WaitOnTXISFlagUntilTimeout>
 8002622:	4603      	mov	r3, r0
 8002624:	2b00      	cmp	r3, #0
 8002626:	d001      	beq.n	800262c <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8002628:	2301      	movs	r3, #1
 800262a:	e012      	b.n	8002652 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800262c:	893b      	ldrh	r3, [r7, #8]
 800262e:	b2da      	uxtb	r2, r3
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8002636:	69fb      	ldr	r3, [r7, #28]
 8002638:	9300      	str	r3, [sp, #0]
 800263a:	69bb      	ldr	r3, [r7, #24]
 800263c:	2200      	movs	r2, #0
 800263e:	2140      	movs	r1, #64	; 0x40
 8002640:	68f8      	ldr	r0, [r7, #12]
 8002642:	f000 f831 	bl	80026a8 <I2C_WaitOnFlagUntilTimeout>
 8002646:	4603      	mov	r3, r0
 8002648:	2b00      	cmp	r3, #0
 800264a:	d001      	beq.n	8002650 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 800264c:	2301      	movs	r3, #1
 800264e:	e000      	b.n	8002652 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8002650:	2300      	movs	r3, #0
}
 8002652:	4618      	mov	r0, r3
 8002654:	3710      	adds	r7, #16
 8002656:	46bd      	mov	sp, r7
 8002658:	bd80      	pop	{r7, pc}
 800265a:	bf00      	nop
 800265c:	80002000 	.word	0x80002000

08002660 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002660:	b480      	push	{r7}
 8002662:	b083      	sub	sp, #12
 8002664:	af00      	add	r7, sp, #0
 8002666:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	699b      	ldr	r3, [r3, #24]
 800266e:	f003 0302 	and.w	r3, r3, #2
 8002672:	2b02      	cmp	r3, #2
 8002674:	d103      	bne.n	800267e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	2200      	movs	r2, #0
 800267c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	699b      	ldr	r3, [r3, #24]
 8002684:	f003 0301 	and.w	r3, r3, #1
 8002688:	2b01      	cmp	r3, #1
 800268a:	d007      	beq.n	800269c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	699a      	ldr	r2, [r3, #24]
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f042 0201 	orr.w	r2, r2, #1
 800269a:	619a      	str	r2, [r3, #24]
  }
}
 800269c:	bf00      	nop
 800269e:	370c      	adds	r7, #12
 80026a0:	46bd      	mov	sp, r7
 80026a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a6:	4770      	bx	lr

080026a8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80026a8:	b580      	push	{r7, lr}
 80026aa:	b084      	sub	sp, #16
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	60f8      	str	r0, [r7, #12]
 80026b0:	60b9      	str	r1, [r7, #8]
 80026b2:	603b      	str	r3, [r7, #0]
 80026b4:	4613      	mov	r3, r2
 80026b6:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80026b8:	e022      	b.n	8002700 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80026ba:	683b      	ldr	r3, [r7, #0]
 80026bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026c0:	d01e      	beq.n	8002700 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80026c2:	f7fe fd09 	bl	80010d8 <HAL_GetTick>
 80026c6:	4602      	mov	r2, r0
 80026c8:	69bb      	ldr	r3, [r7, #24]
 80026ca:	1ad3      	subs	r3, r2, r3
 80026cc:	683a      	ldr	r2, [r7, #0]
 80026ce:	429a      	cmp	r2, r3
 80026d0:	d302      	bcc.n	80026d8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80026d2:	683b      	ldr	r3, [r7, #0]
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d113      	bne.n	8002700 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026dc:	f043 0220 	orr.w	r2, r3, #32
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	2220      	movs	r2, #32
 80026e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	2200      	movs	r2, #0
 80026f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	2200      	movs	r2, #0
 80026f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80026fc:	2301      	movs	r3, #1
 80026fe:	e00f      	b.n	8002720 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	699a      	ldr	r2, [r3, #24]
 8002706:	68bb      	ldr	r3, [r7, #8]
 8002708:	4013      	ands	r3, r2
 800270a:	68ba      	ldr	r2, [r7, #8]
 800270c:	429a      	cmp	r2, r3
 800270e:	bf0c      	ite	eq
 8002710:	2301      	moveq	r3, #1
 8002712:	2300      	movne	r3, #0
 8002714:	b2db      	uxtb	r3, r3
 8002716:	461a      	mov	r2, r3
 8002718:	79fb      	ldrb	r3, [r7, #7]
 800271a:	429a      	cmp	r2, r3
 800271c:	d0cd      	beq.n	80026ba <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800271e:	2300      	movs	r3, #0
}
 8002720:	4618      	mov	r0, r3
 8002722:	3710      	adds	r7, #16
 8002724:	46bd      	mov	sp, r7
 8002726:	bd80      	pop	{r7, pc}

08002728 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002728:	b580      	push	{r7, lr}
 800272a:	b084      	sub	sp, #16
 800272c:	af00      	add	r7, sp, #0
 800272e:	60f8      	str	r0, [r7, #12]
 8002730:	60b9      	str	r1, [r7, #8]
 8002732:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002734:	e02c      	b.n	8002790 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8002736:	687a      	ldr	r2, [r7, #4]
 8002738:	68b9      	ldr	r1, [r7, #8]
 800273a:	68f8      	ldr	r0, [r7, #12]
 800273c:	f000 f870 	bl	8002820 <I2C_IsAcknowledgeFailed>
 8002740:	4603      	mov	r3, r0
 8002742:	2b00      	cmp	r3, #0
 8002744:	d001      	beq.n	800274a <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002746:	2301      	movs	r3, #1
 8002748:	e02a      	b.n	80027a0 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800274a:	68bb      	ldr	r3, [r7, #8]
 800274c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002750:	d01e      	beq.n	8002790 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002752:	f7fe fcc1 	bl	80010d8 <HAL_GetTick>
 8002756:	4602      	mov	r2, r0
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	1ad3      	subs	r3, r2, r3
 800275c:	68ba      	ldr	r2, [r7, #8]
 800275e:	429a      	cmp	r2, r3
 8002760:	d302      	bcc.n	8002768 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002762:	68bb      	ldr	r3, [r7, #8]
 8002764:	2b00      	cmp	r3, #0
 8002766:	d113      	bne.n	8002790 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800276c:	f043 0220 	orr.w	r2, r3, #32
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	2220      	movs	r2, #32
 8002778:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	2200      	movs	r2, #0
 8002780:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	2200      	movs	r2, #0
 8002788:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800278c:	2301      	movs	r3, #1
 800278e:	e007      	b.n	80027a0 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	699b      	ldr	r3, [r3, #24]
 8002796:	f003 0302 	and.w	r3, r3, #2
 800279a:	2b02      	cmp	r3, #2
 800279c:	d1cb      	bne.n	8002736 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800279e:	2300      	movs	r3, #0
}
 80027a0:	4618      	mov	r0, r3
 80027a2:	3710      	adds	r7, #16
 80027a4:	46bd      	mov	sp, r7
 80027a6:	bd80      	pop	{r7, pc}

080027a8 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80027a8:	b580      	push	{r7, lr}
 80027aa:	b084      	sub	sp, #16
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	60f8      	str	r0, [r7, #12]
 80027b0:	60b9      	str	r1, [r7, #8]
 80027b2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80027b4:	e028      	b.n	8002808 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80027b6:	687a      	ldr	r2, [r7, #4]
 80027b8:	68b9      	ldr	r1, [r7, #8]
 80027ba:	68f8      	ldr	r0, [r7, #12]
 80027bc:	f000 f830 	bl	8002820 <I2C_IsAcknowledgeFailed>
 80027c0:	4603      	mov	r3, r0
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d001      	beq.n	80027ca <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80027c6:	2301      	movs	r3, #1
 80027c8:	e026      	b.n	8002818 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80027ca:	f7fe fc85 	bl	80010d8 <HAL_GetTick>
 80027ce:	4602      	mov	r2, r0
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	1ad3      	subs	r3, r2, r3
 80027d4:	68ba      	ldr	r2, [r7, #8]
 80027d6:	429a      	cmp	r2, r3
 80027d8:	d302      	bcc.n	80027e0 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80027da:	68bb      	ldr	r3, [r7, #8]
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d113      	bne.n	8002808 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027e4:	f043 0220 	orr.w	r2, r3, #32
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	2220      	movs	r2, #32
 80027f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	2200      	movs	r2, #0
 80027f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	2200      	movs	r2, #0
 8002800:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8002804:	2301      	movs	r3, #1
 8002806:	e007      	b.n	8002818 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	699b      	ldr	r3, [r3, #24]
 800280e:	f003 0320 	and.w	r3, r3, #32
 8002812:	2b20      	cmp	r3, #32
 8002814:	d1cf      	bne.n	80027b6 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002816:	2300      	movs	r3, #0
}
 8002818:	4618      	mov	r0, r3
 800281a:	3710      	adds	r7, #16
 800281c:	46bd      	mov	sp, r7
 800281e:	bd80      	pop	{r7, pc}

08002820 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002820:	b580      	push	{r7, lr}
 8002822:	b084      	sub	sp, #16
 8002824:	af00      	add	r7, sp, #0
 8002826:	60f8      	str	r0, [r7, #12]
 8002828:	60b9      	str	r1, [r7, #8]
 800282a:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	699b      	ldr	r3, [r3, #24]
 8002832:	f003 0310 	and.w	r3, r3, #16
 8002836:	2b10      	cmp	r3, #16
 8002838:	d151      	bne.n	80028de <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800283a:	e022      	b.n	8002882 <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800283c:	68bb      	ldr	r3, [r7, #8]
 800283e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002842:	d01e      	beq.n	8002882 <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002844:	f7fe fc48 	bl	80010d8 <HAL_GetTick>
 8002848:	4602      	mov	r2, r0
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	1ad3      	subs	r3, r2, r3
 800284e:	68ba      	ldr	r2, [r7, #8]
 8002850:	429a      	cmp	r2, r3
 8002852:	d302      	bcc.n	800285a <I2C_IsAcknowledgeFailed+0x3a>
 8002854:	68bb      	ldr	r3, [r7, #8]
 8002856:	2b00      	cmp	r3, #0
 8002858:	d113      	bne.n	8002882 <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800285e:	f043 0220 	orr.w	r2, r3, #32
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	2220      	movs	r2, #32
 800286a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	2200      	movs	r2, #0
 8002872:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	2200      	movs	r2, #0
 800287a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 800287e:	2301      	movs	r3, #1
 8002880:	e02e      	b.n	80028e0 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	699b      	ldr	r3, [r3, #24]
 8002888:	f003 0320 	and.w	r3, r3, #32
 800288c:	2b20      	cmp	r3, #32
 800288e:	d1d5      	bne.n	800283c <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	2210      	movs	r2, #16
 8002896:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	2220      	movs	r2, #32
 800289e:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80028a0:	68f8      	ldr	r0, [r7, #12]
 80028a2:	f7ff fedd 	bl	8002660 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	6859      	ldr	r1, [r3, #4]
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	681a      	ldr	r2, [r3, #0]
 80028b0:	4b0d      	ldr	r3, [pc, #52]	; (80028e8 <I2C_IsAcknowledgeFailed+0xc8>)
 80028b2:	400b      	ands	r3, r1
 80028b4:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028ba:	f043 0204 	orr.w	r2, r3, #4
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	2220      	movs	r2, #32
 80028c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	2200      	movs	r2, #0
 80028ce:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	2200      	movs	r2, #0
 80028d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 80028da:	2301      	movs	r3, #1
 80028dc:	e000      	b.n	80028e0 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 80028de:	2300      	movs	r3, #0
}
 80028e0:	4618      	mov	r0, r3
 80028e2:	3710      	adds	r7, #16
 80028e4:	46bd      	mov	sp, r7
 80028e6:	bd80      	pop	{r7, pc}
 80028e8:	fe00e800 	.word	0xfe00e800

080028ec <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 80028ec:	b480      	push	{r7}
 80028ee:	b085      	sub	sp, #20
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	60f8      	str	r0, [r7, #12]
 80028f4:	607b      	str	r3, [r7, #4]
 80028f6:	460b      	mov	r3, r1
 80028f8:	817b      	strh	r3, [r7, #10]
 80028fa:	4613      	mov	r3, r2
 80028fc:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	685a      	ldr	r2, [r3, #4]
 8002904:	69bb      	ldr	r3, [r7, #24]
 8002906:	0d5b      	lsrs	r3, r3, #21
 8002908:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800290c:	4b0d      	ldr	r3, [pc, #52]	; (8002944 <I2C_TransferConfig+0x58>)
 800290e:	430b      	orrs	r3, r1
 8002910:	43db      	mvns	r3, r3
 8002912:	ea02 0103 	and.w	r1, r2, r3
 8002916:	897b      	ldrh	r3, [r7, #10]
 8002918:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800291c:	7a7b      	ldrb	r3, [r7, #9]
 800291e:	041b      	lsls	r3, r3, #16
 8002920:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8002924:	431a      	orrs	r2, r3
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	431a      	orrs	r2, r3
 800292a:	69bb      	ldr	r3, [r7, #24]
 800292c:	431a      	orrs	r2, r3
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	430a      	orrs	r2, r1
 8002934:	605a      	str	r2, [r3, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8002936:	bf00      	nop
 8002938:	3714      	adds	r7, #20
 800293a:	46bd      	mov	sp, r7
 800293c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002940:	4770      	bx	lr
 8002942:	bf00      	nop
 8002944:	03ff63ff 	.word	0x03ff63ff

08002948 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002948:	b480      	push	{r7}
 800294a:	b083      	sub	sp, #12
 800294c:	af00      	add	r7, sp, #0
 800294e:	6078      	str	r0, [r7, #4]
 8002950:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002958:	b2db      	uxtb	r3, r3
 800295a:	2b20      	cmp	r3, #32
 800295c:	d138      	bne.n	80029d0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002964:	2b01      	cmp	r3, #1
 8002966:	d101      	bne.n	800296c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002968:	2302      	movs	r3, #2
 800296a:	e032      	b.n	80029d2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	2201      	movs	r2, #1
 8002970:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	2224      	movs	r2, #36	; 0x24
 8002978:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	681a      	ldr	r2, [r3, #0]
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f022 0201 	bic.w	r2, r2, #1
 800298a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	681a      	ldr	r2, [r3, #0]
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800299a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	6819      	ldr	r1, [r3, #0]
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	683a      	ldr	r2, [r7, #0]
 80029a8:	430a      	orrs	r2, r1
 80029aa:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	681a      	ldr	r2, [r3, #0]
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f042 0201 	orr.w	r2, r2, #1
 80029ba:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	2220      	movs	r2, #32
 80029c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	2200      	movs	r2, #0
 80029c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80029cc:	2300      	movs	r3, #0
 80029ce:	e000      	b.n	80029d2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80029d0:	2302      	movs	r3, #2
  }
}
 80029d2:	4618      	mov	r0, r3
 80029d4:	370c      	adds	r7, #12
 80029d6:	46bd      	mov	sp, r7
 80029d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029dc:	4770      	bx	lr

080029de <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80029de:	b480      	push	{r7}
 80029e0:	b085      	sub	sp, #20
 80029e2:	af00      	add	r7, sp, #0
 80029e4:	6078      	str	r0, [r7, #4]
 80029e6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80029ee:	b2db      	uxtb	r3, r3
 80029f0:	2b20      	cmp	r3, #32
 80029f2:	d139      	bne.n	8002a68 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80029fa:	2b01      	cmp	r3, #1
 80029fc:	d101      	bne.n	8002a02 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80029fe:	2302      	movs	r3, #2
 8002a00:	e033      	b.n	8002a6a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	2201      	movs	r2, #1
 8002a06:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	2224      	movs	r2, #36	; 0x24
 8002a0e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	681a      	ldr	r2, [r3, #0]
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	f022 0201 	bic.w	r2, r2, #1
 8002a20:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002a30:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002a32:	683b      	ldr	r3, [r7, #0]
 8002a34:	021b      	lsls	r3, r3, #8
 8002a36:	68fa      	ldr	r2, [r7, #12]
 8002a38:	4313      	orrs	r3, r2
 8002a3a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	68fa      	ldr	r2, [r7, #12]
 8002a42:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	681a      	ldr	r2, [r3, #0]
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f042 0201 	orr.w	r2, r2, #1
 8002a52:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	2220      	movs	r2, #32
 8002a58:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	2200      	movs	r2, #0
 8002a60:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002a64:	2300      	movs	r3, #0
 8002a66:	e000      	b.n	8002a6a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002a68:	2302      	movs	r3, #2
  }
}
 8002a6a:	4618      	mov	r0, r3
 8002a6c:	3714      	adds	r7, #20
 8002a6e:	46bd      	mov	sp, r7
 8002a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a74:	4770      	bx	lr

08002a76 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002a76:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002a78:	b08f      	sub	sp, #60	; 0x3c
 8002a7a:	af0a      	add	r7, sp, #40	; 0x28
 8002a7c:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d101      	bne.n	8002a88 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002a84:	2301      	movs	r3, #1
 8002a86:	e10a      	b.n	8002c9e <HAL_PCD_Init+0x228>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8002a8e:	b2db      	uxtb	r3, r3
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d106      	bne.n	8002aa2 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	2200      	movs	r2, #0
 8002a98:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002a9c:	6878      	ldr	r0, [r7, #4]
 8002a9e:	f7fe f9b5 	bl	8000e0c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	2203      	movs	r2, #3
 8002aa6:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	4618      	mov	r0, r3
 8002ab0:	f001 fe6e 	bl	8004790 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	603b      	str	r3, [r7, #0]
 8002aba:	687e      	ldr	r6, [r7, #4]
 8002abc:	466d      	mov	r5, sp
 8002abe:	f106 0410 	add.w	r4, r6, #16
 8002ac2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002ac4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002ac6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002ac8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002aca:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002ace:	e885 0003 	stmia.w	r5, {r0, r1}
 8002ad2:	1d33      	adds	r3, r6, #4
 8002ad4:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002ad6:	6838      	ldr	r0, [r7, #0]
 8002ad8:	f001 fe02 	bl	80046e0 <USB_CoreInit>
 8002adc:	4603      	mov	r3, r0
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d005      	beq.n	8002aee <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	2202      	movs	r2, #2
 8002ae6:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002aea:	2301      	movs	r3, #1
 8002aec:	e0d7      	b.n	8002c9e <HAL_PCD_Init+0x228>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	2100      	movs	r1, #0
 8002af4:	4618      	mov	r0, r3
 8002af6:	f001 fe5c 	bl	80047b2 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002afa:	2300      	movs	r3, #0
 8002afc:	73fb      	strb	r3, [r7, #15]
 8002afe:	e04a      	b.n	8002b96 <HAL_PCD_Init+0x120>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002b00:	7bfa      	ldrb	r2, [r7, #15]
 8002b02:	6879      	ldr	r1, [r7, #4]
 8002b04:	4613      	mov	r3, r2
 8002b06:	00db      	lsls	r3, r3, #3
 8002b08:	1a9b      	subs	r3, r3, r2
 8002b0a:	009b      	lsls	r3, r3, #2
 8002b0c:	440b      	add	r3, r1
 8002b0e:	333d      	adds	r3, #61	; 0x3d
 8002b10:	2201      	movs	r2, #1
 8002b12:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002b14:	7bfa      	ldrb	r2, [r7, #15]
 8002b16:	6879      	ldr	r1, [r7, #4]
 8002b18:	4613      	mov	r3, r2
 8002b1a:	00db      	lsls	r3, r3, #3
 8002b1c:	1a9b      	subs	r3, r3, r2
 8002b1e:	009b      	lsls	r3, r3, #2
 8002b20:	440b      	add	r3, r1
 8002b22:	333c      	adds	r3, #60	; 0x3c
 8002b24:	7bfa      	ldrb	r2, [r7, #15]
 8002b26:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002b28:	7bfa      	ldrb	r2, [r7, #15]
 8002b2a:	7bfb      	ldrb	r3, [r7, #15]
 8002b2c:	b298      	uxth	r0, r3
 8002b2e:	6879      	ldr	r1, [r7, #4]
 8002b30:	4613      	mov	r3, r2
 8002b32:	00db      	lsls	r3, r3, #3
 8002b34:	1a9b      	subs	r3, r3, r2
 8002b36:	009b      	lsls	r3, r3, #2
 8002b38:	440b      	add	r3, r1
 8002b3a:	3342      	adds	r3, #66	; 0x42
 8002b3c:	4602      	mov	r2, r0
 8002b3e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002b40:	7bfa      	ldrb	r2, [r7, #15]
 8002b42:	6879      	ldr	r1, [r7, #4]
 8002b44:	4613      	mov	r3, r2
 8002b46:	00db      	lsls	r3, r3, #3
 8002b48:	1a9b      	subs	r3, r3, r2
 8002b4a:	009b      	lsls	r3, r3, #2
 8002b4c:	440b      	add	r3, r1
 8002b4e:	333f      	adds	r3, #63	; 0x3f
 8002b50:	2200      	movs	r2, #0
 8002b52:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002b54:	7bfa      	ldrb	r2, [r7, #15]
 8002b56:	6879      	ldr	r1, [r7, #4]
 8002b58:	4613      	mov	r3, r2
 8002b5a:	00db      	lsls	r3, r3, #3
 8002b5c:	1a9b      	subs	r3, r3, r2
 8002b5e:	009b      	lsls	r3, r3, #2
 8002b60:	440b      	add	r3, r1
 8002b62:	3344      	adds	r3, #68	; 0x44
 8002b64:	2200      	movs	r2, #0
 8002b66:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002b68:	7bfa      	ldrb	r2, [r7, #15]
 8002b6a:	6879      	ldr	r1, [r7, #4]
 8002b6c:	4613      	mov	r3, r2
 8002b6e:	00db      	lsls	r3, r3, #3
 8002b70:	1a9b      	subs	r3, r3, r2
 8002b72:	009b      	lsls	r3, r3, #2
 8002b74:	440b      	add	r3, r1
 8002b76:	3348      	adds	r3, #72	; 0x48
 8002b78:	2200      	movs	r2, #0
 8002b7a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002b7c:	7bfa      	ldrb	r2, [r7, #15]
 8002b7e:	6879      	ldr	r1, [r7, #4]
 8002b80:	4613      	mov	r3, r2
 8002b82:	00db      	lsls	r3, r3, #3
 8002b84:	1a9b      	subs	r3, r3, r2
 8002b86:	009b      	lsls	r3, r3, #2
 8002b88:	440b      	add	r3, r1
 8002b8a:	3350      	adds	r3, #80	; 0x50
 8002b8c:	2200      	movs	r2, #0
 8002b8e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002b90:	7bfb      	ldrb	r3, [r7, #15]
 8002b92:	3301      	adds	r3, #1
 8002b94:	73fb      	strb	r3, [r7, #15]
 8002b96:	7bfa      	ldrb	r2, [r7, #15]
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	685b      	ldr	r3, [r3, #4]
 8002b9c:	429a      	cmp	r2, r3
 8002b9e:	d3af      	bcc.n	8002b00 <HAL_PCD_Init+0x8a>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002ba0:	2300      	movs	r3, #0
 8002ba2:	73fb      	strb	r3, [r7, #15]
 8002ba4:	e044      	b.n	8002c30 <HAL_PCD_Init+0x1ba>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002ba6:	7bfa      	ldrb	r2, [r7, #15]
 8002ba8:	6879      	ldr	r1, [r7, #4]
 8002baa:	4613      	mov	r3, r2
 8002bac:	00db      	lsls	r3, r3, #3
 8002bae:	1a9b      	subs	r3, r3, r2
 8002bb0:	009b      	lsls	r3, r3, #2
 8002bb2:	440b      	add	r3, r1
 8002bb4:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8002bb8:	2200      	movs	r2, #0
 8002bba:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002bbc:	7bfa      	ldrb	r2, [r7, #15]
 8002bbe:	6879      	ldr	r1, [r7, #4]
 8002bc0:	4613      	mov	r3, r2
 8002bc2:	00db      	lsls	r3, r3, #3
 8002bc4:	1a9b      	subs	r3, r3, r2
 8002bc6:	009b      	lsls	r3, r3, #2
 8002bc8:	440b      	add	r3, r1
 8002bca:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8002bce:	7bfa      	ldrb	r2, [r7, #15]
 8002bd0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002bd2:	7bfa      	ldrb	r2, [r7, #15]
 8002bd4:	6879      	ldr	r1, [r7, #4]
 8002bd6:	4613      	mov	r3, r2
 8002bd8:	00db      	lsls	r3, r3, #3
 8002bda:	1a9b      	subs	r3, r3, r2
 8002bdc:	009b      	lsls	r3, r3, #2
 8002bde:	440b      	add	r3, r1
 8002be0:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8002be4:	2200      	movs	r2, #0
 8002be6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002be8:	7bfa      	ldrb	r2, [r7, #15]
 8002bea:	6879      	ldr	r1, [r7, #4]
 8002bec:	4613      	mov	r3, r2
 8002bee:	00db      	lsls	r3, r3, #3
 8002bf0:	1a9b      	subs	r3, r3, r2
 8002bf2:	009b      	lsls	r3, r3, #2
 8002bf4:	440b      	add	r3, r1
 8002bf6:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8002bfa:	2200      	movs	r2, #0
 8002bfc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002bfe:	7bfa      	ldrb	r2, [r7, #15]
 8002c00:	6879      	ldr	r1, [r7, #4]
 8002c02:	4613      	mov	r3, r2
 8002c04:	00db      	lsls	r3, r3, #3
 8002c06:	1a9b      	subs	r3, r3, r2
 8002c08:	009b      	lsls	r3, r3, #2
 8002c0a:	440b      	add	r3, r1
 8002c0c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002c10:	2200      	movs	r2, #0
 8002c12:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002c14:	7bfa      	ldrb	r2, [r7, #15]
 8002c16:	6879      	ldr	r1, [r7, #4]
 8002c18:	4613      	mov	r3, r2
 8002c1a:	00db      	lsls	r3, r3, #3
 8002c1c:	1a9b      	subs	r3, r3, r2
 8002c1e:	009b      	lsls	r3, r3, #2
 8002c20:	440b      	add	r3, r1
 8002c22:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8002c26:	2200      	movs	r2, #0
 8002c28:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002c2a:	7bfb      	ldrb	r3, [r7, #15]
 8002c2c:	3301      	adds	r3, #1
 8002c2e:	73fb      	strb	r3, [r7, #15]
 8002c30:	7bfa      	ldrb	r2, [r7, #15]
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	685b      	ldr	r3, [r3, #4]
 8002c36:	429a      	cmp	r2, r3
 8002c38:	d3b5      	bcc.n	8002ba6 <HAL_PCD_Init+0x130>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	603b      	str	r3, [r7, #0]
 8002c40:	687e      	ldr	r6, [r7, #4]
 8002c42:	466d      	mov	r5, sp
 8002c44:	f106 0410 	add.w	r4, r6, #16
 8002c48:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002c4a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002c4c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002c4e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002c50:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002c54:	e885 0003 	stmia.w	r5, {r0, r1}
 8002c58:	1d33      	adds	r3, r6, #4
 8002c5a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002c5c:	6838      	ldr	r0, [r7, #0]
 8002c5e:	f001 fdd3 	bl	8004808 <USB_DevInit>
 8002c62:	4603      	mov	r3, r0
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d005      	beq.n	8002c74 <HAL_PCD_Init+0x1fe>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	2202      	movs	r2, #2
 8002c6c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002c70:	2301      	movs	r3, #1
 8002c72:	e014      	b.n	8002c9e <HAL_PCD_Init+0x228>
  }

  hpcd->USB_Address = 0U;
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	2200      	movs	r2, #0
 8002c78:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	2201      	movs	r2, #1
 8002c80:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c88:	2b01      	cmp	r3, #1
 8002c8a:	d102      	bne.n	8002c92 <HAL_PCD_Init+0x21c>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002c8c:	6878      	ldr	r0, [r7, #4]
 8002c8e:	f000 f80b 	bl	8002ca8 <HAL_PCDEx_ActivateLPM>
  }
  
  (void)USB_DevDisconnect(hpcd->Instance);
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	4618      	mov	r0, r3
 8002c98:	f001 ff93 	bl	8004bc2 <USB_DevDisconnect>

  return HAL_OK;
 8002c9c:	2300      	movs	r3, #0
}
 8002c9e:	4618      	mov	r0, r3
 8002ca0:	3714      	adds	r7, #20
 8002ca2:	46bd      	mov	sp, r7
 8002ca4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08002ca8 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002ca8:	b480      	push	{r7}
 8002caa:	b085      	sub	sp, #20
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	2201      	movs	r2, #1
 8002cba:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	2200      	movs	r2, #0
 8002cc2:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	699b      	ldr	r3, [r3, #24]
 8002cca:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002cd6:	4b05      	ldr	r3, [pc, #20]	; (8002cec <HAL_PCDEx_ActivateLPM+0x44>)
 8002cd8:	4313      	orrs	r3, r2
 8002cda:	68fa      	ldr	r2, [r7, #12]
 8002cdc:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8002cde:	2300      	movs	r3, #0
}
 8002ce0:	4618      	mov	r0, r3
 8002ce2:	3714      	adds	r7, #20
 8002ce4:	46bd      	mov	sp, r7
 8002ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cea:	4770      	bx	lr
 8002cec:	10000003 	.word	0x10000003

08002cf0 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002cf0:	b480      	push	{r7}
 8002cf2:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002cf4:	4b05      	ldr	r3, [pc, #20]	; (8002d0c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	4a04      	ldr	r2, [pc, #16]	; (8002d0c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002cfa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002cfe:	6013      	str	r3, [r2, #0]
}
 8002d00:	bf00      	nop
 8002d02:	46bd      	mov	sp, r7
 8002d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d08:	4770      	bx	lr
 8002d0a:	bf00      	nop
 8002d0c:	40007000 	.word	0x40007000

08002d10 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002d10:	b580      	push	{r7, lr}
 8002d12:	b082      	sub	sp, #8
 8002d14:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8002d16:	2300      	movs	r3, #0
 8002d18:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8002d1a:	4b23      	ldr	r3, [pc, #140]	; (8002da8 <HAL_PWREx_EnableOverDrive+0x98>)
 8002d1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d1e:	4a22      	ldr	r2, [pc, #136]	; (8002da8 <HAL_PWREx_EnableOverDrive+0x98>)
 8002d20:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d24:	6413      	str	r3, [r2, #64]	; 0x40
 8002d26:	4b20      	ldr	r3, [pc, #128]	; (8002da8 <HAL_PWREx_EnableOverDrive+0x98>)
 8002d28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d2e:	603b      	str	r3, [r7, #0]
 8002d30:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002d32:	4b1e      	ldr	r3, [pc, #120]	; (8002dac <HAL_PWREx_EnableOverDrive+0x9c>)
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	4a1d      	ldr	r2, [pc, #116]	; (8002dac <HAL_PWREx_EnableOverDrive+0x9c>)
 8002d38:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d3c:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002d3e:	f7fe f9cb 	bl	80010d8 <HAL_GetTick>
 8002d42:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002d44:	e009      	b.n	8002d5a <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002d46:	f7fe f9c7 	bl	80010d8 <HAL_GetTick>
 8002d4a:	4602      	mov	r2, r0
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	1ad3      	subs	r3, r2, r3
 8002d50:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002d54:	d901      	bls.n	8002d5a <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8002d56:	2303      	movs	r3, #3
 8002d58:	e022      	b.n	8002da0 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002d5a:	4b14      	ldr	r3, [pc, #80]	; (8002dac <HAL_PWREx_EnableOverDrive+0x9c>)
 8002d5c:	685b      	ldr	r3, [r3, #4]
 8002d5e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d62:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d66:	d1ee      	bne.n	8002d46 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002d68:	4b10      	ldr	r3, [pc, #64]	; (8002dac <HAL_PWREx_EnableOverDrive+0x9c>)
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	4a0f      	ldr	r2, [pc, #60]	; (8002dac <HAL_PWREx_EnableOverDrive+0x9c>)
 8002d6e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002d72:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002d74:	f7fe f9b0 	bl	80010d8 <HAL_GetTick>
 8002d78:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002d7a:	e009      	b.n	8002d90 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002d7c:	f7fe f9ac 	bl	80010d8 <HAL_GetTick>
 8002d80:	4602      	mov	r2, r0
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	1ad3      	subs	r3, r2, r3
 8002d86:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002d8a:	d901      	bls.n	8002d90 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8002d8c:	2303      	movs	r3, #3
 8002d8e:	e007      	b.n	8002da0 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002d90:	4b06      	ldr	r3, [pc, #24]	; (8002dac <HAL_PWREx_EnableOverDrive+0x9c>)
 8002d92:	685b      	ldr	r3, [r3, #4]
 8002d94:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d98:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002d9c:	d1ee      	bne.n	8002d7c <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8002d9e:	2300      	movs	r3, #0
}
 8002da0:	4618      	mov	r0, r3
 8002da2:	3708      	adds	r7, #8
 8002da4:	46bd      	mov	sp, r7
 8002da6:	bd80      	pop	{r7, pc}
 8002da8:	40023800 	.word	0x40023800
 8002dac:	40007000 	.word	0x40007000

08002db0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002db0:	b580      	push	{r7, lr}
 8002db2:	b086      	sub	sp, #24
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  FlagStatus pwrclkchanged = RESET;
 8002db8:	2300      	movs	r3, #0
 8002dba:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d101      	bne.n	8002dc6 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8002dc2:	2301      	movs	r3, #1
 8002dc4:	e25e      	b.n	8003284 <HAL_RCC_OscConfig+0x4d4>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	f003 0301 	and.w	r3, r3, #1
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	f000 8087 	beq.w	8002ee2 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002dd4:	4b96      	ldr	r3, [pc, #600]	; (8003030 <HAL_RCC_OscConfig+0x280>)
 8002dd6:	689b      	ldr	r3, [r3, #8]
 8002dd8:	f003 030c 	and.w	r3, r3, #12
 8002ddc:	2b04      	cmp	r3, #4
 8002dde:	d00c      	beq.n	8002dfa <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002de0:	4b93      	ldr	r3, [pc, #588]	; (8003030 <HAL_RCC_OscConfig+0x280>)
 8002de2:	689b      	ldr	r3, [r3, #8]
 8002de4:	f003 030c 	and.w	r3, r3, #12
 8002de8:	2b08      	cmp	r3, #8
 8002dea:	d112      	bne.n	8002e12 <HAL_RCC_OscConfig+0x62>
 8002dec:	4b90      	ldr	r3, [pc, #576]	; (8003030 <HAL_RCC_OscConfig+0x280>)
 8002dee:	685b      	ldr	r3, [r3, #4]
 8002df0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002df4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002df8:	d10b      	bne.n	8002e12 <HAL_RCC_OscConfig+0x62>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002dfa:	4b8d      	ldr	r3, [pc, #564]	; (8003030 <HAL_RCC_OscConfig+0x280>)
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d06c      	beq.n	8002ee0 <HAL_RCC_OscConfig+0x130>
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	685b      	ldr	r3, [r3, #4]
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d168      	bne.n	8002ee0 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002e0e:	2301      	movs	r3, #1
 8002e10:	e238      	b.n	8003284 <HAL_RCC_OscConfig+0x4d4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	685b      	ldr	r3, [r3, #4]
 8002e16:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e1a:	d106      	bne.n	8002e2a <HAL_RCC_OscConfig+0x7a>
 8002e1c:	4b84      	ldr	r3, [pc, #528]	; (8003030 <HAL_RCC_OscConfig+0x280>)
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	4a83      	ldr	r2, [pc, #524]	; (8003030 <HAL_RCC_OscConfig+0x280>)
 8002e22:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e26:	6013      	str	r3, [r2, #0]
 8002e28:	e02e      	b.n	8002e88 <HAL_RCC_OscConfig+0xd8>
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	685b      	ldr	r3, [r3, #4]
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d10c      	bne.n	8002e4c <HAL_RCC_OscConfig+0x9c>
 8002e32:	4b7f      	ldr	r3, [pc, #508]	; (8003030 <HAL_RCC_OscConfig+0x280>)
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	4a7e      	ldr	r2, [pc, #504]	; (8003030 <HAL_RCC_OscConfig+0x280>)
 8002e38:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e3c:	6013      	str	r3, [r2, #0]
 8002e3e:	4b7c      	ldr	r3, [pc, #496]	; (8003030 <HAL_RCC_OscConfig+0x280>)
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	4a7b      	ldr	r2, [pc, #492]	; (8003030 <HAL_RCC_OscConfig+0x280>)
 8002e44:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002e48:	6013      	str	r3, [r2, #0]
 8002e4a:	e01d      	b.n	8002e88 <HAL_RCC_OscConfig+0xd8>
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	685b      	ldr	r3, [r3, #4]
 8002e50:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002e54:	d10c      	bne.n	8002e70 <HAL_RCC_OscConfig+0xc0>
 8002e56:	4b76      	ldr	r3, [pc, #472]	; (8003030 <HAL_RCC_OscConfig+0x280>)
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	4a75      	ldr	r2, [pc, #468]	; (8003030 <HAL_RCC_OscConfig+0x280>)
 8002e5c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002e60:	6013      	str	r3, [r2, #0]
 8002e62:	4b73      	ldr	r3, [pc, #460]	; (8003030 <HAL_RCC_OscConfig+0x280>)
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	4a72      	ldr	r2, [pc, #456]	; (8003030 <HAL_RCC_OscConfig+0x280>)
 8002e68:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e6c:	6013      	str	r3, [r2, #0]
 8002e6e:	e00b      	b.n	8002e88 <HAL_RCC_OscConfig+0xd8>
 8002e70:	4b6f      	ldr	r3, [pc, #444]	; (8003030 <HAL_RCC_OscConfig+0x280>)
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	4a6e      	ldr	r2, [pc, #440]	; (8003030 <HAL_RCC_OscConfig+0x280>)
 8002e76:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e7a:	6013      	str	r3, [r2, #0]
 8002e7c:	4b6c      	ldr	r3, [pc, #432]	; (8003030 <HAL_RCC_OscConfig+0x280>)
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	4a6b      	ldr	r2, [pc, #428]	; (8003030 <HAL_RCC_OscConfig+0x280>)
 8002e82:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002e86:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	685b      	ldr	r3, [r3, #4]
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d013      	beq.n	8002eb8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e90:	f7fe f922 	bl	80010d8 <HAL_GetTick>
 8002e94:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e96:	e008      	b.n	8002eaa <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002e98:	f7fe f91e 	bl	80010d8 <HAL_GetTick>
 8002e9c:	4602      	mov	r2, r0
 8002e9e:	693b      	ldr	r3, [r7, #16]
 8002ea0:	1ad3      	subs	r3, r2, r3
 8002ea2:	2b64      	cmp	r3, #100	; 0x64
 8002ea4:	d901      	bls.n	8002eaa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002ea6:	2303      	movs	r3, #3
 8002ea8:	e1ec      	b.n	8003284 <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002eaa:	4b61      	ldr	r3, [pc, #388]	; (8003030 <HAL_RCC_OscConfig+0x280>)
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d0f0      	beq.n	8002e98 <HAL_RCC_OscConfig+0xe8>
 8002eb6:	e014      	b.n	8002ee2 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002eb8:	f7fe f90e 	bl	80010d8 <HAL_GetTick>
 8002ebc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002ebe:	e008      	b.n	8002ed2 <HAL_RCC_OscConfig+0x122>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002ec0:	f7fe f90a 	bl	80010d8 <HAL_GetTick>
 8002ec4:	4602      	mov	r2, r0
 8002ec6:	693b      	ldr	r3, [r7, #16]
 8002ec8:	1ad3      	subs	r3, r2, r3
 8002eca:	2b64      	cmp	r3, #100	; 0x64
 8002ecc:	d901      	bls.n	8002ed2 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002ece:	2303      	movs	r3, #3
 8002ed0:	e1d8      	b.n	8003284 <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002ed2:	4b57      	ldr	r3, [pc, #348]	; (8003030 <HAL_RCC_OscConfig+0x280>)
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d1f0      	bne.n	8002ec0 <HAL_RCC_OscConfig+0x110>
 8002ede:	e000      	b.n	8002ee2 <HAL_RCC_OscConfig+0x132>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ee0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f003 0302 	and.w	r3, r3, #2
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d069      	beq.n	8002fc2 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002eee:	4b50      	ldr	r3, [pc, #320]	; (8003030 <HAL_RCC_OscConfig+0x280>)
 8002ef0:	689b      	ldr	r3, [r3, #8]
 8002ef2:	f003 030c 	and.w	r3, r3, #12
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d00b      	beq.n	8002f12 <HAL_RCC_OscConfig+0x162>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002efa:	4b4d      	ldr	r3, [pc, #308]	; (8003030 <HAL_RCC_OscConfig+0x280>)
 8002efc:	689b      	ldr	r3, [r3, #8]
 8002efe:	f003 030c 	and.w	r3, r3, #12
 8002f02:	2b08      	cmp	r3, #8
 8002f04:	d11c      	bne.n	8002f40 <HAL_RCC_OscConfig+0x190>
 8002f06:	4b4a      	ldr	r3, [pc, #296]	; (8003030 <HAL_RCC_OscConfig+0x280>)
 8002f08:	685b      	ldr	r3, [r3, #4]
 8002f0a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d116      	bne.n	8002f40 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f12:	4b47      	ldr	r3, [pc, #284]	; (8003030 <HAL_RCC_OscConfig+0x280>)
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	f003 0302 	and.w	r3, r3, #2
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d005      	beq.n	8002f2a <HAL_RCC_OscConfig+0x17a>
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	68db      	ldr	r3, [r3, #12]
 8002f22:	2b01      	cmp	r3, #1
 8002f24:	d001      	beq.n	8002f2a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002f26:	2301      	movs	r3, #1
 8002f28:	e1ac      	b.n	8003284 <HAL_RCC_OscConfig+0x4d4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f2a:	4b41      	ldr	r3, [pc, #260]	; (8003030 <HAL_RCC_OscConfig+0x280>)
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	691b      	ldr	r3, [r3, #16]
 8002f36:	00db      	lsls	r3, r3, #3
 8002f38:	493d      	ldr	r1, [pc, #244]	; (8003030 <HAL_RCC_OscConfig+0x280>)
 8002f3a:	4313      	orrs	r3, r2
 8002f3c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f3e:	e040      	b.n	8002fc2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	68db      	ldr	r3, [r3, #12]
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d023      	beq.n	8002f90 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002f48:	4b39      	ldr	r3, [pc, #228]	; (8003030 <HAL_RCC_OscConfig+0x280>)
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	4a38      	ldr	r2, [pc, #224]	; (8003030 <HAL_RCC_OscConfig+0x280>)
 8002f4e:	f043 0301 	orr.w	r3, r3, #1
 8002f52:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f54:	f7fe f8c0 	bl	80010d8 <HAL_GetTick>
 8002f58:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f5a:	e008      	b.n	8002f6e <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002f5c:	f7fe f8bc 	bl	80010d8 <HAL_GetTick>
 8002f60:	4602      	mov	r2, r0
 8002f62:	693b      	ldr	r3, [r7, #16]
 8002f64:	1ad3      	subs	r3, r2, r3
 8002f66:	2b02      	cmp	r3, #2
 8002f68:	d901      	bls.n	8002f6e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8002f6a:	2303      	movs	r3, #3
 8002f6c:	e18a      	b.n	8003284 <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f6e:	4b30      	ldr	r3, [pc, #192]	; (8003030 <HAL_RCC_OscConfig+0x280>)
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	f003 0302 	and.w	r3, r3, #2
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d0f0      	beq.n	8002f5c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f7a:	4b2d      	ldr	r3, [pc, #180]	; (8003030 <HAL_RCC_OscConfig+0x280>)
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	691b      	ldr	r3, [r3, #16]
 8002f86:	00db      	lsls	r3, r3, #3
 8002f88:	4929      	ldr	r1, [pc, #164]	; (8003030 <HAL_RCC_OscConfig+0x280>)
 8002f8a:	4313      	orrs	r3, r2
 8002f8c:	600b      	str	r3, [r1, #0]
 8002f8e:	e018      	b.n	8002fc2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002f90:	4b27      	ldr	r3, [pc, #156]	; (8003030 <HAL_RCC_OscConfig+0x280>)
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	4a26      	ldr	r2, [pc, #152]	; (8003030 <HAL_RCC_OscConfig+0x280>)
 8002f96:	f023 0301 	bic.w	r3, r3, #1
 8002f9a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f9c:	f7fe f89c 	bl	80010d8 <HAL_GetTick>
 8002fa0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002fa2:	e008      	b.n	8002fb6 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002fa4:	f7fe f898 	bl	80010d8 <HAL_GetTick>
 8002fa8:	4602      	mov	r2, r0
 8002faa:	693b      	ldr	r3, [r7, #16]
 8002fac:	1ad3      	subs	r3, r2, r3
 8002fae:	2b02      	cmp	r3, #2
 8002fb0:	d901      	bls.n	8002fb6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002fb2:	2303      	movs	r3, #3
 8002fb4:	e166      	b.n	8003284 <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002fb6:	4b1e      	ldr	r3, [pc, #120]	; (8003030 <HAL_RCC_OscConfig+0x280>)
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	f003 0302 	and.w	r3, r3, #2
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d1f0      	bne.n	8002fa4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f003 0308 	and.w	r3, r3, #8
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d038      	beq.n	8003040 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	695b      	ldr	r3, [r3, #20]
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d019      	beq.n	800300a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002fd6:	4b16      	ldr	r3, [pc, #88]	; (8003030 <HAL_RCC_OscConfig+0x280>)
 8002fd8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002fda:	4a15      	ldr	r2, [pc, #84]	; (8003030 <HAL_RCC_OscConfig+0x280>)
 8002fdc:	f043 0301 	orr.w	r3, r3, #1
 8002fe0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fe2:	f7fe f879 	bl	80010d8 <HAL_GetTick>
 8002fe6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002fe8:	e008      	b.n	8002ffc <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002fea:	f7fe f875 	bl	80010d8 <HAL_GetTick>
 8002fee:	4602      	mov	r2, r0
 8002ff0:	693b      	ldr	r3, [r7, #16]
 8002ff2:	1ad3      	subs	r3, r2, r3
 8002ff4:	2b02      	cmp	r3, #2
 8002ff6:	d901      	bls.n	8002ffc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002ff8:	2303      	movs	r3, #3
 8002ffa:	e143      	b.n	8003284 <HAL_RCC_OscConfig+0x4d4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ffc:	4b0c      	ldr	r3, [pc, #48]	; (8003030 <HAL_RCC_OscConfig+0x280>)
 8002ffe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003000:	f003 0302 	and.w	r3, r3, #2
 8003004:	2b00      	cmp	r3, #0
 8003006:	d0f0      	beq.n	8002fea <HAL_RCC_OscConfig+0x23a>
 8003008:	e01a      	b.n	8003040 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800300a:	4b09      	ldr	r3, [pc, #36]	; (8003030 <HAL_RCC_OscConfig+0x280>)
 800300c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800300e:	4a08      	ldr	r2, [pc, #32]	; (8003030 <HAL_RCC_OscConfig+0x280>)
 8003010:	f023 0301 	bic.w	r3, r3, #1
 8003014:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003016:	f7fe f85f 	bl	80010d8 <HAL_GetTick>
 800301a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800301c:	e00a      	b.n	8003034 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800301e:	f7fe f85b 	bl	80010d8 <HAL_GetTick>
 8003022:	4602      	mov	r2, r0
 8003024:	693b      	ldr	r3, [r7, #16]
 8003026:	1ad3      	subs	r3, r2, r3
 8003028:	2b02      	cmp	r3, #2
 800302a:	d903      	bls.n	8003034 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800302c:	2303      	movs	r3, #3
 800302e:	e129      	b.n	8003284 <HAL_RCC_OscConfig+0x4d4>
 8003030:	40023800 	.word	0x40023800
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003034:	4b95      	ldr	r3, [pc, #596]	; (800328c <HAL_RCC_OscConfig+0x4dc>)
 8003036:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003038:	f003 0302 	and.w	r3, r3, #2
 800303c:	2b00      	cmp	r3, #0
 800303e:	d1ee      	bne.n	800301e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	f003 0304 	and.w	r3, r3, #4
 8003048:	2b00      	cmp	r3, #0
 800304a:	f000 80a4 	beq.w	8003196 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800304e:	4b8f      	ldr	r3, [pc, #572]	; (800328c <HAL_RCC_OscConfig+0x4dc>)
 8003050:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003052:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003056:	2b00      	cmp	r3, #0
 8003058:	d10d      	bne.n	8003076 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800305a:	4b8c      	ldr	r3, [pc, #560]	; (800328c <HAL_RCC_OscConfig+0x4dc>)
 800305c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800305e:	4a8b      	ldr	r2, [pc, #556]	; (800328c <HAL_RCC_OscConfig+0x4dc>)
 8003060:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003064:	6413      	str	r3, [r2, #64]	; 0x40
 8003066:	4b89      	ldr	r3, [pc, #548]	; (800328c <HAL_RCC_OscConfig+0x4dc>)
 8003068:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800306a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800306e:	60fb      	str	r3, [r7, #12]
 8003070:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003072:	2301      	movs	r3, #1
 8003074:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003076:	4b86      	ldr	r3, [pc, #536]	; (8003290 <HAL_RCC_OscConfig+0x4e0>)
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800307e:	2b00      	cmp	r3, #0
 8003080:	d118      	bne.n	80030b4 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8003082:	4b83      	ldr	r3, [pc, #524]	; (8003290 <HAL_RCC_OscConfig+0x4e0>)
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	4a82      	ldr	r2, [pc, #520]	; (8003290 <HAL_RCC_OscConfig+0x4e0>)
 8003088:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800308c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800308e:	f7fe f823 	bl	80010d8 <HAL_GetTick>
 8003092:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003094:	e008      	b.n	80030a8 <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8003096:	f7fe f81f 	bl	80010d8 <HAL_GetTick>
 800309a:	4602      	mov	r2, r0
 800309c:	693b      	ldr	r3, [r7, #16]
 800309e:	1ad3      	subs	r3, r2, r3
 80030a0:	2b64      	cmp	r3, #100	; 0x64
 80030a2:	d901      	bls.n	80030a8 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80030a4:	2303      	movs	r3, #3
 80030a6:	e0ed      	b.n	8003284 <HAL_RCC_OscConfig+0x4d4>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80030a8:	4b79      	ldr	r3, [pc, #484]	; (8003290 <HAL_RCC_OscConfig+0x4e0>)
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d0f0      	beq.n	8003096 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	689b      	ldr	r3, [r3, #8]
 80030b8:	2b01      	cmp	r3, #1
 80030ba:	d106      	bne.n	80030ca <HAL_RCC_OscConfig+0x31a>
 80030bc:	4b73      	ldr	r3, [pc, #460]	; (800328c <HAL_RCC_OscConfig+0x4dc>)
 80030be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030c0:	4a72      	ldr	r2, [pc, #456]	; (800328c <HAL_RCC_OscConfig+0x4dc>)
 80030c2:	f043 0301 	orr.w	r3, r3, #1
 80030c6:	6713      	str	r3, [r2, #112]	; 0x70
 80030c8:	e02d      	b.n	8003126 <HAL_RCC_OscConfig+0x376>
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	689b      	ldr	r3, [r3, #8]
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d10c      	bne.n	80030ec <HAL_RCC_OscConfig+0x33c>
 80030d2:	4b6e      	ldr	r3, [pc, #440]	; (800328c <HAL_RCC_OscConfig+0x4dc>)
 80030d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030d6:	4a6d      	ldr	r2, [pc, #436]	; (800328c <HAL_RCC_OscConfig+0x4dc>)
 80030d8:	f023 0301 	bic.w	r3, r3, #1
 80030dc:	6713      	str	r3, [r2, #112]	; 0x70
 80030de:	4b6b      	ldr	r3, [pc, #428]	; (800328c <HAL_RCC_OscConfig+0x4dc>)
 80030e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030e2:	4a6a      	ldr	r2, [pc, #424]	; (800328c <HAL_RCC_OscConfig+0x4dc>)
 80030e4:	f023 0304 	bic.w	r3, r3, #4
 80030e8:	6713      	str	r3, [r2, #112]	; 0x70
 80030ea:	e01c      	b.n	8003126 <HAL_RCC_OscConfig+0x376>
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	689b      	ldr	r3, [r3, #8]
 80030f0:	2b05      	cmp	r3, #5
 80030f2:	d10c      	bne.n	800310e <HAL_RCC_OscConfig+0x35e>
 80030f4:	4b65      	ldr	r3, [pc, #404]	; (800328c <HAL_RCC_OscConfig+0x4dc>)
 80030f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030f8:	4a64      	ldr	r2, [pc, #400]	; (800328c <HAL_RCC_OscConfig+0x4dc>)
 80030fa:	f043 0304 	orr.w	r3, r3, #4
 80030fe:	6713      	str	r3, [r2, #112]	; 0x70
 8003100:	4b62      	ldr	r3, [pc, #392]	; (800328c <HAL_RCC_OscConfig+0x4dc>)
 8003102:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003104:	4a61      	ldr	r2, [pc, #388]	; (800328c <HAL_RCC_OscConfig+0x4dc>)
 8003106:	f043 0301 	orr.w	r3, r3, #1
 800310a:	6713      	str	r3, [r2, #112]	; 0x70
 800310c:	e00b      	b.n	8003126 <HAL_RCC_OscConfig+0x376>
 800310e:	4b5f      	ldr	r3, [pc, #380]	; (800328c <HAL_RCC_OscConfig+0x4dc>)
 8003110:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003112:	4a5e      	ldr	r2, [pc, #376]	; (800328c <HAL_RCC_OscConfig+0x4dc>)
 8003114:	f023 0301 	bic.w	r3, r3, #1
 8003118:	6713      	str	r3, [r2, #112]	; 0x70
 800311a:	4b5c      	ldr	r3, [pc, #368]	; (800328c <HAL_RCC_OscConfig+0x4dc>)
 800311c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800311e:	4a5b      	ldr	r2, [pc, #364]	; (800328c <HAL_RCC_OscConfig+0x4dc>)
 8003120:	f023 0304 	bic.w	r3, r3, #4
 8003124:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	689b      	ldr	r3, [r3, #8]
 800312a:	2b00      	cmp	r3, #0
 800312c:	d015      	beq.n	800315a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800312e:	f7fd ffd3 	bl	80010d8 <HAL_GetTick>
 8003132:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003134:	e00a      	b.n	800314c <HAL_RCC_OscConfig+0x39c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003136:	f7fd ffcf 	bl	80010d8 <HAL_GetTick>
 800313a:	4602      	mov	r2, r0
 800313c:	693b      	ldr	r3, [r7, #16]
 800313e:	1ad3      	subs	r3, r2, r3
 8003140:	f241 3288 	movw	r2, #5000	; 0x1388
 8003144:	4293      	cmp	r3, r2
 8003146:	d901      	bls.n	800314c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8003148:	2303      	movs	r3, #3
 800314a:	e09b      	b.n	8003284 <HAL_RCC_OscConfig+0x4d4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800314c:	4b4f      	ldr	r3, [pc, #316]	; (800328c <HAL_RCC_OscConfig+0x4dc>)
 800314e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003150:	f003 0302 	and.w	r3, r3, #2
 8003154:	2b00      	cmp	r3, #0
 8003156:	d0ee      	beq.n	8003136 <HAL_RCC_OscConfig+0x386>
 8003158:	e014      	b.n	8003184 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800315a:	f7fd ffbd 	bl	80010d8 <HAL_GetTick>
 800315e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003160:	e00a      	b.n	8003178 <HAL_RCC_OscConfig+0x3c8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003162:	f7fd ffb9 	bl	80010d8 <HAL_GetTick>
 8003166:	4602      	mov	r2, r0
 8003168:	693b      	ldr	r3, [r7, #16]
 800316a:	1ad3      	subs	r3, r2, r3
 800316c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003170:	4293      	cmp	r3, r2
 8003172:	d901      	bls.n	8003178 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8003174:	2303      	movs	r3, #3
 8003176:	e085      	b.n	8003284 <HAL_RCC_OscConfig+0x4d4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003178:	4b44      	ldr	r3, [pc, #272]	; (800328c <HAL_RCC_OscConfig+0x4dc>)
 800317a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800317c:	f003 0302 	and.w	r3, r3, #2
 8003180:	2b00      	cmp	r3, #0
 8003182:	d1ee      	bne.n	8003162 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003184:	7dfb      	ldrb	r3, [r7, #23]
 8003186:	2b01      	cmp	r3, #1
 8003188:	d105      	bne.n	8003196 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800318a:	4b40      	ldr	r3, [pc, #256]	; (800328c <HAL_RCC_OscConfig+0x4dc>)
 800318c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800318e:	4a3f      	ldr	r2, [pc, #252]	; (800328c <HAL_RCC_OscConfig+0x4dc>)
 8003190:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003194:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	699b      	ldr	r3, [r3, #24]
 800319a:	2b00      	cmp	r3, #0
 800319c:	d071      	beq.n	8003282 <HAL_RCC_OscConfig+0x4d2>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800319e:	4b3b      	ldr	r3, [pc, #236]	; (800328c <HAL_RCC_OscConfig+0x4dc>)
 80031a0:	689b      	ldr	r3, [r3, #8]
 80031a2:	f003 030c 	and.w	r3, r3, #12
 80031a6:	2b08      	cmp	r3, #8
 80031a8:	d069      	beq.n	800327e <HAL_RCC_OscConfig+0x4ce>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	699b      	ldr	r3, [r3, #24]
 80031ae:	2b02      	cmp	r3, #2
 80031b0:	d14b      	bne.n	800324a <HAL_RCC_OscConfig+0x49a>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80031b2:	4b36      	ldr	r3, [pc, #216]	; (800328c <HAL_RCC_OscConfig+0x4dc>)
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	4a35      	ldr	r2, [pc, #212]	; (800328c <HAL_RCC_OscConfig+0x4dc>)
 80031b8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80031bc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031be:	f7fd ff8b 	bl	80010d8 <HAL_GetTick>
 80031c2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80031c4:	e008      	b.n	80031d8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80031c6:	f7fd ff87 	bl	80010d8 <HAL_GetTick>
 80031ca:	4602      	mov	r2, r0
 80031cc:	693b      	ldr	r3, [r7, #16]
 80031ce:	1ad3      	subs	r3, r2, r3
 80031d0:	2b02      	cmp	r3, #2
 80031d2:	d901      	bls.n	80031d8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80031d4:	2303      	movs	r3, #3
 80031d6:	e055      	b.n	8003284 <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80031d8:	4b2c      	ldr	r3, [pc, #176]	; (800328c <HAL_RCC_OscConfig+0x4dc>)
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d1f0      	bne.n	80031c6 <HAL_RCC_OscConfig+0x416>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	69da      	ldr	r2, [r3, #28]
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	6a1b      	ldr	r3, [r3, #32]
 80031ec:	431a      	orrs	r2, r3
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031f2:	019b      	lsls	r3, r3, #6
 80031f4:	431a      	orrs	r2, r3
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031fa:	085b      	lsrs	r3, r3, #1
 80031fc:	3b01      	subs	r3, #1
 80031fe:	041b      	lsls	r3, r3, #16
 8003200:	431a      	orrs	r2, r3
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003206:	061b      	lsls	r3, r3, #24
 8003208:	431a      	orrs	r2, r3
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800320e:	071b      	lsls	r3, r3, #28
 8003210:	491e      	ldr	r1, [pc, #120]	; (800328c <HAL_RCC_OscConfig+0x4dc>)
 8003212:	4313      	orrs	r3, r2
 8003214:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003216:	4b1d      	ldr	r3, [pc, #116]	; (800328c <HAL_RCC_OscConfig+0x4dc>)
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	4a1c      	ldr	r2, [pc, #112]	; (800328c <HAL_RCC_OscConfig+0x4dc>)
 800321c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003220:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003222:	f7fd ff59 	bl	80010d8 <HAL_GetTick>
 8003226:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003228:	e008      	b.n	800323c <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800322a:	f7fd ff55 	bl	80010d8 <HAL_GetTick>
 800322e:	4602      	mov	r2, r0
 8003230:	693b      	ldr	r3, [r7, #16]
 8003232:	1ad3      	subs	r3, r2, r3
 8003234:	2b02      	cmp	r3, #2
 8003236:	d901      	bls.n	800323c <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 8003238:	2303      	movs	r3, #3
 800323a:	e023      	b.n	8003284 <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800323c:	4b13      	ldr	r3, [pc, #76]	; (800328c <HAL_RCC_OscConfig+0x4dc>)
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003244:	2b00      	cmp	r3, #0
 8003246:	d0f0      	beq.n	800322a <HAL_RCC_OscConfig+0x47a>
 8003248:	e01b      	b.n	8003282 <HAL_RCC_OscConfig+0x4d2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800324a:	4b10      	ldr	r3, [pc, #64]	; (800328c <HAL_RCC_OscConfig+0x4dc>)
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	4a0f      	ldr	r2, [pc, #60]	; (800328c <HAL_RCC_OscConfig+0x4dc>)
 8003250:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003254:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003256:	f7fd ff3f 	bl	80010d8 <HAL_GetTick>
 800325a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800325c:	e008      	b.n	8003270 <HAL_RCC_OscConfig+0x4c0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800325e:	f7fd ff3b 	bl	80010d8 <HAL_GetTick>
 8003262:	4602      	mov	r2, r0
 8003264:	693b      	ldr	r3, [r7, #16]
 8003266:	1ad3      	subs	r3, r2, r3
 8003268:	2b02      	cmp	r3, #2
 800326a:	d901      	bls.n	8003270 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 800326c:	2303      	movs	r3, #3
 800326e:	e009      	b.n	8003284 <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003270:	4b06      	ldr	r3, [pc, #24]	; (800328c <HAL_RCC_OscConfig+0x4dc>)
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003278:	2b00      	cmp	r3, #0
 800327a:	d1f0      	bne.n	800325e <HAL_RCC_OscConfig+0x4ae>
 800327c:	e001      	b.n	8003282 <HAL_RCC_OscConfig+0x4d2>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 800327e:	2301      	movs	r3, #1
 8003280:	e000      	b.n	8003284 <HAL_RCC_OscConfig+0x4d4>
    }
  }
  return HAL_OK;
 8003282:	2300      	movs	r3, #0
}
 8003284:	4618      	mov	r0, r3
 8003286:	3718      	adds	r7, #24
 8003288:	46bd      	mov	sp, r7
 800328a:	bd80      	pop	{r7, pc}
 800328c:	40023800 	.word	0x40023800
 8003290:	40007000 	.word	0x40007000

08003294 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003294:	b580      	push	{r7, lr}
 8003296:	b084      	sub	sp, #16
 8003298:	af00      	add	r7, sp, #0
 800329a:	6078      	str	r0, [r7, #4]
 800329c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800329e:	2300      	movs	r3, #0
 80032a0:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d101      	bne.n	80032ac <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80032a8:	2301      	movs	r3, #1
 80032aa:	e0ce      	b.n	800344a <HAL_RCC_ClockConfig+0x1b6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80032ac:	4b69      	ldr	r3, [pc, #420]	; (8003454 <HAL_RCC_ClockConfig+0x1c0>)
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	f003 030f 	and.w	r3, r3, #15
 80032b4:	683a      	ldr	r2, [r7, #0]
 80032b6:	429a      	cmp	r2, r3
 80032b8:	d910      	bls.n	80032dc <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80032ba:	4b66      	ldr	r3, [pc, #408]	; (8003454 <HAL_RCC_ClockConfig+0x1c0>)
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	f023 020f 	bic.w	r2, r3, #15
 80032c2:	4964      	ldr	r1, [pc, #400]	; (8003454 <HAL_RCC_ClockConfig+0x1c0>)
 80032c4:	683b      	ldr	r3, [r7, #0]
 80032c6:	4313      	orrs	r3, r2
 80032c8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80032ca:	4b62      	ldr	r3, [pc, #392]	; (8003454 <HAL_RCC_ClockConfig+0x1c0>)
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f003 030f 	and.w	r3, r3, #15
 80032d2:	683a      	ldr	r2, [r7, #0]
 80032d4:	429a      	cmp	r2, r3
 80032d6:	d001      	beq.n	80032dc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80032d8:	2301      	movs	r3, #1
 80032da:	e0b6      	b.n	800344a <HAL_RCC_ClockConfig+0x1b6>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	f003 0302 	and.w	r3, r3, #2
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d020      	beq.n	800332a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	f003 0304 	and.w	r3, r3, #4
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d005      	beq.n	8003300 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80032f4:	4b58      	ldr	r3, [pc, #352]	; (8003458 <HAL_RCC_ClockConfig+0x1c4>)
 80032f6:	689b      	ldr	r3, [r3, #8]
 80032f8:	4a57      	ldr	r2, [pc, #348]	; (8003458 <HAL_RCC_ClockConfig+0x1c4>)
 80032fa:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80032fe:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	f003 0308 	and.w	r3, r3, #8
 8003308:	2b00      	cmp	r3, #0
 800330a:	d005      	beq.n	8003318 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800330c:	4b52      	ldr	r3, [pc, #328]	; (8003458 <HAL_RCC_ClockConfig+0x1c4>)
 800330e:	689b      	ldr	r3, [r3, #8]
 8003310:	4a51      	ldr	r2, [pc, #324]	; (8003458 <HAL_RCC_ClockConfig+0x1c4>)
 8003312:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003316:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003318:	4b4f      	ldr	r3, [pc, #316]	; (8003458 <HAL_RCC_ClockConfig+0x1c4>)
 800331a:	689b      	ldr	r3, [r3, #8]
 800331c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	689b      	ldr	r3, [r3, #8]
 8003324:	494c      	ldr	r1, [pc, #304]	; (8003458 <HAL_RCC_ClockConfig+0x1c4>)
 8003326:	4313      	orrs	r3, r2
 8003328:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f003 0301 	and.w	r3, r3, #1
 8003332:	2b00      	cmp	r3, #0
 8003334:	d040      	beq.n	80033b8 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	685b      	ldr	r3, [r3, #4]
 800333a:	2b01      	cmp	r3, #1
 800333c:	d107      	bne.n	800334e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800333e:	4b46      	ldr	r3, [pc, #280]	; (8003458 <HAL_RCC_ClockConfig+0x1c4>)
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003346:	2b00      	cmp	r3, #0
 8003348:	d115      	bne.n	8003376 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800334a:	2301      	movs	r3, #1
 800334c:	e07d      	b.n	800344a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	685b      	ldr	r3, [r3, #4]
 8003352:	2b02      	cmp	r3, #2
 8003354:	d107      	bne.n	8003366 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003356:	4b40      	ldr	r3, [pc, #256]	; (8003458 <HAL_RCC_ClockConfig+0x1c4>)
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800335e:	2b00      	cmp	r3, #0
 8003360:	d109      	bne.n	8003376 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003362:	2301      	movs	r3, #1
 8003364:	e071      	b.n	800344a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003366:	4b3c      	ldr	r3, [pc, #240]	; (8003458 <HAL_RCC_ClockConfig+0x1c4>)
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f003 0302 	and.w	r3, r3, #2
 800336e:	2b00      	cmp	r3, #0
 8003370:	d101      	bne.n	8003376 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003372:	2301      	movs	r3, #1
 8003374:	e069      	b.n	800344a <HAL_RCC_ClockConfig+0x1b6>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003376:	4b38      	ldr	r3, [pc, #224]	; (8003458 <HAL_RCC_ClockConfig+0x1c4>)
 8003378:	689b      	ldr	r3, [r3, #8]
 800337a:	f023 0203 	bic.w	r2, r3, #3
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	685b      	ldr	r3, [r3, #4]
 8003382:	4935      	ldr	r1, [pc, #212]	; (8003458 <HAL_RCC_ClockConfig+0x1c4>)
 8003384:	4313      	orrs	r3, r2
 8003386:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003388:	f7fd fea6 	bl	80010d8 <HAL_GetTick>
 800338c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800338e:	e00a      	b.n	80033a6 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003390:	f7fd fea2 	bl	80010d8 <HAL_GetTick>
 8003394:	4602      	mov	r2, r0
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	1ad3      	subs	r3, r2, r3
 800339a:	f241 3288 	movw	r2, #5000	; 0x1388
 800339e:	4293      	cmp	r3, r2
 80033a0:	d901      	bls.n	80033a6 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80033a2:	2303      	movs	r3, #3
 80033a4:	e051      	b.n	800344a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80033a6:	4b2c      	ldr	r3, [pc, #176]	; (8003458 <HAL_RCC_ClockConfig+0x1c4>)
 80033a8:	689b      	ldr	r3, [r3, #8]
 80033aa:	f003 020c 	and.w	r2, r3, #12
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	685b      	ldr	r3, [r3, #4]
 80033b2:	009b      	lsls	r3, r3, #2
 80033b4:	429a      	cmp	r2, r3
 80033b6:	d1eb      	bne.n	8003390 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80033b8:	4b26      	ldr	r3, [pc, #152]	; (8003454 <HAL_RCC_ClockConfig+0x1c0>)
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	f003 030f 	and.w	r3, r3, #15
 80033c0:	683a      	ldr	r2, [r7, #0]
 80033c2:	429a      	cmp	r2, r3
 80033c4:	d210      	bcs.n	80033e8 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80033c6:	4b23      	ldr	r3, [pc, #140]	; (8003454 <HAL_RCC_ClockConfig+0x1c0>)
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	f023 020f 	bic.w	r2, r3, #15
 80033ce:	4921      	ldr	r1, [pc, #132]	; (8003454 <HAL_RCC_ClockConfig+0x1c0>)
 80033d0:	683b      	ldr	r3, [r7, #0]
 80033d2:	4313      	orrs	r3, r2
 80033d4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80033d6:	4b1f      	ldr	r3, [pc, #124]	; (8003454 <HAL_RCC_ClockConfig+0x1c0>)
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	f003 030f 	and.w	r3, r3, #15
 80033de:	683a      	ldr	r2, [r7, #0]
 80033e0:	429a      	cmp	r2, r3
 80033e2:	d001      	beq.n	80033e8 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80033e4:	2301      	movs	r3, #1
 80033e6:	e030      	b.n	800344a <HAL_RCC_ClockConfig+0x1b6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	f003 0304 	and.w	r3, r3, #4
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d008      	beq.n	8003406 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80033f4:	4b18      	ldr	r3, [pc, #96]	; (8003458 <HAL_RCC_ClockConfig+0x1c4>)
 80033f6:	689b      	ldr	r3, [r3, #8]
 80033f8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	68db      	ldr	r3, [r3, #12]
 8003400:	4915      	ldr	r1, [pc, #84]	; (8003458 <HAL_RCC_ClockConfig+0x1c4>)
 8003402:	4313      	orrs	r3, r2
 8003404:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f003 0308 	and.w	r3, r3, #8
 800340e:	2b00      	cmp	r3, #0
 8003410:	d009      	beq.n	8003426 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003412:	4b11      	ldr	r3, [pc, #68]	; (8003458 <HAL_RCC_ClockConfig+0x1c4>)
 8003414:	689b      	ldr	r3, [r3, #8]
 8003416:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	691b      	ldr	r3, [r3, #16]
 800341e:	00db      	lsls	r3, r3, #3
 8003420:	490d      	ldr	r1, [pc, #52]	; (8003458 <HAL_RCC_ClockConfig+0x1c4>)
 8003422:	4313      	orrs	r3, r2
 8003424:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003426:	f000 f81d 	bl	8003464 <HAL_RCC_GetSysClockFreq>
 800342a:	4601      	mov	r1, r0
 800342c:	4b0a      	ldr	r3, [pc, #40]	; (8003458 <HAL_RCC_ClockConfig+0x1c4>)
 800342e:	689b      	ldr	r3, [r3, #8]
 8003430:	091b      	lsrs	r3, r3, #4
 8003432:	f003 030f 	and.w	r3, r3, #15
 8003436:	4a09      	ldr	r2, [pc, #36]	; (800345c <HAL_RCC_ClockConfig+0x1c8>)
 8003438:	5cd3      	ldrb	r3, [r2, r3]
 800343a:	fa21 f303 	lsr.w	r3, r1, r3
 800343e:	4a08      	ldr	r2, [pc, #32]	; (8003460 <HAL_RCC_ClockConfig+0x1cc>)
 8003440:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8003442:	2000      	movs	r0, #0
 8003444:	f7fd fe04 	bl	8001050 <HAL_InitTick>

  return HAL_OK;
 8003448:	2300      	movs	r3, #0
}
 800344a:	4618      	mov	r0, r3
 800344c:	3710      	adds	r7, #16
 800344e:	46bd      	mov	sp, r7
 8003450:	bd80      	pop	{r7, pc}
 8003452:	bf00      	nop
 8003454:	40023c00 	.word	0x40023c00
 8003458:	40023800 	.word	0x40023800
 800345c:	08006610 	.word	0x08006610
 8003460:	20000000 	.word	0x20000000

08003464 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003464:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003466:	b085      	sub	sp, #20
 8003468:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800346a:	2300      	movs	r3, #0
 800346c:	607b      	str	r3, [r7, #4]
 800346e:	2300      	movs	r3, #0
 8003470:	60fb      	str	r3, [r7, #12]
 8003472:	2300      	movs	r3, #0
 8003474:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 8003476:	2300      	movs	r3, #0
 8003478:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800347a:	4b63      	ldr	r3, [pc, #396]	; (8003608 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800347c:	689b      	ldr	r3, [r3, #8]
 800347e:	f003 030c 	and.w	r3, r3, #12
 8003482:	2b04      	cmp	r3, #4
 8003484:	d007      	beq.n	8003496 <HAL_RCC_GetSysClockFreq+0x32>
 8003486:	2b08      	cmp	r3, #8
 8003488:	d008      	beq.n	800349c <HAL_RCC_GetSysClockFreq+0x38>
 800348a:	2b00      	cmp	r3, #0
 800348c:	f040 80b4 	bne.w	80035f8 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003490:	4b5e      	ldr	r3, [pc, #376]	; (800360c <HAL_RCC_GetSysClockFreq+0x1a8>)
 8003492:	60bb      	str	r3, [r7, #8]
       break;
 8003494:	e0b3      	b.n	80035fe <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003496:	4b5e      	ldr	r3, [pc, #376]	; (8003610 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8003498:	60bb      	str	r3, [r7, #8]
      break;
 800349a:	e0b0      	b.n	80035fe <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800349c:	4b5a      	ldr	r3, [pc, #360]	; (8003608 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800349e:	685b      	ldr	r3, [r3, #4]
 80034a0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80034a4:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80034a6:	4b58      	ldr	r3, [pc, #352]	; (8003608 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80034a8:	685b      	ldr	r3, [r3, #4]
 80034aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d04a      	beq.n	8003548 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80034b2:	4b55      	ldr	r3, [pc, #340]	; (8003608 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80034b4:	685b      	ldr	r3, [r3, #4]
 80034b6:	099b      	lsrs	r3, r3, #6
 80034b8:	f04f 0400 	mov.w	r4, #0
 80034bc:	f240 11ff 	movw	r1, #511	; 0x1ff
 80034c0:	f04f 0200 	mov.w	r2, #0
 80034c4:	ea03 0501 	and.w	r5, r3, r1
 80034c8:	ea04 0602 	and.w	r6, r4, r2
 80034cc:	4629      	mov	r1, r5
 80034ce:	4632      	mov	r2, r6
 80034d0:	f04f 0300 	mov.w	r3, #0
 80034d4:	f04f 0400 	mov.w	r4, #0
 80034d8:	0154      	lsls	r4, r2, #5
 80034da:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80034de:	014b      	lsls	r3, r1, #5
 80034e0:	4619      	mov	r1, r3
 80034e2:	4622      	mov	r2, r4
 80034e4:	1b49      	subs	r1, r1, r5
 80034e6:	eb62 0206 	sbc.w	r2, r2, r6
 80034ea:	f04f 0300 	mov.w	r3, #0
 80034ee:	f04f 0400 	mov.w	r4, #0
 80034f2:	0194      	lsls	r4, r2, #6
 80034f4:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80034f8:	018b      	lsls	r3, r1, #6
 80034fa:	1a5b      	subs	r3, r3, r1
 80034fc:	eb64 0402 	sbc.w	r4, r4, r2
 8003500:	f04f 0100 	mov.w	r1, #0
 8003504:	f04f 0200 	mov.w	r2, #0
 8003508:	00e2      	lsls	r2, r4, #3
 800350a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800350e:	00d9      	lsls	r1, r3, #3
 8003510:	460b      	mov	r3, r1
 8003512:	4614      	mov	r4, r2
 8003514:	195b      	adds	r3, r3, r5
 8003516:	eb44 0406 	adc.w	r4, r4, r6
 800351a:	f04f 0100 	mov.w	r1, #0
 800351e:	f04f 0200 	mov.w	r2, #0
 8003522:	0262      	lsls	r2, r4, #9
 8003524:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8003528:	0259      	lsls	r1, r3, #9
 800352a:	460b      	mov	r3, r1
 800352c:	4614      	mov	r4, r2
 800352e:	4618      	mov	r0, r3
 8003530:	4621      	mov	r1, r4
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	f04f 0400 	mov.w	r4, #0
 8003538:	461a      	mov	r2, r3
 800353a:	4623      	mov	r3, r4
 800353c:	f7fc fe84 	bl	8000248 <__aeabi_uldivmod>
 8003540:	4603      	mov	r3, r0
 8003542:	460c      	mov	r4, r1
 8003544:	60fb      	str	r3, [r7, #12]
 8003546:	e049      	b.n	80035dc <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003548:	4b2f      	ldr	r3, [pc, #188]	; (8003608 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800354a:	685b      	ldr	r3, [r3, #4]
 800354c:	099b      	lsrs	r3, r3, #6
 800354e:	f04f 0400 	mov.w	r4, #0
 8003552:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003556:	f04f 0200 	mov.w	r2, #0
 800355a:	ea03 0501 	and.w	r5, r3, r1
 800355e:	ea04 0602 	and.w	r6, r4, r2
 8003562:	4629      	mov	r1, r5
 8003564:	4632      	mov	r2, r6
 8003566:	f04f 0300 	mov.w	r3, #0
 800356a:	f04f 0400 	mov.w	r4, #0
 800356e:	0154      	lsls	r4, r2, #5
 8003570:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003574:	014b      	lsls	r3, r1, #5
 8003576:	4619      	mov	r1, r3
 8003578:	4622      	mov	r2, r4
 800357a:	1b49      	subs	r1, r1, r5
 800357c:	eb62 0206 	sbc.w	r2, r2, r6
 8003580:	f04f 0300 	mov.w	r3, #0
 8003584:	f04f 0400 	mov.w	r4, #0
 8003588:	0194      	lsls	r4, r2, #6
 800358a:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800358e:	018b      	lsls	r3, r1, #6
 8003590:	1a5b      	subs	r3, r3, r1
 8003592:	eb64 0402 	sbc.w	r4, r4, r2
 8003596:	f04f 0100 	mov.w	r1, #0
 800359a:	f04f 0200 	mov.w	r2, #0
 800359e:	00e2      	lsls	r2, r4, #3
 80035a0:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80035a4:	00d9      	lsls	r1, r3, #3
 80035a6:	460b      	mov	r3, r1
 80035a8:	4614      	mov	r4, r2
 80035aa:	195b      	adds	r3, r3, r5
 80035ac:	eb44 0406 	adc.w	r4, r4, r6
 80035b0:	f04f 0100 	mov.w	r1, #0
 80035b4:	f04f 0200 	mov.w	r2, #0
 80035b8:	02a2      	lsls	r2, r4, #10
 80035ba:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80035be:	0299      	lsls	r1, r3, #10
 80035c0:	460b      	mov	r3, r1
 80035c2:	4614      	mov	r4, r2
 80035c4:	4618      	mov	r0, r3
 80035c6:	4621      	mov	r1, r4
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	f04f 0400 	mov.w	r4, #0
 80035ce:	461a      	mov	r2, r3
 80035d0:	4623      	mov	r3, r4
 80035d2:	f7fc fe39 	bl	8000248 <__aeabi_uldivmod>
 80035d6:	4603      	mov	r3, r0
 80035d8:	460c      	mov	r4, r1
 80035da:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1 ) *2);
 80035dc:	4b0a      	ldr	r3, [pc, #40]	; (8003608 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80035de:	685b      	ldr	r3, [r3, #4]
 80035e0:	0c1b      	lsrs	r3, r3, #16
 80035e2:	f003 0303 	and.w	r3, r3, #3
 80035e6:	3301      	adds	r3, #1
 80035e8:	005b      	lsls	r3, r3, #1
 80035ea:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80035ec:	68fa      	ldr	r2, [r7, #12]
 80035ee:	683b      	ldr	r3, [r7, #0]
 80035f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80035f4:	60bb      	str	r3, [r7, #8]
      break;
 80035f6:	e002      	b.n	80035fe <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80035f8:	4b04      	ldr	r3, [pc, #16]	; (800360c <HAL_RCC_GetSysClockFreq+0x1a8>)
 80035fa:	60bb      	str	r3, [r7, #8]
      break;
 80035fc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80035fe:	68bb      	ldr	r3, [r7, #8]
}
 8003600:	4618      	mov	r0, r3
 8003602:	3714      	adds	r7, #20
 8003604:	46bd      	mov	sp, r7
 8003606:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003608:	40023800 	.word	0x40023800
 800360c:	00f42400 	.word	0x00f42400
 8003610:	007a1200 	.word	0x007a1200

08003614 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003614:	b480      	push	{r7}
 8003616:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003618:	4b03      	ldr	r3, [pc, #12]	; (8003628 <HAL_RCC_GetHCLKFreq+0x14>)
 800361a:	681b      	ldr	r3, [r3, #0]
}
 800361c:	4618      	mov	r0, r3
 800361e:	46bd      	mov	sp, r7
 8003620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003624:	4770      	bx	lr
 8003626:	bf00      	nop
 8003628:	20000000 	.word	0x20000000

0800362c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800362c:	b580      	push	{r7, lr}
 800362e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003630:	f7ff fff0 	bl	8003614 <HAL_RCC_GetHCLKFreq>
 8003634:	4601      	mov	r1, r0
 8003636:	4b05      	ldr	r3, [pc, #20]	; (800364c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003638:	689b      	ldr	r3, [r3, #8]
 800363a:	0a9b      	lsrs	r3, r3, #10
 800363c:	f003 0307 	and.w	r3, r3, #7
 8003640:	4a03      	ldr	r2, [pc, #12]	; (8003650 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003642:	5cd3      	ldrb	r3, [r2, r3]
 8003644:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003648:	4618      	mov	r0, r3
 800364a:	bd80      	pop	{r7, pc}
 800364c:	40023800 	.word	0x40023800
 8003650:	08006620 	.word	0x08006620

08003654 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003654:	b580      	push	{r7, lr}
 8003656:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003658:	f7ff ffdc 	bl	8003614 <HAL_RCC_GetHCLKFreq>
 800365c:	4601      	mov	r1, r0
 800365e:	4b05      	ldr	r3, [pc, #20]	; (8003674 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003660:	689b      	ldr	r3, [r3, #8]
 8003662:	0b5b      	lsrs	r3, r3, #13
 8003664:	f003 0307 	and.w	r3, r3, #7
 8003668:	4a03      	ldr	r2, [pc, #12]	; (8003678 <HAL_RCC_GetPCLK2Freq+0x24>)
 800366a:	5cd3      	ldrb	r3, [r2, r3]
 800366c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003670:	4618      	mov	r0, r3
 8003672:	bd80      	pop	{r7, pc}
 8003674:	40023800 	.word	0x40023800
 8003678:	08006620 	.word	0x08006620

0800367c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800367c:	b580      	push	{r7, lr}
 800367e:	b088      	sub	sp, #32
 8003680:	af00      	add	r7, sp, #0
 8003682:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8003684:	2300      	movs	r3, #0
 8003686:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8003688:	2300      	movs	r3, #0
 800368a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 800368c:	2300      	movs	r3, #0
 800368e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8003690:	2300      	movs	r3, #0
 8003692:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8003694:	2300      	movs	r3, #0
 8003696:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	f003 0301 	and.w	r3, r3, #1
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d012      	beq.n	80036ca <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80036a4:	4b69      	ldr	r3, [pc, #420]	; (800384c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80036a6:	689b      	ldr	r3, [r3, #8]
 80036a8:	4a68      	ldr	r2, [pc, #416]	; (800384c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80036aa:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80036ae:	6093      	str	r3, [r2, #8]
 80036b0:	4b66      	ldr	r3, [pc, #408]	; (800384c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80036b2:	689a      	ldr	r2, [r3, #8]
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80036b8:	4964      	ldr	r1, [pc, #400]	; (800384c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80036ba:	4313      	orrs	r3, r2
 80036bc:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d101      	bne.n	80036ca <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80036c6:	2301      	movs	r3, #1
 80036c8:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d017      	beq.n	8003706 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80036d6:	4b5d      	ldr	r3, [pc, #372]	; (800384c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80036d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80036dc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036e4:	4959      	ldr	r1, [pc, #356]	; (800384c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80036e6:	4313      	orrs	r3, r2
 80036e8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036f0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80036f4:	d101      	bne.n	80036fa <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80036f6:	2301      	movs	r3, #1
 80036f8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d101      	bne.n	8003706 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8003702:	2301      	movs	r3, #1
 8003704:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800370e:	2b00      	cmp	r3, #0
 8003710:	d017      	beq.n	8003742 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003712:	4b4e      	ldr	r3, [pc, #312]	; (800384c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003714:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003718:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003720:	494a      	ldr	r1, [pc, #296]	; (800384c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003722:	4313      	orrs	r3, r2
 8003724:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800372c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003730:	d101      	bne.n	8003736 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8003732:	2301      	movs	r3, #1
 8003734:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800373a:	2b00      	cmp	r3, #0
 800373c:	d101      	bne.n	8003742 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800373e:	2301      	movs	r3, #1
 8003740:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800374a:	2b00      	cmp	r3, #0
 800374c:	d001      	beq.n	8003752 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800374e:	2301      	movs	r3, #1
 8003750:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	f003 0320 	and.w	r3, r3, #32
 800375a:	2b00      	cmp	r3, #0
 800375c:	f000 808b 	beq.w	8003876 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003760:	4b3a      	ldr	r3, [pc, #232]	; (800384c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003762:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003764:	4a39      	ldr	r2, [pc, #228]	; (800384c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003766:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800376a:	6413      	str	r3, [r2, #64]	; 0x40
 800376c:	4b37      	ldr	r3, [pc, #220]	; (800384c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800376e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003770:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003774:	60bb      	str	r3, [r7, #8]
 8003776:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003778:	4b35      	ldr	r3, [pc, #212]	; (8003850 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	4a34      	ldr	r2, [pc, #208]	; (8003850 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800377e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003782:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003784:	f7fd fca8 	bl	80010d8 <HAL_GetTick>
 8003788:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800378a:	e008      	b.n	800379e <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800378c:	f7fd fca4 	bl	80010d8 <HAL_GetTick>
 8003790:	4602      	mov	r2, r0
 8003792:	697b      	ldr	r3, [r7, #20]
 8003794:	1ad3      	subs	r3, r2, r3
 8003796:	2b64      	cmp	r3, #100	; 0x64
 8003798:	d901      	bls.n	800379e <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800379a:	2303      	movs	r3, #3
 800379c:	e38d      	b.n	8003eba <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800379e:	4b2c      	ldr	r3, [pc, #176]	; (8003850 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d0f0      	beq.n	800378c <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80037aa:	4b28      	ldr	r3, [pc, #160]	; (800384c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80037ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037ae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80037b2:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80037b4:	693b      	ldr	r3, [r7, #16]
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d035      	beq.n	8003826 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80037c2:	693a      	ldr	r2, [r7, #16]
 80037c4:	429a      	cmp	r2, r3
 80037c6:	d02e      	beq.n	8003826 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80037c8:	4b20      	ldr	r3, [pc, #128]	; (800384c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80037ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037cc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80037d0:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80037d2:	4b1e      	ldr	r3, [pc, #120]	; (800384c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80037d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037d6:	4a1d      	ldr	r2, [pc, #116]	; (800384c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80037d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80037dc:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80037de:	4b1b      	ldr	r3, [pc, #108]	; (800384c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80037e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037e2:	4a1a      	ldr	r2, [pc, #104]	; (800384c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80037e4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80037e8:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80037ea:	4a18      	ldr	r2, [pc, #96]	; (800384c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80037ec:	693b      	ldr	r3, [r7, #16]
 80037ee:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80037f0:	4b16      	ldr	r3, [pc, #88]	; (800384c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80037f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037f4:	f003 0301 	and.w	r3, r3, #1
 80037f8:	2b01      	cmp	r3, #1
 80037fa:	d114      	bne.n	8003826 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037fc:	f7fd fc6c 	bl	80010d8 <HAL_GetTick>
 8003800:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003802:	e00a      	b.n	800381a <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003804:	f7fd fc68 	bl	80010d8 <HAL_GetTick>
 8003808:	4602      	mov	r2, r0
 800380a:	697b      	ldr	r3, [r7, #20]
 800380c:	1ad3      	subs	r3, r2, r3
 800380e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003812:	4293      	cmp	r3, r2
 8003814:	d901      	bls.n	800381a <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8003816:	2303      	movs	r3, #3
 8003818:	e34f      	b.n	8003eba <HAL_RCCEx_PeriphCLKConfig+0x83e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800381a:	4b0c      	ldr	r3, [pc, #48]	; (800384c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800381c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800381e:	f003 0302 	and.w	r3, r3, #2
 8003822:	2b00      	cmp	r3, #0
 8003824:	d0ee      	beq.n	8003804 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800382a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800382e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003832:	d111      	bne.n	8003858 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8003834:	4b05      	ldr	r3, [pc, #20]	; (800384c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003836:	689b      	ldr	r3, [r3, #8]
 8003838:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003840:	4b04      	ldr	r3, [pc, #16]	; (8003854 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003842:	400b      	ands	r3, r1
 8003844:	4901      	ldr	r1, [pc, #4]	; (800384c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003846:	4313      	orrs	r3, r2
 8003848:	608b      	str	r3, [r1, #8]
 800384a:	e00b      	b.n	8003864 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 800384c:	40023800 	.word	0x40023800
 8003850:	40007000 	.word	0x40007000
 8003854:	0ffffcff 	.word	0x0ffffcff
 8003858:	4bb3      	ldr	r3, [pc, #716]	; (8003b28 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800385a:	689b      	ldr	r3, [r3, #8]
 800385c:	4ab2      	ldr	r2, [pc, #712]	; (8003b28 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800385e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003862:	6093      	str	r3, [r2, #8]
 8003864:	4bb0      	ldr	r3, [pc, #704]	; (8003b28 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003866:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800386c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003870:	49ad      	ldr	r1, [pc, #692]	; (8003b28 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003872:	4313      	orrs	r3, r2
 8003874:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	f003 0310 	and.w	r3, r3, #16
 800387e:	2b00      	cmp	r3, #0
 8003880:	d010      	beq.n	80038a4 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003882:	4ba9      	ldr	r3, [pc, #676]	; (8003b28 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003884:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003888:	4aa7      	ldr	r2, [pc, #668]	; (8003b28 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800388a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800388e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8003892:	4ba5      	ldr	r3, [pc, #660]	; (8003b28 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003894:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800389c:	49a2      	ldr	r1, [pc, #648]	; (8003b28 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800389e:	4313      	orrs	r3, r2
 80038a0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d00a      	beq.n	80038c6 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80038b0:	4b9d      	ldr	r3, [pc, #628]	; (8003b28 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80038b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038b6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80038be:	499a      	ldr	r1, [pc, #616]	; (8003b28 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80038c0:	4313      	orrs	r3, r2
 80038c2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d00a      	beq.n	80038e8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80038d2:	4b95      	ldr	r3, [pc, #596]	; (8003b28 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80038d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038d8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80038e0:	4991      	ldr	r1, [pc, #580]	; (8003b28 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80038e2:	4313      	orrs	r3, r2
 80038e4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d00a      	beq.n	800390a <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80038f4:	4b8c      	ldr	r3, [pc, #560]	; (8003b28 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80038f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038fa:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003902:	4989      	ldr	r1, [pc, #548]	; (8003b28 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003904:	4313      	orrs	r3, r2
 8003906:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003912:	2b00      	cmp	r3, #0
 8003914:	d00a      	beq.n	800392c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003916:	4b84      	ldr	r3, [pc, #528]	; (8003b28 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003918:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800391c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003924:	4980      	ldr	r1, [pc, #512]	; (8003b28 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003926:	4313      	orrs	r3, r2
 8003928:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003934:	2b00      	cmp	r3, #0
 8003936:	d00a      	beq.n	800394e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003938:	4b7b      	ldr	r3, [pc, #492]	; (8003b28 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800393a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800393e:	f023 0203 	bic.w	r2, r3, #3
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003946:	4978      	ldr	r1, [pc, #480]	; (8003b28 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003948:	4313      	orrs	r3, r2
 800394a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003956:	2b00      	cmp	r3, #0
 8003958:	d00a      	beq.n	8003970 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800395a:	4b73      	ldr	r3, [pc, #460]	; (8003b28 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800395c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003960:	f023 020c 	bic.w	r2, r3, #12
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003968:	496f      	ldr	r1, [pc, #444]	; (8003b28 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800396a:	4313      	orrs	r3, r2
 800396c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003978:	2b00      	cmp	r3, #0
 800397a:	d00a      	beq.n	8003992 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800397c:	4b6a      	ldr	r3, [pc, #424]	; (8003b28 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800397e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003982:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800398a:	4967      	ldr	r1, [pc, #412]	; (8003b28 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800398c:	4313      	orrs	r3, r2
 800398e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800399a:	2b00      	cmp	r3, #0
 800399c:	d00a      	beq.n	80039b4 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800399e:	4b62      	ldr	r3, [pc, #392]	; (8003b28 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80039a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039a4:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80039ac:	495e      	ldr	r1, [pc, #376]	; (8003b28 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80039ae:	4313      	orrs	r3, r2
 80039b0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d00a      	beq.n	80039d6 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80039c0:	4b59      	ldr	r3, [pc, #356]	; (8003b28 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80039c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039c6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039ce:	4956      	ldr	r1, [pc, #344]	; (8003b28 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80039d0:	4313      	orrs	r3, r2
 80039d2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d00a      	beq.n	80039f8 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80039e2:	4b51      	ldr	r3, [pc, #324]	; (8003b28 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80039e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039e8:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039f0:	494d      	ldr	r1, [pc, #308]	; (8003b28 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80039f2:	4313      	orrs	r3, r2
 80039f4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d00a      	beq.n	8003a1a <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8003a04:	4b48      	ldr	r3, [pc, #288]	; (8003b28 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003a06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a0a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a12:	4945      	ldr	r1, [pc, #276]	; (8003b28 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003a14:	4313      	orrs	r3, r2
 8003a16:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d00a      	beq.n	8003a3c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8003a26:	4b40      	ldr	r3, [pc, #256]	; (8003b28 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003a28:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a2c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a34:	493c      	ldr	r1, [pc, #240]	; (8003b28 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003a36:	4313      	orrs	r3, r2
 8003a38:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d00a      	beq.n	8003a5e <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003a48:	4b37      	ldr	r3, [pc, #220]	; (8003b28 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003a4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a4e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003a56:	4934      	ldr	r1, [pc, #208]	; (8003b28 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003a58:	4313      	orrs	r3, r2
 8003a5a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d011      	beq.n	8003a8e <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003a6a:	4b2f      	ldr	r3, [pc, #188]	; (8003b28 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003a6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a70:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003a78:	492b      	ldr	r1, [pc, #172]	; (8003b28 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003a7a:	4313      	orrs	r3, r2
 8003a7c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003a84:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003a88:	d101      	bne.n	8003a8e <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8003a8a:	2301      	movs	r3, #1
 8003a8c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	f003 0308 	and.w	r3, r3, #8
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d001      	beq.n	8003a9e <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8003a9a:	2301      	movs	r3, #1
 8003a9c:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d00a      	beq.n	8003ac0 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003aaa:	4b1f      	ldr	r3, [pc, #124]	; (8003b28 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003aac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ab0:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ab8:	491b      	ldr	r1, [pc, #108]	; (8003b28 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003aba:	4313      	orrs	r3, r2
 8003abc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d00b      	beq.n	8003ae4 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003acc:	4b16      	ldr	r3, [pc, #88]	; (8003b28 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003ace:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ad2:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003adc:	4912      	ldr	r1, [pc, #72]	; (8003b28 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003ade:	4313      	orrs	r3, r2
 8003ae0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d00b      	beq.n	8003b08 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8003af0:	4b0d      	ldr	r3, [pc, #52]	; (8003b28 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003af2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003af6:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003b00:	4909      	ldr	r1, [pc, #36]	; (8003b28 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003b02:	4313      	orrs	r3, r2
 8003b04:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d00f      	beq.n	8003b34 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003b14:	4b04      	ldr	r3, [pc, #16]	; (8003b28 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003b16:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003b1a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b24:	e002      	b.n	8003b2c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 8003b26:	bf00      	nop
 8003b28:	40023800 	.word	0x40023800
 8003b2c:	4985      	ldr	r1, [pc, #532]	; (8003d44 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003b2e:	4313      	orrs	r3, r2
 8003b30:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d00b      	beq.n	8003b58 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8003b40:	4b80      	ldr	r3, [pc, #512]	; (8003d44 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003b42:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003b46:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003b50:	497c      	ldr	r1, [pc, #496]	; (8003d44 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003b52:	4313      	orrs	r3, r2
 8003b54:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8003b58:	69fb      	ldr	r3, [r7, #28]
 8003b5a:	2b01      	cmp	r3, #1
 8003b5c:	d005      	beq.n	8003b6a <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003b66:	f040 80d6 	bne.w	8003d16 <HAL_RCCEx_PeriphCLKConfig+0x69a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003b6a:	4b76      	ldr	r3, [pc, #472]	; (8003d44 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	4a75      	ldr	r2, [pc, #468]	; (8003d44 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003b70:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003b74:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003b76:	f7fd faaf 	bl	80010d8 <HAL_GetTick>
 8003b7a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003b7c:	e008      	b.n	8003b90 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003b7e:	f7fd faab 	bl	80010d8 <HAL_GetTick>
 8003b82:	4602      	mov	r2, r0
 8003b84:	697b      	ldr	r3, [r7, #20]
 8003b86:	1ad3      	subs	r3, r2, r3
 8003b88:	2b64      	cmp	r3, #100	; 0x64
 8003b8a:	d901      	bls.n	8003b90 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003b8c:	2303      	movs	r3, #3
 8003b8e:	e194      	b.n	8003eba <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003b90:	4b6c      	ldr	r3, [pc, #432]	; (8003d44 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d1f0      	bne.n	8003b7e <HAL_RCCEx_PeriphCLKConfig+0x502>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	f003 0301 	and.w	r3, r3, #1
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d021      	beq.n	8003bec <HAL_RCCEx_PeriphCLKConfig+0x570>
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d11d      	bne.n	8003bec <HAL_RCCEx_PeriphCLKConfig+0x570>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003bb0:	4b64      	ldr	r3, [pc, #400]	; (8003d44 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003bb2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003bb6:	0c1b      	lsrs	r3, r3, #16
 8003bb8:	f003 0303 	and.w	r3, r3, #3
 8003bbc:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003bbe:	4b61      	ldr	r3, [pc, #388]	; (8003d44 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003bc0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003bc4:	0e1b      	lsrs	r3, r3, #24
 8003bc6:	f003 030f 	and.w	r3, r3, #15
 8003bca:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	685b      	ldr	r3, [r3, #4]
 8003bd0:	019a      	lsls	r2, r3, #6
 8003bd2:	693b      	ldr	r3, [r7, #16]
 8003bd4:	041b      	lsls	r3, r3, #16
 8003bd6:	431a      	orrs	r2, r3
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	061b      	lsls	r3, r3, #24
 8003bdc:	431a      	orrs	r2, r3
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	689b      	ldr	r3, [r3, #8]
 8003be2:	071b      	lsls	r3, r3, #28
 8003be4:	4957      	ldr	r1, [pc, #348]	; (8003d44 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003be6:	4313      	orrs	r3, r2
 8003be8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d004      	beq.n	8003c02 <HAL_RCCEx_PeriphCLKConfig+0x586>
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bfc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003c00:	d00a      	beq.n	8003c18 <HAL_RCCEx_PeriphCLKConfig+0x59c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d02e      	beq.n	8003c6c <HAL_RCCEx_PeriphCLKConfig+0x5f0>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c12:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003c16:	d129      	bne.n	8003c6c <HAL_RCCEx_PeriphCLKConfig+0x5f0>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003c18:	4b4a      	ldr	r3, [pc, #296]	; (8003d44 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003c1a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003c1e:	0c1b      	lsrs	r3, r3, #16
 8003c20:	f003 0303 	and.w	r3, r3, #3
 8003c24:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003c26:	4b47      	ldr	r3, [pc, #284]	; (8003d44 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003c28:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003c2c:	0f1b      	lsrs	r3, r3, #28
 8003c2e:	f003 0307 	and.w	r3, r3, #7
 8003c32:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	685b      	ldr	r3, [r3, #4]
 8003c38:	019a      	lsls	r2, r3, #6
 8003c3a:	693b      	ldr	r3, [r7, #16]
 8003c3c:	041b      	lsls	r3, r3, #16
 8003c3e:	431a      	orrs	r2, r3
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	68db      	ldr	r3, [r3, #12]
 8003c44:	061b      	lsls	r3, r3, #24
 8003c46:	431a      	orrs	r2, r3
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	071b      	lsls	r3, r3, #28
 8003c4c:	493d      	ldr	r1, [pc, #244]	; (8003d44 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003c4e:	4313      	orrs	r3, r2
 8003c50:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003c54:	4b3b      	ldr	r3, [pc, #236]	; (8003d44 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003c56:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003c5a:	f023 021f 	bic.w	r2, r3, #31
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c62:	3b01      	subs	r3, #1
 8003c64:	4937      	ldr	r1, [pc, #220]	; (8003d44 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003c66:	4313      	orrs	r3, r2
 8003c68:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d01d      	beq.n	8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x638>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003c78:	4b32      	ldr	r3, [pc, #200]	; (8003d44 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003c7a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003c7e:	0e1b      	lsrs	r3, r3, #24
 8003c80:	f003 030f 	and.w	r3, r3, #15
 8003c84:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003c86:	4b2f      	ldr	r3, [pc, #188]	; (8003d44 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003c88:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003c8c:	0f1b      	lsrs	r3, r3, #28
 8003c8e:	f003 0307 	and.w	r3, r3, #7
 8003c92:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	685b      	ldr	r3, [r3, #4]
 8003c98:	019a      	lsls	r2, r3, #6
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	691b      	ldr	r3, [r3, #16]
 8003c9e:	041b      	lsls	r3, r3, #16
 8003ca0:	431a      	orrs	r2, r3
 8003ca2:	693b      	ldr	r3, [r7, #16]
 8003ca4:	061b      	lsls	r3, r3, #24
 8003ca6:	431a      	orrs	r2, r3
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	071b      	lsls	r3, r3, #28
 8003cac:	4925      	ldr	r1, [pc, #148]	; (8003d44 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003cae:	4313      	orrs	r3, r2
 8003cb0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d011      	beq.n	8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x668>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	685b      	ldr	r3, [r3, #4]
 8003cc4:	019a      	lsls	r2, r3, #6
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	691b      	ldr	r3, [r3, #16]
 8003cca:	041b      	lsls	r3, r3, #16
 8003ccc:	431a      	orrs	r2, r3
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	68db      	ldr	r3, [r3, #12]
 8003cd2:	061b      	lsls	r3, r3, #24
 8003cd4:	431a      	orrs	r2, r3
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	689b      	ldr	r3, [r3, #8]
 8003cda:	071b      	lsls	r3, r3, #28
 8003cdc:	4919      	ldr	r1, [pc, #100]	; (8003d44 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003cde:	4313      	orrs	r3, r2
 8003ce0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003ce4:	4b17      	ldr	r3, [pc, #92]	; (8003d44 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	4a16      	ldr	r2, [pc, #88]	; (8003d44 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003cea:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003cee:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003cf0:	f7fd f9f2 	bl	80010d8 <HAL_GetTick>
 8003cf4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003cf6:	e008      	b.n	8003d0a <HAL_RCCEx_PeriphCLKConfig+0x68e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003cf8:	f7fd f9ee 	bl	80010d8 <HAL_GetTick>
 8003cfc:	4602      	mov	r2, r0
 8003cfe:	697b      	ldr	r3, [r7, #20]
 8003d00:	1ad3      	subs	r3, r2, r3
 8003d02:	2b64      	cmp	r3, #100	; 0x64
 8003d04:	d901      	bls.n	8003d0a <HAL_RCCEx_PeriphCLKConfig+0x68e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003d06:	2303      	movs	r3, #3
 8003d08:	e0d7      	b.n	8003eba <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003d0a:	4b0e      	ldr	r3, [pc, #56]	; (8003d44 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d0f0      	beq.n	8003cf8 <HAL_RCCEx_PeriphCLKConfig+0x67c>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8003d16:	69bb      	ldr	r3, [r7, #24]
 8003d18:	2b01      	cmp	r3, #1
 8003d1a:	f040 80cd 	bne.w	8003eb8 <HAL_RCCEx_PeriphCLKConfig+0x83c>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003d1e:	4b09      	ldr	r3, [pc, #36]	; (8003d44 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	4a08      	ldr	r2, [pc, #32]	; (8003d44 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003d24:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003d28:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003d2a:	f7fd f9d5 	bl	80010d8 <HAL_GetTick>
 8003d2e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003d30:	e00a      	b.n	8003d48 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003d32:	f7fd f9d1 	bl	80010d8 <HAL_GetTick>
 8003d36:	4602      	mov	r2, r0
 8003d38:	697b      	ldr	r3, [r7, #20]
 8003d3a:	1ad3      	subs	r3, r2, r3
 8003d3c:	2b64      	cmp	r3, #100	; 0x64
 8003d3e:	d903      	bls.n	8003d48 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003d40:	2303      	movs	r3, #3
 8003d42:	e0ba      	b.n	8003eba <HAL_RCCEx_PeriphCLKConfig+0x83e>
 8003d44:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003d48:	4b5e      	ldr	r3, [pc, #376]	; (8003ec4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003d50:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003d54:	d0ed      	beq.n	8003d32 <HAL_RCCEx_PeriphCLKConfig+0x6b6>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d003      	beq.n	8003d6a <HAL_RCCEx_PeriphCLKConfig+0x6ee>
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d009      	beq.n	8003d7e <HAL_RCCEx_PeriphCLKConfig+0x702>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d02e      	beq.n	8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x758>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d12a      	bne.n	8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x758>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003d7e:	4b51      	ldr	r3, [pc, #324]	; (8003ec4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003d80:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d84:	0c1b      	lsrs	r3, r3, #16
 8003d86:	f003 0303 	and.w	r3, r3, #3
 8003d8a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003d8c:	4b4d      	ldr	r3, [pc, #308]	; (8003ec4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003d8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d92:	0f1b      	lsrs	r3, r3, #28
 8003d94:	f003 0307 	and.w	r3, r3, #7
 8003d98:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	695b      	ldr	r3, [r3, #20]
 8003d9e:	019a      	lsls	r2, r3, #6
 8003da0:	693b      	ldr	r3, [r7, #16]
 8003da2:	041b      	lsls	r3, r3, #16
 8003da4:	431a      	orrs	r2, r3
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	699b      	ldr	r3, [r3, #24]
 8003daa:	061b      	lsls	r3, r3, #24
 8003dac:	431a      	orrs	r2, r3
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	071b      	lsls	r3, r3, #28
 8003db2:	4944      	ldr	r1, [pc, #272]	; (8003ec4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003db4:	4313      	orrs	r3, r2
 8003db6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003dba:	4b42      	ldr	r3, [pc, #264]	; (8003ec4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003dbc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003dc0:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dc8:	3b01      	subs	r3, #1
 8003dca:	021b      	lsls	r3, r3, #8
 8003dcc:	493d      	ldr	r1, [pc, #244]	; (8003ec4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003dce:	4313      	orrs	r3, r2
 8003dd0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d022      	beq.n	8003e26 <HAL_RCCEx_PeriphCLKConfig+0x7aa>
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003de4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003de8:	d11d      	bne.n	8003e26 <HAL_RCCEx_PeriphCLKConfig+0x7aa>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003dea:	4b36      	ldr	r3, [pc, #216]	; (8003ec4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003dec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003df0:	0e1b      	lsrs	r3, r3, #24
 8003df2:	f003 030f 	and.w	r3, r3, #15
 8003df6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003df8:	4b32      	ldr	r3, [pc, #200]	; (8003ec4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003dfa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003dfe:	0f1b      	lsrs	r3, r3, #28
 8003e00:	f003 0307 	and.w	r3, r3, #7
 8003e04:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	695b      	ldr	r3, [r3, #20]
 8003e0a:	019a      	lsls	r2, r3, #6
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	6a1b      	ldr	r3, [r3, #32]
 8003e10:	041b      	lsls	r3, r3, #16
 8003e12:	431a      	orrs	r2, r3
 8003e14:	693b      	ldr	r3, [r7, #16]
 8003e16:	061b      	lsls	r3, r3, #24
 8003e18:	431a      	orrs	r2, r3
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	071b      	lsls	r3, r3, #28
 8003e1e:	4929      	ldr	r1, [pc, #164]	; (8003ec4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003e20:	4313      	orrs	r3, r2
 8003e22:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	f003 0308 	and.w	r3, r3, #8
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d028      	beq.n	8003e84 <HAL_RCCEx_PeriphCLKConfig+0x808>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003e32:	4b24      	ldr	r3, [pc, #144]	; (8003ec4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003e34:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e38:	0e1b      	lsrs	r3, r3, #24
 8003e3a:	f003 030f 	and.w	r3, r3, #15
 8003e3e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003e40:	4b20      	ldr	r3, [pc, #128]	; (8003ec4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003e42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e46:	0c1b      	lsrs	r3, r3, #16
 8003e48:	f003 0303 	and.w	r3, r3, #3
 8003e4c:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	695b      	ldr	r3, [r3, #20]
 8003e52:	019a      	lsls	r2, r3, #6
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	041b      	lsls	r3, r3, #16
 8003e58:	431a      	orrs	r2, r3
 8003e5a:	693b      	ldr	r3, [r7, #16]
 8003e5c:	061b      	lsls	r3, r3, #24
 8003e5e:	431a      	orrs	r2, r3
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	69db      	ldr	r3, [r3, #28]
 8003e64:	071b      	lsls	r3, r3, #28
 8003e66:	4917      	ldr	r1, [pc, #92]	; (8003ec4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003e68:	4313      	orrs	r3, r2
 8003e6a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8003e6e:	4b15      	ldr	r3, [pc, #84]	; (8003ec4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003e70:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003e74:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e7c:	4911      	ldr	r1, [pc, #68]	; (8003ec4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003e7e:	4313      	orrs	r3, r2
 8003e80:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003e84:	4b0f      	ldr	r3, [pc, #60]	; (8003ec4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	4a0e      	ldr	r2, [pc, #56]	; (8003ec4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003e8a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e8e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003e90:	f7fd f922 	bl	80010d8 <HAL_GetTick>
 8003e94:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003e96:	e008      	b.n	8003eaa <HAL_RCCEx_PeriphCLKConfig+0x82e>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003e98:	f7fd f91e 	bl	80010d8 <HAL_GetTick>
 8003e9c:	4602      	mov	r2, r0
 8003e9e:	697b      	ldr	r3, [r7, #20]
 8003ea0:	1ad3      	subs	r3, r2, r3
 8003ea2:	2b64      	cmp	r3, #100	; 0x64
 8003ea4:	d901      	bls.n	8003eaa <HAL_RCCEx_PeriphCLKConfig+0x82e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003ea6:	2303      	movs	r3, #3
 8003ea8:	e007      	b.n	8003eba <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003eaa:	4b06      	ldr	r3, [pc, #24]	; (8003ec4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003eb2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003eb6:	d1ef      	bne.n	8003e98 <HAL_RCCEx_PeriphCLKConfig+0x81c>
      }
    }
  }
  return HAL_OK;
 8003eb8:	2300      	movs	r3, #0
}
 8003eba:	4618      	mov	r0, r3
 8003ebc:	3720      	adds	r7, #32
 8003ebe:	46bd      	mov	sp, r7
 8003ec0:	bd80      	pop	{r7, pc}
 8003ec2:	bf00      	nop
 8003ec4:	40023800 	.word	0x40023800

08003ec8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003ec8:	b580      	push	{r7, lr}
 8003eca:	b082      	sub	sp, #8
 8003ecc:	af00      	add	r7, sp, #0
 8003ece:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d101      	bne.n	8003eda <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003ed6:	2301      	movs	r3, #1
 8003ed8:	e040      	b.n	8003f5c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d106      	bne.n	8003ef0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	2200      	movs	r2, #0
 8003ee6:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003eea:	6878      	ldr	r0, [r7, #4]
 8003eec:	f7fc ff4a 	bl	8000d84 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	2224      	movs	r2, #36	; 0x24
 8003ef4:	675a      	str	r2, [r3, #116]	; 0x74

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	681a      	ldr	r2, [r3, #0]
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	f022 0201 	bic.w	r2, r2, #1
 8003f04:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003f06:	6878      	ldr	r0, [r7, #4]
 8003f08:	f000 f82c 	bl	8003f64 <UART_SetConfig>
 8003f0c:	4603      	mov	r3, r0
 8003f0e:	2b01      	cmp	r3, #1
 8003f10:	d101      	bne.n	8003f16 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003f12:	2301      	movs	r3, #1
 8003f14:	e022      	b.n	8003f5c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d002      	beq.n	8003f24 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003f1e:	6878      	ldr	r0, [r7, #4]
 8003f20:	f000 fac4 	bl	80044ac <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	685a      	ldr	r2, [r3, #4]
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003f32:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	689a      	ldr	r2, [r3, #8]
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003f42:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	681a      	ldr	r2, [r3, #0]
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	f042 0201 	orr.w	r2, r2, #1
 8003f52:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003f54:	6878      	ldr	r0, [r7, #4]
 8003f56:	f000 fb4b 	bl	80045f0 <UART_CheckIdleState>
 8003f5a:	4603      	mov	r3, r0
}
 8003f5c:	4618      	mov	r0, r3
 8003f5e:	3708      	adds	r7, #8
 8003f60:	46bd      	mov	sp, r7
 8003f62:	bd80      	pop	{r7, pc}

08003f64 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003f64:	b580      	push	{r7, lr}
 8003f66:	b088      	sub	sp, #32
 8003f68:	af00      	add	r7, sp, #0
 8003f6a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8003f6c:	2300      	movs	r3, #0
 8003f6e:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 8003f70:	2300      	movs	r3, #0
 8003f72:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	689a      	ldr	r2, [r3, #8]
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	691b      	ldr	r3, [r3, #16]
 8003f7c:	431a      	orrs	r2, r3
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	695b      	ldr	r3, [r3, #20]
 8003f82:	431a      	orrs	r2, r3
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	69db      	ldr	r3, [r3, #28]
 8003f88:	4313      	orrs	r3, r2
 8003f8a:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	681a      	ldr	r2, [r3, #0]
 8003f92:	4bb1      	ldr	r3, [pc, #708]	; (8004258 <UART_SetConfig+0x2f4>)
 8003f94:	4013      	ands	r3, r2
 8003f96:	687a      	ldr	r2, [r7, #4]
 8003f98:	6812      	ldr	r2, [r2, #0]
 8003f9a:	6939      	ldr	r1, [r7, #16]
 8003f9c:	430b      	orrs	r3, r1
 8003f9e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	685b      	ldr	r3, [r3, #4]
 8003fa6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	68da      	ldr	r2, [r3, #12]
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	430a      	orrs	r2, r1
 8003fb4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	699b      	ldr	r3, [r3, #24]
 8003fba:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	6a1b      	ldr	r3, [r3, #32]
 8003fc0:	693a      	ldr	r2, [r7, #16]
 8003fc2:	4313      	orrs	r3, r2
 8003fc4:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	689b      	ldr	r3, [r3, #8]
 8003fcc:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	693a      	ldr	r2, [r7, #16]
 8003fd6:	430a      	orrs	r2, r1
 8003fd8:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	4a9f      	ldr	r2, [pc, #636]	; (800425c <UART_SetConfig+0x2f8>)
 8003fe0:	4293      	cmp	r3, r2
 8003fe2:	d121      	bne.n	8004028 <UART_SetConfig+0xc4>
 8003fe4:	4b9e      	ldr	r3, [pc, #632]	; (8004260 <UART_SetConfig+0x2fc>)
 8003fe6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fea:	f003 0303 	and.w	r3, r3, #3
 8003fee:	2b03      	cmp	r3, #3
 8003ff0:	d816      	bhi.n	8004020 <UART_SetConfig+0xbc>
 8003ff2:	a201      	add	r2, pc, #4	; (adr r2, 8003ff8 <UART_SetConfig+0x94>)
 8003ff4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ff8:	08004009 	.word	0x08004009
 8003ffc:	08004015 	.word	0x08004015
 8004000:	0800400f 	.word	0x0800400f
 8004004:	0800401b 	.word	0x0800401b
 8004008:	2301      	movs	r3, #1
 800400a:	77fb      	strb	r3, [r7, #31]
 800400c:	e151      	b.n	80042b2 <UART_SetConfig+0x34e>
 800400e:	2302      	movs	r3, #2
 8004010:	77fb      	strb	r3, [r7, #31]
 8004012:	e14e      	b.n	80042b2 <UART_SetConfig+0x34e>
 8004014:	2304      	movs	r3, #4
 8004016:	77fb      	strb	r3, [r7, #31]
 8004018:	e14b      	b.n	80042b2 <UART_SetConfig+0x34e>
 800401a:	2308      	movs	r3, #8
 800401c:	77fb      	strb	r3, [r7, #31]
 800401e:	e148      	b.n	80042b2 <UART_SetConfig+0x34e>
 8004020:	2310      	movs	r3, #16
 8004022:	77fb      	strb	r3, [r7, #31]
 8004024:	bf00      	nop
 8004026:	e144      	b.n	80042b2 <UART_SetConfig+0x34e>
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	4a8d      	ldr	r2, [pc, #564]	; (8004264 <UART_SetConfig+0x300>)
 800402e:	4293      	cmp	r3, r2
 8004030:	d134      	bne.n	800409c <UART_SetConfig+0x138>
 8004032:	4b8b      	ldr	r3, [pc, #556]	; (8004260 <UART_SetConfig+0x2fc>)
 8004034:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004038:	f003 030c 	and.w	r3, r3, #12
 800403c:	2b0c      	cmp	r3, #12
 800403e:	d829      	bhi.n	8004094 <UART_SetConfig+0x130>
 8004040:	a201      	add	r2, pc, #4	; (adr r2, 8004048 <UART_SetConfig+0xe4>)
 8004042:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004046:	bf00      	nop
 8004048:	0800407d 	.word	0x0800407d
 800404c:	08004095 	.word	0x08004095
 8004050:	08004095 	.word	0x08004095
 8004054:	08004095 	.word	0x08004095
 8004058:	08004089 	.word	0x08004089
 800405c:	08004095 	.word	0x08004095
 8004060:	08004095 	.word	0x08004095
 8004064:	08004095 	.word	0x08004095
 8004068:	08004083 	.word	0x08004083
 800406c:	08004095 	.word	0x08004095
 8004070:	08004095 	.word	0x08004095
 8004074:	08004095 	.word	0x08004095
 8004078:	0800408f 	.word	0x0800408f
 800407c:	2300      	movs	r3, #0
 800407e:	77fb      	strb	r3, [r7, #31]
 8004080:	e117      	b.n	80042b2 <UART_SetConfig+0x34e>
 8004082:	2302      	movs	r3, #2
 8004084:	77fb      	strb	r3, [r7, #31]
 8004086:	e114      	b.n	80042b2 <UART_SetConfig+0x34e>
 8004088:	2304      	movs	r3, #4
 800408a:	77fb      	strb	r3, [r7, #31]
 800408c:	e111      	b.n	80042b2 <UART_SetConfig+0x34e>
 800408e:	2308      	movs	r3, #8
 8004090:	77fb      	strb	r3, [r7, #31]
 8004092:	e10e      	b.n	80042b2 <UART_SetConfig+0x34e>
 8004094:	2310      	movs	r3, #16
 8004096:	77fb      	strb	r3, [r7, #31]
 8004098:	bf00      	nop
 800409a:	e10a      	b.n	80042b2 <UART_SetConfig+0x34e>
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	4a71      	ldr	r2, [pc, #452]	; (8004268 <UART_SetConfig+0x304>)
 80040a2:	4293      	cmp	r3, r2
 80040a4:	d120      	bne.n	80040e8 <UART_SetConfig+0x184>
 80040a6:	4b6e      	ldr	r3, [pc, #440]	; (8004260 <UART_SetConfig+0x2fc>)
 80040a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040ac:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80040b0:	2b10      	cmp	r3, #16
 80040b2:	d00f      	beq.n	80040d4 <UART_SetConfig+0x170>
 80040b4:	2b10      	cmp	r3, #16
 80040b6:	d802      	bhi.n	80040be <UART_SetConfig+0x15a>
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d005      	beq.n	80040c8 <UART_SetConfig+0x164>
 80040bc:	e010      	b.n	80040e0 <UART_SetConfig+0x17c>
 80040be:	2b20      	cmp	r3, #32
 80040c0:	d005      	beq.n	80040ce <UART_SetConfig+0x16a>
 80040c2:	2b30      	cmp	r3, #48	; 0x30
 80040c4:	d009      	beq.n	80040da <UART_SetConfig+0x176>
 80040c6:	e00b      	b.n	80040e0 <UART_SetConfig+0x17c>
 80040c8:	2300      	movs	r3, #0
 80040ca:	77fb      	strb	r3, [r7, #31]
 80040cc:	e0f1      	b.n	80042b2 <UART_SetConfig+0x34e>
 80040ce:	2302      	movs	r3, #2
 80040d0:	77fb      	strb	r3, [r7, #31]
 80040d2:	e0ee      	b.n	80042b2 <UART_SetConfig+0x34e>
 80040d4:	2304      	movs	r3, #4
 80040d6:	77fb      	strb	r3, [r7, #31]
 80040d8:	e0eb      	b.n	80042b2 <UART_SetConfig+0x34e>
 80040da:	2308      	movs	r3, #8
 80040dc:	77fb      	strb	r3, [r7, #31]
 80040de:	e0e8      	b.n	80042b2 <UART_SetConfig+0x34e>
 80040e0:	2310      	movs	r3, #16
 80040e2:	77fb      	strb	r3, [r7, #31]
 80040e4:	bf00      	nop
 80040e6:	e0e4      	b.n	80042b2 <UART_SetConfig+0x34e>
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	4a5f      	ldr	r2, [pc, #380]	; (800426c <UART_SetConfig+0x308>)
 80040ee:	4293      	cmp	r3, r2
 80040f0:	d120      	bne.n	8004134 <UART_SetConfig+0x1d0>
 80040f2:	4b5b      	ldr	r3, [pc, #364]	; (8004260 <UART_SetConfig+0x2fc>)
 80040f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040f8:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80040fc:	2b40      	cmp	r3, #64	; 0x40
 80040fe:	d00f      	beq.n	8004120 <UART_SetConfig+0x1bc>
 8004100:	2b40      	cmp	r3, #64	; 0x40
 8004102:	d802      	bhi.n	800410a <UART_SetConfig+0x1a6>
 8004104:	2b00      	cmp	r3, #0
 8004106:	d005      	beq.n	8004114 <UART_SetConfig+0x1b0>
 8004108:	e010      	b.n	800412c <UART_SetConfig+0x1c8>
 800410a:	2b80      	cmp	r3, #128	; 0x80
 800410c:	d005      	beq.n	800411a <UART_SetConfig+0x1b6>
 800410e:	2bc0      	cmp	r3, #192	; 0xc0
 8004110:	d009      	beq.n	8004126 <UART_SetConfig+0x1c2>
 8004112:	e00b      	b.n	800412c <UART_SetConfig+0x1c8>
 8004114:	2300      	movs	r3, #0
 8004116:	77fb      	strb	r3, [r7, #31]
 8004118:	e0cb      	b.n	80042b2 <UART_SetConfig+0x34e>
 800411a:	2302      	movs	r3, #2
 800411c:	77fb      	strb	r3, [r7, #31]
 800411e:	e0c8      	b.n	80042b2 <UART_SetConfig+0x34e>
 8004120:	2304      	movs	r3, #4
 8004122:	77fb      	strb	r3, [r7, #31]
 8004124:	e0c5      	b.n	80042b2 <UART_SetConfig+0x34e>
 8004126:	2308      	movs	r3, #8
 8004128:	77fb      	strb	r3, [r7, #31]
 800412a:	e0c2      	b.n	80042b2 <UART_SetConfig+0x34e>
 800412c:	2310      	movs	r3, #16
 800412e:	77fb      	strb	r3, [r7, #31]
 8004130:	bf00      	nop
 8004132:	e0be      	b.n	80042b2 <UART_SetConfig+0x34e>
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	4a4d      	ldr	r2, [pc, #308]	; (8004270 <UART_SetConfig+0x30c>)
 800413a:	4293      	cmp	r3, r2
 800413c:	d124      	bne.n	8004188 <UART_SetConfig+0x224>
 800413e:	4b48      	ldr	r3, [pc, #288]	; (8004260 <UART_SetConfig+0x2fc>)
 8004140:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004144:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004148:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800414c:	d012      	beq.n	8004174 <UART_SetConfig+0x210>
 800414e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004152:	d802      	bhi.n	800415a <UART_SetConfig+0x1f6>
 8004154:	2b00      	cmp	r3, #0
 8004156:	d007      	beq.n	8004168 <UART_SetConfig+0x204>
 8004158:	e012      	b.n	8004180 <UART_SetConfig+0x21c>
 800415a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800415e:	d006      	beq.n	800416e <UART_SetConfig+0x20a>
 8004160:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004164:	d009      	beq.n	800417a <UART_SetConfig+0x216>
 8004166:	e00b      	b.n	8004180 <UART_SetConfig+0x21c>
 8004168:	2300      	movs	r3, #0
 800416a:	77fb      	strb	r3, [r7, #31]
 800416c:	e0a1      	b.n	80042b2 <UART_SetConfig+0x34e>
 800416e:	2302      	movs	r3, #2
 8004170:	77fb      	strb	r3, [r7, #31]
 8004172:	e09e      	b.n	80042b2 <UART_SetConfig+0x34e>
 8004174:	2304      	movs	r3, #4
 8004176:	77fb      	strb	r3, [r7, #31]
 8004178:	e09b      	b.n	80042b2 <UART_SetConfig+0x34e>
 800417a:	2308      	movs	r3, #8
 800417c:	77fb      	strb	r3, [r7, #31]
 800417e:	e098      	b.n	80042b2 <UART_SetConfig+0x34e>
 8004180:	2310      	movs	r3, #16
 8004182:	77fb      	strb	r3, [r7, #31]
 8004184:	bf00      	nop
 8004186:	e094      	b.n	80042b2 <UART_SetConfig+0x34e>
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	4a39      	ldr	r2, [pc, #228]	; (8004274 <UART_SetConfig+0x310>)
 800418e:	4293      	cmp	r3, r2
 8004190:	d124      	bne.n	80041dc <UART_SetConfig+0x278>
 8004192:	4b33      	ldr	r3, [pc, #204]	; (8004260 <UART_SetConfig+0x2fc>)
 8004194:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004198:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800419c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80041a0:	d012      	beq.n	80041c8 <UART_SetConfig+0x264>
 80041a2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80041a6:	d802      	bhi.n	80041ae <UART_SetConfig+0x24a>
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d007      	beq.n	80041bc <UART_SetConfig+0x258>
 80041ac:	e012      	b.n	80041d4 <UART_SetConfig+0x270>
 80041ae:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80041b2:	d006      	beq.n	80041c2 <UART_SetConfig+0x25e>
 80041b4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80041b8:	d009      	beq.n	80041ce <UART_SetConfig+0x26a>
 80041ba:	e00b      	b.n	80041d4 <UART_SetConfig+0x270>
 80041bc:	2301      	movs	r3, #1
 80041be:	77fb      	strb	r3, [r7, #31]
 80041c0:	e077      	b.n	80042b2 <UART_SetConfig+0x34e>
 80041c2:	2302      	movs	r3, #2
 80041c4:	77fb      	strb	r3, [r7, #31]
 80041c6:	e074      	b.n	80042b2 <UART_SetConfig+0x34e>
 80041c8:	2304      	movs	r3, #4
 80041ca:	77fb      	strb	r3, [r7, #31]
 80041cc:	e071      	b.n	80042b2 <UART_SetConfig+0x34e>
 80041ce:	2308      	movs	r3, #8
 80041d0:	77fb      	strb	r3, [r7, #31]
 80041d2:	e06e      	b.n	80042b2 <UART_SetConfig+0x34e>
 80041d4:	2310      	movs	r3, #16
 80041d6:	77fb      	strb	r3, [r7, #31]
 80041d8:	bf00      	nop
 80041da:	e06a      	b.n	80042b2 <UART_SetConfig+0x34e>
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	4a25      	ldr	r2, [pc, #148]	; (8004278 <UART_SetConfig+0x314>)
 80041e2:	4293      	cmp	r3, r2
 80041e4:	d124      	bne.n	8004230 <UART_SetConfig+0x2cc>
 80041e6:	4b1e      	ldr	r3, [pc, #120]	; (8004260 <UART_SetConfig+0x2fc>)
 80041e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041ec:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80041f0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80041f4:	d012      	beq.n	800421c <UART_SetConfig+0x2b8>
 80041f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80041fa:	d802      	bhi.n	8004202 <UART_SetConfig+0x29e>
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d007      	beq.n	8004210 <UART_SetConfig+0x2ac>
 8004200:	e012      	b.n	8004228 <UART_SetConfig+0x2c4>
 8004202:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004206:	d006      	beq.n	8004216 <UART_SetConfig+0x2b2>
 8004208:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800420c:	d009      	beq.n	8004222 <UART_SetConfig+0x2be>
 800420e:	e00b      	b.n	8004228 <UART_SetConfig+0x2c4>
 8004210:	2300      	movs	r3, #0
 8004212:	77fb      	strb	r3, [r7, #31]
 8004214:	e04d      	b.n	80042b2 <UART_SetConfig+0x34e>
 8004216:	2302      	movs	r3, #2
 8004218:	77fb      	strb	r3, [r7, #31]
 800421a:	e04a      	b.n	80042b2 <UART_SetConfig+0x34e>
 800421c:	2304      	movs	r3, #4
 800421e:	77fb      	strb	r3, [r7, #31]
 8004220:	e047      	b.n	80042b2 <UART_SetConfig+0x34e>
 8004222:	2308      	movs	r3, #8
 8004224:	77fb      	strb	r3, [r7, #31]
 8004226:	e044      	b.n	80042b2 <UART_SetConfig+0x34e>
 8004228:	2310      	movs	r3, #16
 800422a:	77fb      	strb	r3, [r7, #31]
 800422c:	bf00      	nop
 800422e:	e040      	b.n	80042b2 <UART_SetConfig+0x34e>
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	4a11      	ldr	r2, [pc, #68]	; (800427c <UART_SetConfig+0x318>)
 8004236:	4293      	cmp	r3, r2
 8004238:	d139      	bne.n	80042ae <UART_SetConfig+0x34a>
 800423a:	4b09      	ldr	r3, [pc, #36]	; (8004260 <UART_SetConfig+0x2fc>)
 800423c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004240:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8004244:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004248:	d027      	beq.n	800429a <UART_SetConfig+0x336>
 800424a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800424e:	d817      	bhi.n	8004280 <UART_SetConfig+0x31c>
 8004250:	2b00      	cmp	r3, #0
 8004252:	d01c      	beq.n	800428e <UART_SetConfig+0x32a>
 8004254:	e027      	b.n	80042a6 <UART_SetConfig+0x342>
 8004256:	bf00      	nop
 8004258:	efff69f3 	.word	0xefff69f3
 800425c:	40011000 	.word	0x40011000
 8004260:	40023800 	.word	0x40023800
 8004264:	40004400 	.word	0x40004400
 8004268:	40004800 	.word	0x40004800
 800426c:	40004c00 	.word	0x40004c00
 8004270:	40005000 	.word	0x40005000
 8004274:	40011400 	.word	0x40011400
 8004278:	40007800 	.word	0x40007800
 800427c:	40007c00 	.word	0x40007c00
 8004280:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004284:	d006      	beq.n	8004294 <UART_SetConfig+0x330>
 8004286:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800428a:	d009      	beq.n	80042a0 <UART_SetConfig+0x33c>
 800428c:	e00b      	b.n	80042a6 <UART_SetConfig+0x342>
 800428e:	2300      	movs	r3, #0
 8004290:	77fb      	strb	r3, [r7, #31]
 8004292:	e00e      	b.n	80042b2 <UART_SetConfig+0x34e>
 8004294:	2302      	movs	r3, #2
 8004296:	77fb      	strb	r3, [r7, #31]
 8004298:	e00b      	b.n	80042b2 <UART_SetConfig+0x34e>
 800429a:	2304      	movs	r3, #4
 800429c:	77fb      	strb	r3, [r7, #31]
 800429e:	e008      	b.n	80042b2 <UART_SetConfig+0x34e>
 80042a0:	2308      	movs	r3, #8
 80042a2:	77fb      	strb	r3, [r7, #31]
 80042a4:	e005      	b.n	80042b2 <UART_SetConfig+0x34e>
 80042a6:	2310      	movs	r3, #16
 80042a8:	77fb      	strb	r3, [r7, #31]
 80042aa:	bf00      	nop
 80042ac:	e001      	b.n	80042b2 <UART_SetConfig+0x34e>
 80042ae:	2310      	movs	r3, #16
 80042b0:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	69db      	ldr	r3, [r3, #28]
 80042b6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80042ba:	d17c      	bne.n	80043b6 <UART_SetConfig+0x452>
  {
    switch (clocksource)
 80042bc:	7ffb      	ldrb	r3, [r7, #31]
 80042be:	2b08      	cmp	r3, #8
 80042c0:	d859      	bhi.n	8004376 <UART_SetConfig+0x412>
 80042c2:	a201      	add	r2, pc, #4	; (adr r2, 80042c8 <UART_SetConfig+0x364>)
 80042c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042c8:	080042ed 	.word	0x080042ed
 80042cc:	0800430b 	.word	0x0800430b
 80042d0:	08004329 	.word	0x08004329
 80042d4:	08004377 	.word	0x08004377
 80042d8:	08004341 	.word	0x08004341
 80042dc:	08004377 	.word	0x08004377
 80042e0:	08004377 	.word	0x08004377
 80042e4:	08004377 	.word	0x08004377
 80042e8:	0800435f 	.word	0x0800435f
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 80042ec:	f7ff f99e 	bl	800362c <HAL_RCC_GetPCLK1Freq>
 80042f0:	4603      	mov	r3, r0
 80042f2:	005a      	lsls	r2, r3, #1
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	685b      	ldr	r3, [r3, #4]
 80042f8:	085b      	lsrs	r3, r3, #1
 80042fa:	441a      	add	r2, r3
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	685b      	ldr	r3, [r3, #4]
 8004300:	fbb2 f3f3 	udiv	r3, r2, r3
 8004304:	b29b      	uxth	r3, r3
 8004306:	61bb      	str	r3, [r7, #24]
        break;
 8004308:	e038      	b.n	800437c <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 800430a:	f7ff f9a3 	bl	8003654 <HAL_RCC_GetPCLK2Freq>
 800430e:	4603      	mov	r3, r0
 8004310:	005a      	lsls	r2, r3, #1
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	685b      	ldr	r3, [r3, #4]
 8004316:	085b      	lsrs	r3, r3, #1
 8004318:	441a      	add	r2, r3
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	685b      	ldr	r3, [r3, #4]
 800431e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004322:	b29b      	uxth	r3, r3
 8004324:	61bb      	str	r3, [r7, #24]
        break;
 8004326:	e029      	b.n	800437c <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	685b      	ldr	r3, [r3, #4]
 800432c:	085a      	lsrs	r2, r3, #1
 800432e:	4b5d      	ldr	r3, [pc, #372]	; (80044a4 <UART_SetConfig+0x540>)
 8004330:	4413      	add	r3, r2
 8004332:	687a      	ldr	r2, [r7, #4]
 8004334:	6852      	ldr	r2, [r2, #4]
 8004336:	fbb3 f3f2 	udiv	r3, r3, r2
 800433a:	b29b      	uxth	r3, r3
 800433c:	61bb      	str	r3, [r7, #24]
        break;
 800433e:	e01d      	b.n	800437c <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8004340:	f7ff f890 	bl	8003464 <HAL_RCC_GetSysClockFreq>
 8004344:	4603      	mov	r3, r0
 8004346:	005a      	lsls	r2, r3, #1
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	685b      	ldr	r3, [r3, #4]
 800434c:	085b      	lsrs	r3, r3, #1
 800434e:	441a      	add	r2, r3
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	685b      	ldr	r3, [r3, #4]
 8004354:	fbb2 f3f3 	udiv	r3, r2, r3
 8004358:	b29b      	uxth	r3, r3
 800435a:	61bb      	str	r3, [r7, #24]
        break;
 800435c:	e00e      	b.n	800437c <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	685b      	ldr	r3, [r3, #4]
 8004362:	085b      	lsrs	r3, r3, #1
 8004364:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	685b      	ldr	r3, [r3, #4]
 800436c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004370:	b29b      	uxth	r3, r3
 8004372:	61bb      	str	r3, [r7, #24]
        break;
 8004374:	e002      	b.n	800437c <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8004376:	2301      	movs	r3, #1
 8004378:	75fb      	strb	r3, [r7, #23]
        break;
 800437a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800437c:	69bb      	ldr	r3, [r7, #24]
 800437e:	2b0f      	cmp	r3, #15
 8004380:	d916      	bls.n	80043b0 <UART_SetConfig+0x44c>
 8004382:	69bb      	ldr	r3, [r7, #24]
 8004384:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004388:	d212      	bcs.n	80043b0 <UART_SetConfig+0x44c>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800438a:	69bb      	ldr	r3, [r7, #24]
 800438c:	b29b      	uxth	r3, r3
 800438e:	f023 030f 	bic.w	r3, r3, #15
 8004392:	81fb      	strh	r3, [r7, #14]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004394:	69bb      	ldr	r3, [r7, #24]
 8004396:	085b      	lsrs	r3, r3, #1
 8004398:	b29b      	uxth	r3, r3
 800439a:	f003 0307 	and.w	r3, r3, #7
 800439e:	b29a      	uxth	r2, r3
 80043a0:	89fb      	ldrh	r3, [r7, #14]
 80043a2:	4313      	orrs	r3, r2
 80043a4:	81fb      	strh	r3, [r7, #14]
      huart->Instance->BRR = brrtemp;
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	89fa      	ldrh	r2, [r7, #14]
 80043ac:	60da      	str	r2, [r3, #12]
 80043ae:	e06e      	b.n	800448e <UART_SetConfig+0x52a>
    }
    else
    {
      ret = HAL_ERROR;
 80043b0:	2301      	movs	r3, #1
 80043b2:	75fb      	strb	r3, [r7, #23]
 80043b4:	e06b      	b.n	800448e <UART_SetConfig+0x52a>
    }
  }
  else
  {
    switch (clocksource)
 80043b6:	7ffb      	ldrb	r3, [r7, #31]
 80043b8:	2b08      	cmp	r3, #8
 80043ba:	d857      	bhi.n	800446c <UART_SetConfig+0x508>
 80043bc:	a201      	add	r2, pc, #4	; (adr r2, 80043c4 <UART_SetConfig+0x460>)
 80043be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043c2:	bf00      	nop
 80043c4:	080043e9 	.word	0x080043e9
 80043c8:	08004405 	.word	0x08004405
 80043cc:	08004421 	.word	0x08004421
 80043d0:	0800446d 	.word	0x0800446d
 80043d4:	08004439 	.word	0x08004439
 80043d8:	0800446d 	.word	0x0800446d
 80043dc:	0800446d 	.word	0x0800446d
 80043e0:	0800446d 	.word	0x0800446d
 80043e4:	08004455 	.word	0x08004455
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 80043e8:	f7ff f920 	bl	800362c <HAL_RCC_GetPCLK1Freq>
 80043ec:	4602      	mov	r2, r0
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	685b      	ldr	r3, [r3, #4]
 80043f2:	085b      	lsrs	r3, r3, #1
 80043f4:	441a      	add	r2, r3
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	685b      	ldr	r3, [r3, #4]
 80043fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80043fe:	b29b      	uxth	r3, r3
 8004400:	61bb      	str	r3, [r7, #24]
        break;
 8004402:	e036      	b.n	8004472 <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8004404:	f7ff f926 	bl	8003654 <HAL_RCC_GetPCLK2Freq>
 8004408:	4602      	mov	r2, r0
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	685b      	ldr	r3, [r3, #4]
 800440e:	085b      	lsrs	r3, r3, #1
 8004410:	441a      	add	r2, r3
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	685b      	ldr	r3, [r3, #4]
 8004416:	fbb2 f3f3 	udiv	r3, r2, r3
 800441a:	b29b      	uxth	r3, r3
 800441c:	61bb      	str	r3, [r7, #24]
        break;
 800441e:	e028      	b.n	8004472 <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	685b      	ldr	r3, [r3, #4]
 8004424:	085a      	lsrs	r2, r3, #1
 8004426:	4b20      	ldr	r3, [pc, #128]	; (80044a8 <UART_SetConfig+0x544>)
 8004428:	4413      	add	r3, r2
 800442a:	687a      	ldr	r2, [r7, #4]
 800442c:	6852      	ldr	r2, [r2, #4]
 800442e:	fbb3 f3f2 	udiv	r3, r3, r2
 8004432:	b29b      	uxth	r3, r3
 8004434:	61bb      	str	r3, [r7, #24]
        break;
 8004436:	e01c      	b.n	8004472 <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8004438:	f7ff f814 	bl	8003464 <HAL_RCC_GetSysClockFreq>
 800443c:	4602      	mov	r2, r0
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	685b      	ldr	r3, [r3, #4]
 8004442:	085b      	lsrs	r3, r3, #1
 8004444:	441a      	add	r2, r3
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	685b      	ldr	r3, [r3, #4]
 800444a:	fbb2 f3f3 	udiv	r3, r2, r3
 800444e:	b29b      	uxth	r3, r3
 8004450:	61bb      	str	r3, [r7, #24]
        break;
 8004452:	e00e      	b.n	8004472 <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	685b      	ldr	r3, [r3, #4]
 8004458:	085b      	lsrs	r3, r3, #1
 800445a:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	685b      	ldr	r3, [r3, #4]
 8004462:	fbb2 f3f3 	udiv	r3, r2, r3
 8004466:	b29b      	uxth	r3, r3
 8004468:	61bb      	str	r3, [r7, #24]
        break;
 800446a:	e002      	b.n	8004472 <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 800446c:	2301      	movs	r3, #1
 800446e:	75fb      	strb	r3, [r7, #23]
        break;
 8004470:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004472:	69bb      	ldr	r3, [r7, #24]
 8004474:	2b0f      	cmp	r3, #15
 8004476:	d908      	bls.n	800448a <UART_SetConfig+0x526>
 8004478:	69bb      	ldr	r3, [r7, #24]
 800447a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800447e:	d204      	bcs.n	800448a <UART_SetConfig+0x526>
    {
      huart->Instance->BRR = usartdiv;
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	69ba      	ldr	r2, [r7, #24]
 8004486:	60da      	str	r2, [r3, #12]
 8004488:	e001      	b.n	800448e <UART_SetConfig+0x52a>
    }
    else
    {
      ret = HAL_ERROR;
 800448a:	2301      	movs	r3, #1
 800448c:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	2200      	movs	r2, #0
 8004492:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	2200      	movs	r2, #0
 8004498:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 800449a:	7dfb      	ldrb	r3, [r7, #23]
}
 800449c:	4618      	mov	r0, r3
 800449e:	3720      	adds	r7, #32
 80044a0:	46bd      	mov	sp, r7
 80044a2:	bd80      	pop	{r7, pc}
 80044a4:	01e84800 	.word	0x01e84800
 80044a8:	00f42400 	.word	0x00f42400

080044ac <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80044ac:	b480      	push	{r7}
 80044ae:	b083      	sub	sp, #12
 80044b0:	af00      	add	r7, sp, #0
 80044b2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044b8:	f003 0301 	and.w	r3, r3, #1
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d00a      	beq.n	80044d6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	685b      	ldr	r3, [r3, #4]
 80044c6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	430a      	orrs	r2, r1
 80044d4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044da:	f003 0302 	and.w	r3, r3, #2
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d00a      	beq.n	80044f8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	685b      	ldr	r3, [r3, #4]
 80044e8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	430a      	orrs	r2, r1
 80044f6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044fc:	f003 0304 	and.w	r3, r3, #4
 8004500:	2b00      	cmp	r3, #0
 8004502:	d00a      	beq.n	800451a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	685b      	ldr	r3, [r3, #4]
 800450a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	430a      	orrs	r2, r1
 8004518:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800451e:	f003 0308 	and.w	r3, r3, #8
 8004522:	2b00      	cmp	r3, #0
 8004524:	d00a      	beq.n	800453c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	685b      	ldr	r3, [r3, #4]
 800452c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	430a      	orrs	r2, r1
 800453a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004540:	f003 0310 	and.w	r3, r3, #16
 8004544:	2b00      	cmp	r3, #0
 8004546:	d00a      	beq.n	800455e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	689b      	ldr	r3, [r3, #8]
 800454e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	430a      	orrs	r2, r1
 800455c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004562:	f003 0320 	and.w	r3, r3, #32
 8004566:	2b00      	cmp	r3, #0
 8004568:	d00a      	beq.n	8004580 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	689b      	ldr	r3, [r3, #8]
 8004570:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	430a      	orrs	r2, r1
 800457e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004584:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004588:	2b00      	cmp	r3, #0
 800458a:	d01a      	beq.n	80045c2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	685b      	ldr	r3, [r3, #4]
 8004592:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	430a      	orrs	r2, r1
 80045a0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045a6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80045aa:	d10a      	bne.n	80045c2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	685b      	ldr	r3, [r3, #4]
 80045b2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	430a      	orrs	r2, r1
 80045c0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d00a      	beq.n	80045e4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	685b      	ldr	r3, [r3, #4]
 80045d4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	430a      	orrs	r2, r1
 80045e2:	605a      	str	r2, [r3, #4]
  }
}
 80045e4:	bf00      	nop
 80045e6:	370c      	adds	r7, #12
 80045e8:	46bd      	mov	sp, r7
 80045ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ee:	4770      	bx	lr

080045f0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80045f0:	b580      	push	{r7, lr}
 80045f2:	b086      	sub	sp, #24
 80045f4:	af02      	add	r7, sp, #8
 80045f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	2200      	movs	r2, #0
 80045fc:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 80045fe:	f7fc fd6b 	bl	80010d8 <HAL_GetTick>
 8004602:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	f003 0308 	and.w	r3, r3, #8
 800460e:	2b08      	cmp	r3, #8
 8004610:	d10e      	bne.n	8004630 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004612:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004616:	9300      	str	r3, [sp, #0]
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	2200      	movs	r2, #0
 800461c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004620:	6878      	ldr	r0, [r7, #4]
 8004622:	f000 f814 	bl	800464e <UART_WaitOnFlagUntilTimeout>
 8004626:	4603      	mov	r3, r0
 8004628:	2b00      	cmp	r3, #0
 800462a:	d001      	beq.n	8004630 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800462c:	2303      	movs	r3, #3
 800462e:	e00a      	b.n	8004646 <UART_CheckIdleState+0x56>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	2220      	movs	r2, #32
 8004634:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	2220      	movs	r2, #32
 800463a:	679a      	str	r2, [r3, #120]	; 0x78

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	2200      	movs	r2, #0
 8004640:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8004644:	2300      	movs	r3, #0
}
 8004646:	4618      	mov	r0, r3
 8004648:	3710      	adds	r7, #16
 800464a:	46bd      	mov	sp, r7
 800464c:	bd80      	pop	{r7, pc}

0800464e <UART_WaitOnFlagUntilTimeout>:
  * @param Tickstart Tick start value
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800464e:	b580      	push	{r7, lr}
 8004650:	b084      	sub	sp, #16
 8004652:	af00      	add	r7, sp, #0
 8004654:	60f8      	str	r0, [r7, #12]
 8004656:	60b9      	str	r1, [r7, #8]
 8004658:	603b      	str	r3, [r7, #0]
 800465a:	4613      	mov	r3, r2
 800465c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800465e:	e02a      	b.n	80046b6 <UART_WaitOnFlagUntilTimeout+0x68>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004660:	69bb      	ldr	r3, [r7, #24]
 8004662:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004666:	d026      	beq.n	80046b6 <UART_WaitOnFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004668:	f7fc fd36 	bl	80010d8 <HAL_GetTick>
 800466c:	4602      	mov	r2, r0
 800466e:	683b      	ldr	r3, [r7, #0]
 8004670:	1ad3      	subs	r3, r2, r3
 8004672:	69ba      	ldr	r2, [r7, #24]
 8004674:	429a      	cmp	r2, r3
 8004676:	d302      	bcc.n	800467e <UART_WaitOnFlagUntilTimeout+0x30>
 8004678:	69bb      	ldr	r3, [r7, #24]
 800467a:	2b00      	cmp	r3, #0
 800467c:	d11b      	bne.n	80046b6 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	681a      	ldr	r2, [r3, #0]
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800468c:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	689a      	ldr	r2, [r3, #8]
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	f022 0201 	bic.w	r2, r2, #1
 800469c:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	2220      	movs	r2, #32
 80046a2:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	2220      	movs	r2, #32
 80046a8:	679a      	str	r2, [r3, #120]	; 0x78

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	2200      	movs	r2, #0
 80046ae:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 80046b2:	2303      	movs	r3, #3
 80046b4:	e00f      	b.n	80046d6 <UART_WaitOnFlagUntilTimeout+0x88>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	69da      	ldr	r2, [r3, #28]
 80046bc:	68bb      	ldr	r3, [r7, #8]
 80046be:	4013      	ands	r3, r2
 80046c0:	68ba      	ldr	r2, [r7, #8]
 80046c2:	429a      	cmp	r2, r3
 80046c4:	bf0c      	ite	eq
 80046c6:	2301      	moveq	r3, #1
 80046c8:	2300      	movne	r3, #0
 80046ca:	b2db      	uxtb	r3, r3
 80046cc:	461a      	mov	r2, r3
 80046ce:	79fb      	ldrb	r3, [r7, #7]
 80046d0:	429a      	cmp	r2, r3
 80046d2:	d0c5      	beq.n	8004660 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80046d4:	2300      	movs	r3, #0
}
 80046d6:	4618      	mov	r0, r3
 80046d8:	3710      	adds	r7, #16
 80046da:	46bd      	mov	sp, r7
 80046dc:	bd80      	pop	{r7, pc}
	...

080046e0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80046e0:	b084      	sub	sp, #16
 80046e2:	b580      	push	{r7, lr}
 80046e4:	b084      	sub	sp, #16
 80046e6:	af00      	add	r7, sp, #0
 80046e8:	6078      	str	r0, [r7, #4]
 80046ea:	f107 001c 	add.w	r0, r7, #28
 80046ee:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80046f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046f4:	2b01      	cmp	r3, #1
 80046f6:	d120      	bne.n	800473a <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046fc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	68da      	ldr	r2, [r3, #12]
 8004708:	4b20      	ldr	r3, [pc, #128]	; (800478c <USB_CoreInit+0xac>)
 800470a:	4013      	ands	r3, r2
 800470c:	687a      	ldr	r2, [r7, #4]
 800470e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	68db      	ldr	r3, [r3, #12]
 8004714:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800471c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800471e:	2b01      	cmp	r3, #1
 8004720:	d105      	bne.n	800472e <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	68db      	ldr	r3, [r3, #12]
 8004726:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 800472e:	6878      	ldr	r0, [r7, #4]
 8004730:	f000 fa60 	bl	8004bf4 <USB_CoreReset>
 8004734:	4603      	mov	r3, r0
 8004736:	73fb      	strb	r3, [r7, #15]
 8004738:	e010      	b.n	800475c <USB_CoreInit+0x7c>
  }
#endif
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	68db      	ldr	r3, [r3, #12]
 800473e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 8004746:	6878      	ldr	r0, [r7, #4]
 8004748:	f000 fa54 	bl	8004bf4 <USB_CoreReset>
 800474c:	4603      	mov	r3, r0
 800474e:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004754:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 800475c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800475e:	2b01      	cmp	r3, #1
 8004760:	d10b      	bne.n	800477a <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	689b      	ldr	r3, [r3, #8]
 8004766:	f043 0206 	orr.w	r2, r3, #6
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	689b      	ldr	r3, [r3, #8]
 8004772:	f043 0220 	orr.w	r2, r3, #32
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800477a:	7bfb      	ldrb	r3, [r7, #15]
}
 800477c:	4618      	mov	r0, r3
 800477e:	3710      	adds	r7, #16
 8004780:	46bd      	mov	sp, r7
 8004782:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004786:	b004      	add	sp, #16
 8004788:	4770      	bx	lr
 800478a:	bf00      	nop
 800478c:	ffbdffbf 	.word	0xffbdffbf

08004790 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004790:	b480      	push	{r7}
 8004792:	b083      	sub	sp, #12
 8004794:	af00      	add	r7, sp, #0
 8004796:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	689b      	ldr	r3, [r3, #8]
 800479c:	f023 0201 	bic.w	r2, r3, #1
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80047a4:	2300      	movs	r3, #0
}
 80047a6:	4618      	mov	r0, r3
 80047a8:	370c      	adds	r7, #12
 80047aa:	46bd      	mov	sp, r7
 80047ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b0:	4770      	bx	lr

080047b2 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80047b2:	b580      	push	{r7, lr}
 80047b4:	b082      	sub	sp, #8
 80047b6:	af00      	add	r7, sp, #0
 80047b8:	6078      	str	r0, [r7, #4]
 80047ba:	460b      	mov	r3, r1
 80047bc:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	68db      	ldr	r3, [r3, #12]
 80047c2:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80047ca:	78fb      	ldrb	r3, [r7, #3]
 80047cc:	2b01      	cmp	r3, #1
 80047ce:	d106      	bne.n	80047de <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	68db      	ldr	r3, [r3, #12]
 80047d4:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	60da      	str	r2, [r3, #12]
 80047dc:	e00b      	b.n	80047f6 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 80047de:	78fb      	ldrb	r3, [r7, #3]
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d106      	bne.n	80047f2 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	68db      	ldr	r3, [r3, #12]
 80047e8:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	60da      	str	r2, [r3, #12]
 80047f0:	e001      	b.n	80047f6 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 80047f2:	2301      	movs	r3, #1
 80047f4:	e003      	b.n	80047fe <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 80047f6:	2032      	movs	r0, #50	; 0x32
 80047f8:	f7fc fc7a 	bl	80010f0 <HAL_Delay>

  return HAL_OK;
 80047fc:	2300      	movs	r3, #0
}
 80047fe:	4618      	mov	r0, r3
 8004800:	3708      	adds	r7, #8
 8004802:	46bd      	mov	sp, r7
 8004804:	bd80      	pop	{r7, pc}
	...

08004808 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004808:	b084      	sub	sp, #16
 800480a:	b580      	push	{r7, lr}
 800480c:	b086      	sub	sp, #24
 800480e:	af00      	add	r7, sp, #0
 8004810:	6078      	str	r0, [r7, #4]
 8004812:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8004816:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800481a:	2300      	movs	r3, #0
 800481c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004822:	2300      	movs	r3, #0
 8004824:	613b      	str	r3, [r7, #16]
 8004826:	e009      	b.n	800483c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004828:	687a      	ldr	r2, [r7, #4]
 800482a:	693b      	ldr	r3, [r7, #16]
 800482c:	3340      	adds	r3, #64	; 0x40
 800482e:	009b      	lsls	r3, r3, #2
 8004830:	4413      	add	r3, r2
 8004832:	2200      	movs	r2, #0
 8004834:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8004836:	693b      	ldr	r3, [r7, #16]
 8004838:	3301      	adds	r3, #1
 800483a:	613b      	str	r3, [r7, #16]
 800483c:	693b      	ldr	r3, [r7, #16]
 800483e:	2b0e      	cmp	r3, #14
 8004840:	d9f2      	bls.n	8004828 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004842:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004844:	2b00      	cmp	r3, #0
 8004846:	d112      	bne.n	800486e <USB_DevInit+0x66>
  {
    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800484c:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	601a      	str	r2, [r3, #0]
 800486c:	e005      	b.n	800487a <USB_DevInit+0x72>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004872:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004880:	461a      	mov	r2, r3
 8004882:	2300      	movs	r3, #0
 8004884:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800488c:	4619      	mov	r1, r3
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004894:	461a      	mov	r2, r3
 8004896:	680b      	ldr	r3, [r1, #0]
 8004898:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800489a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800489c:	2b01      	cmp	r3, #1
 800489e:	d10c      	bne.n	80048ba <USB_DevInit+0xb2>
  {
    if (cfg.speed == USB_OTG_SPEED_HIGH)
 80048a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d104      	bne.n	80048b0 <USB_DevInit+0xa8>
    {
      /* Set High speed phy */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80048a6:	2100      	movs	r1, #0
 80048a8:	6878      	ldr	r0, [r7, #4]
 80048aa:	f000 f971 	bl	8004b90 <USB_SetDevSpeed>
 80048ae:	e018      	b.n	80048e2 <USB_DevInit+0xda>
    }
    else
    {
      /* set High speed phy in Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80048b0:	2101      	movs	r1, #1
 80048b2:	6878      	ldr	r0, [r7, #4]
 80048b4:	f000 f96c 	bl	8004b90 <USB_SetDevSpeed>
 80048b8:	e013      	b.n	80048e2 <USB_DevInit+0xda>
    }
  }
  else if (cfg.phy_itface == USB_OTG_HS_EMBEDDED_PHY)
 80048ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048bc:	2b03      	cmp	r3, #3
 80048be:	d10c      	bne.n	80048da <USB_DevInit+0xd2>
  {
    if (cfg.speed == USB_OTG_SPEED_HIGH)
 80048c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d104      	bne.n	80048d0 <USB_DevInit+0xc8>
    {
      /* Set High speed phy */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80048c6:	2100      	movs	r1, #0
 80048c8:	6878      	ldr	r0, [r7, #4]
 80048ca:	f000 f961 	bl	8004b90 <USB_SetDevSpeed>
 80048ce:	e008      	b.n	80048e2 <USB_DevInit+0xda>
    }
    else
    {
      /* set High speed phy in Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80048d0:	2101      	movs	r1, #1
 80048d2:	6878      	ldr	r0, [r7, #4]
 80048d4:	f000 f95c 	bl	8004b90 <USB_SetDevSpeed>
 80048d8:	e003      	b.n	80048e2 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Full speed phy */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80048da:	2103      	movs	r1, #3
 80048dc:	6878      	ldr	r0, [r7, #4]
 80048de:	f000 f957 	bl	8004b90 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80048e2:	2110      	movs	r1, #16
 80048e4:	6878      	ldr	r0, [r7, #4]
 80048e6:	f000 f90b 	bl	8004b00 <USB_FlushTxFifo>
 80048ea:	4603      	mov	r3, r0
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d001      	beq.n	80048f4 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 80048f0:	2301      	movs	r3, #1
 80048f2:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80048f4:	6878      	ldr	r0, [r7, #4]
 80048f6:	f000 f929 	bl	8004b4c <USB_FlushRxFifo>
 80048fa:	4603      	mov	r3, r0
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d001      	beq.n	8004904 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8004900:	2301      	movs	r3, #1
 8004902:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800490a:	461a      	mov	r2, r3
 800490c:	2300      	movs	r3, #0
 800490e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004916:	461a      	mov	r2, r3
 8004918:	2300      	movs	r3, #0
 800491a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004922:	461a      	mov	r2, r3
 8004924:	2300      	movs	r3, #0
 8004926:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004928:	2300      	movs	r3, #0
 800492a:	613b      	str	r3, [r7, #16]
 800492c:	e043      	b.n	80049b6 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800492e:	693b      	ldr	r3, [r7, #16]
 8004930:	015a      	lsls	r2, r3, #5
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	4413      	add	r3, r2
 8004936:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004940:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004944:	d118      	bne.n	8004978 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8004946:	693b      	ldr	r3, [r7, #16]
 8004948:	2b00      	cmp	r3, #0
 800494a:	d10a      	bne.n	8004962 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800494c:	693b      	ldr	r3, [r7, #16]
 800494e:	015a      	lsls	r2, r3, #5
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	4413      	add	r3, r2
 8004954:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004958:	461a      	mov	r2, r3
 800495a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800495e:	6013      	str	r3, [r2, #0]
 8004960:	e013      	b.n	800498a <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004962:	693b      	ldr	r3, [r7, #16]
 8004964:	015a      	lsls	r2, r3, #5
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	4413      	add	r3, r2
 800496a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800496e:	461a      	mov	r2, r3
 8004970:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004974:	6013      	str	r3, [r2, #0]
 8004976:	e008      	b.n	800498a <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004978:	693b      	ldr	r3, [r7, #16]
 800497a:	015a      	lsls	r2, r3, #5
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	4413      	add	r3, r2
 8004980:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004984:	461a      	mov	r2, r3
 8004986:	2300      	movs	r3, #0
 8004988:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800498a:	693b      	ldr	r3, [r7, #16]
 800498c:	015a      	lsls	r2, r3, #5
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	4413      	add	r3, r2
 8004992:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004996:	461a      	mov	r2, r3
 8004998:	2300      	movs	r3, #0
 800499a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800499c:	693b      	ldr	r3, [r7, #16]
 800499e:	015a      	lsls	r2, r3, #5
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	4413      	add	r3, r2
 80049a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80049a8:	461a      	mov	r2, r3
 80049aa:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80049ae:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80049b0:	693b      	ldr	r3, [r7, #16]
 80049b2:	3301      	adds	r3, #1
 80049b4:	613b      	str	r3, [r7, #16]
 80049b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049b8:	693a      	ldr	r2, [r7, #16]
 80049ba:	429a      	cmp	r2, r3
 80049bc:	d3b7      	bcc.n	800492e <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80049be:	2300      	movs	r3, #0
 80049c0:	613b      	str	r3, [r7, #16]
 80049c2:	e043      	b.n	8004a4c <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80049c4:	693b      	ldr	r3, [r7, #16]
 80049c6:	015a      	lsls	r2, r3, #5
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	4413      	add	r3, r2
 80049cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80049d6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80049da:	d118      	bne.n	8004a0e <USB_DevInit+0x206>
    {
      if (i == 0U)
 80049dc:	693b      	ldr	r3, [r7, #16]
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d10a      	bne.n	80049f8 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80049e2:	693b      	ldr	r3, [r7, #16]
 80049e4:	015a      	lsls	r2, r3, #5
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	4413      	add	r3, r2
 80049ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049ee:	461a      	mov	r2, r3
 80049f0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80049f4:	6013      	str	r3, [r2, #0]
 80049f6:	e013      	b.n	8004a20 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80049f8:	693b      	ldr	r3, [r7, #16]
 80049fa:	015a      	lsls	r2, r3, #5
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	4413      	add	r3, r2
 8004a00:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a04:	461a      	mov	r2, r3
 8004a06:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004a0a:	6013      	str	r3, [r2, #0]
 8004a0c:	e008      	b.n	8004a20 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004a0e:	693b      	ldr	r3, [r7, #16]
 8004a10:	015a      	lsls	r2, r3, #5
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	4413      	add	r3, r2
 8004a16:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a1a:	461a      	mov	r2, r3
 8004a1c:	2300      	movs	r3, #0
 8004a1e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004a20:	693b      	ldr	r3, [r7, #16]
 8004a22:	015a      	lsls	r2, r3, #5
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	4413      	add	r3, r2
 8004a28:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a2c:	461a      	mov	r2, r3
 8004a2e:	2300      	movs	r3, #0
 8004a30:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004a32:	693b      	ldr	r3, [r7, #16]
 8004a34:	015a      	lsls	r2, r3, #5
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	4413      	add	r3, r2
 8004a3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a3e:	461a      	mov	r2, r3
 8004a40:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004a44:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004a46:	693b      	ldr	r3, [r7, #16]
 8004a48:	3301      	adds	r3, #1
 8004a4a:	613b      	str	r3, [r7, #16]
 8004a4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a4e:	693a      	ldr	r2, [r7, #16]
 8004a50:	429a      	cmp	r2, r3
 8004a52:	d3b7      	bcc.n	80049c4 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a5a:	691b      	ldr	r3, [r3, #16]
 8004a5c:	68fa      	ldr	r2, [r7, #12]
 8004a5e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004a62:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004a66:	6113      	str	r3, [r2, #16]

  if (cfg.dma_enable == 1U)
 8004a68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a6a:	2b01      	cmp	r3, #1
 8004a6c:	d110      	bne.n	8004a90 <USB_DevInit+0x288>
  {
    /*Set threshold parameters */
    USBx_DEVICE->DTHRCTL = USB_OTG_DTHRCTL_TXTHRLEN_6 |
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a74:	461a      	mov	r2, r3
 8004a76:	4b1e      	ldr	r3, [pc, #120]	; (8004af0 <USB_DevInit+0x2e8>)
 8004a78:	6313      	str	r3, [r2, #48]	; 0x30
                           USB_OTG_DTHRCTL_RXTHRLEN_6;

    USBx_DEVICE->DTHRCTL |= USB_OTG_DTHRCTL_RXTHREN |
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a80:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a88:	4619      	mov	r1, r3
 8004a8a:	4b1a      	ldr	r3, [pc, #104]	; (8004af4 <USB_DevInit+0x2ec>)
 8004a8c:	4313      	orrs	r3, r2
 8004a8e:	630b      	str	r3, [r1, #48]	; 0x30
                            USB_OTG_DTHRCTL_ISOTHREN |
                            USB_OTG_DTHRCTL_NONISOTHREN;
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	2200      	movs	r2, #0
 8004a94:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8004a9c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004a9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d105      	bne.n	8004ab0 <USB_DevInit+0x2a8>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	699b      	ldr	r3, [r3, #24]
 8004aa8:	f043 0210 	orr.w	r2, r3, #16
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	699a      	ldr	r2, [r3, #24]
 8004ab4:	4b10      	ldr	r3, [pc, #64]	; (8004af8 <USB_DevInit+0x2f0>)
 8004ab6:	4313      	orrs	r3, r2
 8004ab8:	687a      	ldr	r2, [r7, #4]
 8004aba:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004abc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d005      	beq.n	8004ace <USB_DevInit+0x2c6>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	699b      	ldr	r3, [r3, #24]
 8004ac6:	f043 0208 	orr.w	r2, r3, #8
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004ace:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004ad0:	2b01      	cmp	r3, #1
 8004ad2:	d105      	bne.n	8004ae0 <USB_DevInit+0x2d8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	699a      	ldr	r2, [r3, #24]
 8004ad8:	4b08      	ldr	r3, [pc, #32]	; (8004afc <USB_DevInit+0x2f4>)
 8004ada:	4313      	orrs	r3, r2
 8004adc:	687a      	ldr	r2, [r7, #4]
 8004ade:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004ae0:	7dfb      	ldrb	r3, [r7, #23]
}
 8004ae2:	4618      	mov	r0, r3
 8004ae4:	3718      	adds	r7, #24
 8004ae6:	46bd      	mov	sp, r7
 8004ae8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004aec:	b004      	add	sp, #16
 8004aee:	4770      	bx	lr
 8004af0:	00800100 	.word	0x00800100
 8004af4:	00010003 	.word	0x00010003
 8004af8:	803c3800 	.word	0x803c3800
 8004afc:	40000004 	.word	0x40000004

08004b00 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004b00:	b480      	push	{r7}
 8004b02:	b085      	sub	sp, #20
 8004b04:	af00      	add	r7, sp, #0
 8004b06:	6078      	str	r0, [r7, #4]
 8004b08:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8004b0a:	2300      	movs	r3, #0
 8004b0c:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004b0e:	683b      	ldr	r3, [r7, #0]
 8004b10:	019b      	lsls	r3, r3, #6
 8004b12:	f043 0220 	orr.w	r2, r3, #32
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	3301      	adds	r3, #1
 8004b1e:	60fb      	str	r3, [r7, #12]
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	4a09      	ldr	r2, [pc, #36]	; (8004b48 <USB_FlushTxFifo+0x48>)
 8004b24:	4293      	cmp	r3, r2
 8004b26:	d901      	bls.n	8004b2c <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8004b28:	2303      	movs	r3, #3
 8004b2a:	e006      	b.n	8004b3a <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	691b      	ldr	r3, [r3, #16]
 8004b30:	f003 0320 	and.w	r3, r3, #32
 8004b34:	2b20      	cmp	r3, #32
 8004b36:	d0f0      	beq.n	8004b1a <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8004b38:	2300      	movs	r3, #0
}
 8004b3a:	4618      	mov	r0, r3
 8004b3c:	3714      	adds	r7, #20
 8004b3e:	46bd      	mov	sp, r7
 8004b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b44:	4770      	bx	lr
 8004b46:	bf00      	nop
 8004b48:	00030d40 	.word	0x00030d40

08004b4c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004b4c:	b480      	push	{r7}
 8004b4e:	b085      	sub	sp, #20
 8004b50:	af00      	add	r7, sp, #0
 8004b52:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8004b54:	2300      	movs	r3, #0
 8004b56:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	2210      	movs	r2, #16
 8004b5c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	3301      	adds	r3, #1
 8004b62:	60fb      	str	r3, [r7, #12]
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	4a09      	ldr	r2, [pc, #36]	; (8004b8c <USB_FlushRxFifo+0x40>)
 8004b68:	4293      	cmp	r3, r2
 8004b6a:	d901      	bls.n	8004b70 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8004b6c:	2303      	movs	r3, #3
 8004b6e:	e006      	b.n	8004b7e <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	691b      	ldr	r3, [r3, #16]
 8004b74:	f003 0310 	and.w	r3, r3, #16
 8004b78:	2b10      	cmp	r3, #16
 8004b7a:	d0f0      	beq.n	8004b5e <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8004b7c:	2300      	movs	r3, #0
}
 8004b7e:	4618      	mov	r0, r3
 8004b80:	3714      	adds	r7, #20
 8004b82:	46bd      	mov	sp, r7
 8004b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b88:	4770      	bx	lr
 8004b8a:	bf00      	nop
 8004b8c:	00030d40 	.word	0x00030d40

08004b90 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004b90:	b480      	push	{r7}
 8004b92:	b085      	sub	sp, #20
 8004b94:	af00      	add	r7, sp, #0
 8004b96:	6078      	str	r0, [r7, #4]
 8004b98:	460b      	mov	r3, r1
 8004b9a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ba6:	681a      	ldr	r2, [r3, #0]
 8004ba8:	78fb      	ldrb	r3, [r7, #3]
 8004baa:	68f9      	ldr	r1, [r7, #12]
 8004bac:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004bb0:	4313      	orrs	r3, r2
 8004bb2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004bb4:	2300      	movs	r3, #0
}
 8004bb6:	4618      	mov	r0, r3
 8004bb8:	3714      	adds	r7, #20
 8004bba:	46bd      	mov	sp, r7
 8004bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc0:	4770      	bx	lr

08004bc2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8004bc2:	b580      	push	{r7, lr}
 8004bc4:	b084      	sub	sp, #16
 8004bc6:	af00      	add	r7, sp, #0
 8004bc8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004bd4:	685b      	ldr	r3, [r3, #4]
 8004bd6:	68fa      	ldr	r2, [r7, #12]
 8004bd8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004bdc:	f043 0302 	orr.w	r3, r3, #2
 8004be0:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 8004be2:	2003      	movs	r0, #3
 8004be4:	f7fc fa84 	bl	80010f0 <HAL_Delay>

  return HAL_OK;
 8004be8:	2300      	movs	r3, #0
}
 8004bea:	4618      	mov	r0, r3
 8004bec:	3710      	adds	r7, #16
 8004bee:	46bd      	mov	sp, r7
 8004bf0:	bd80      	pop	{r7, pc}
	...

08004bf4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004bf4:	b480      	push	{r7}
 8004bf6:	b085      	sub	sp, #20
 8004bf8:	af00      	add	r7, sp, #0
 8004bfa:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8004bfc:	2300      	movs	r3, #0
 8004bfe:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	3301      	adds	r3, #1
 8004c04:	60fb      	str	r3, [r7, #12]
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	4a13      	ldr	r2, [pc, #76]	; (8004c58 <USB_CoreReset+0x64>)
 8004c0a:	4293      	cmp	r3, r2
 8004c0c:	d901      	bls.n	8004c12 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8004c0e:	2303      	movs	r3, #3
 8004c10:	e01b      	b.n	8004c4a <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	691b      	ldr	r3, [r3, #16]
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	daf2      	bge.n	8004c00 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004c1a:	2300      	movs	r3, #0
 8004c1c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	691b      	ldr	r3, [r3, #16]
 8004c22:	f043 0201 	orr.w	r2, r3, #1
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	3301      	adds	r3, #1
 8004c2e:	60fb      	str	r3, [r7, #12]
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	4a09      	ldr	r2, [pc, #36]	; (8004c58 <USB_CoreReset+0x64>)
 8004c34:	4293      	cmp	r3, r2
 8004c36:	d901      	bls.n	8004c3c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8004c38:	2303      	movs	r3, #3
 8004c3a:	e006      	b.n	8004c4a <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	691b      	ldr	r3, [r3, #16]
 8004c40:	f003 0301 	and.w	r3, r3, #1
 8004c44:	2b01      	cmp	r3, #1
 8004c46:	d0f0      	beq.n	8004c2a <USB_CoreReset+0x36>

  return HAL_OK;
 8004c48:	2300      	movs	r3, #0
}
 8004c4a:	4618      	mov	r0, r3
 8004c4c:	3714      	adds	r7, #20
 8004c4e:	46bd      	mov	sp, r7
 8004c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c54:	4770      	bx	lr
 8004c56:	bf00      	nop
 8004c58:	00030d40 	.word	0x00030d40

08004c5c <__errno>:
 8004c5c:	4b01      	ldr	r3, [pc, #4]	; (8004c64 <__errno+0x8>)
 8004c5e:	6818      	ldr	r0, [r3, #0]
 8004c60:	4770      	bx	lr
 8004c62:	bf00      	nop
 8004c64:	2000000c 	.word	0x2000000c

08004c68 <__libc_init_array>:
 8004c68:	b570      	push	{r4, r5, r6, lr}
 8004c6a:	4e0d      	ldr	r6, [pc, #52]	; (8004ca0 <__libc_init_array+0x38>)
 8004c6c:	4c0d      	ldr	r4, [pc, #52]	; (8004ca4 <__libc_init_array+0x3c>)
 8004c6e:	1ba4      	subs	r4, r4, r6
 8004c70:	10a4      	asrs	r4, r4, #2
 8004c72:	2500      	movs	r5, #0
 8004c74:	42a5      	cmp	r5, r4
 8004c76:	d109      	bne.n	8004c8c <__libc_init_array+0x24>
 8004c78:	4e0b      	ldr	r6, [pc, #44]	; (8004ca8 <__libc_init_array+0x40>)
 8004c7a:	4c0c      	ldr	r4, [pc, #48]	; (8004cac <__libc_init_array+0x44>)
 8004c7c:	f001 fcba 	bl	80065f4 <_init>
 8004c80:	1ba4      	subs	r4, r4, r6
 8004c82:	10a4      	asrs	r4, r4, #2
 8004c84:	2500      	movs	r5, #0
 8004c86:	42a5      	cmp	r5, r4
 8004c88:	d105      	bne.n	8004c96 <__libc_init_array+0x2e>
 8004c8a:	bd70      	pop	{r4, r5, r6, pc}
 8004c8c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004c90:	4798      	blx	r3
 8004c92:	3501      	adds	r5, #1
 8004c94:	e7ee      	b.n	8004c74 <__libc_init_array+0xc>
 8004c96:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004c9a:	4798      	blx	r3
 8004c9c:	3501      	adds	r5, #1
 8004c9e:	e7f2      	b.n	8004c86 <__libc_init_array+0x1e>
 8004ca0:	08006858 	.word	0x08006858
 8004ca4:	08006858 	.word	0x08006858
 8004ca8:	08006858 	.word	0x08006858
 8004cac:	0800685c 	.word	0x0800685c

08004cb0 <memset>:
 8004cb0:	4402      	add	r2, r0
 8004cb2:	4603      	mov	r3, r0
 8004cb4:	4293      	cmp	r3, r2
 8004cb6:	d100      	bne.n	8004cba <memset+0xa>
 8004cb8:	4770      	bx	lr
 8004cba:	f803 1b01 	strb.w	r1, [r3], #1
 8004cbe:	e7f9      	b.n	8004cb4 <memset+0x4>

08004cc0 <__cvt>:
 8004cc0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004cc2:	ed2d 8b02 	vpush	{d8}
 8004cc6:	eeb0 8b40 	vmov.f64	d8, d0
 8004cca:	b085      	sub	sp, #20
 8004ccc:	4617      	mov	r7, r2
 8004cce:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8004cd0:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8004cd2:	ee18 2a90 	vmov	r2, s17
 8004cd6:	f025 0520 	bic.w	r5, r5, #32
 8004cda:	2a00      	cmp	r2, #0
 8004cdc:	bfb6      	itet	lt
 8004cde:	222d      	movlt	r2, #45	; 0x2d
 8004ce0:	2200      	movge	r2, #0
 8004ce2:	eeb1 8b40 	vneglt.f64	d8, d0
 8004ce6:	2d46      	cmp	r5, #70	; 0x46
 8004ce8:	460c      	mov	r4, r1
 8004cea:	701a      	strb	r2, [r3, #0]
 8004cec:	d004      	beq.n	8004cf8 <__cvt+0x38>
 8004cee:	2d45      	cmp	r5, #69	; 0x45
 8004cf0:	d100      	bne.n	8004cf4 <__cvt+0x34>
 8004cf2:	3401      	adds	r4, #1
 8004cf4:	2102      	movs	r1, #2
 8004cf6:	e000      	b.n	8004cfa <__cvt+0x3a>
 8004cf8:	2103      	movs	r1, #3
 8004cfa:	ab03      	add	r3, sp, #12
 8004cfc:	9301      	str	r3, [sp, #4]
 8004cfe:	ab02      	add	r3, sp, #8
 8004d00:	9300      	str	r3, [sp, #0]
 8004d02:	4622      	mov	r2, r4
 8004d04:	4633      	mov	r3, r6
 8004d06:	eeb0 0b48 	vmov.f64	d0, d8
 8004d0a:	f000 fb91 	bl	8005430 <_dtoa_r>
 8004d0e:	2d47      	cmp	r5, #71	; 0x47
 8004d10:	d101      	bne.n	8004d16 <__cvt+0x56>
 8004d12:	07fb      	lsls	r3, r7, #31
 8004d14:	d51e      	bpl.n	8004d54 <__cvt+0x94>
 8004d16:	2d46      	cmp	r5, #70	; 0x46
 8004d18:	eb00 0304 	add.w	r3, r0, r4
 8004d1c:	d10c      	bne.n	8004d38 <__cvt+0x78>
 8004d1e:	7802      	ldrb	r2, [r0, #0]
 8004d20:	2a30      	cmp	r2, #48	; 0x30
 8004d22:	d107      	bne.n	8004d34 <__cvt+0x74>
 8004d24:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8004d28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004d2c:	bf1c      	itt	ne
 8004d2e:	f1c4 0401 	rsbne	r4, r4, #1
 8004d32:	6034      	strne	r4, [r6, #0]
 8004d34:	6832      	ldr	r2, [r6, #0]
 8004d36:	4413      	add	r3, r2
 8004d38:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8004d3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004d40:	d007      	beq.n	8004d52 <__cvt+0x92>
 8004d42:	2130      	movs	r1, #48	; 0x30
 8004d44:	9a03      	ldr	r2, [sp, #12]
 8004d46:	429a      	cmp	r2, r3
 8004d48:	d204      	bcs.n	8004d54 <__cvt+0x94>
 8004d4a:	1c54      	adds	r4, r2, #1
 8004d4c:	9403      	str	r4, [sp, #12]
 8004d4e:	7011      	strb	r1, [r2, #0]
 8004d50:	e7f8      	b.n	8004d44 <__cvt+0x84>
 8004d52:	9303      	str	r3, [sp, #12]
 8004d54:	9b03      	ldr	r3, [sp, #12]
 8004d56:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004d58:	1a1b      	subs	r3, r3, r0
 8004d5a:	6013      	str	r3, [r2, #0]
 8004d5c:	b005      	add	sp, #20
 8004d5e:	ecbd 8b02 	vpop	{d8}
 8004d62:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004d64 <__exponent>:
 8004d64:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004d66:	2900      	cmp	r1, #0
 8004d68:	4604      	mov	r4, r0
 8004d6a:	bfba      	itte	lt
 8004d6c:	4249      	neglt	r1, r1
 8004d6e:	232d      	movlt	r3, #45	; 0x2d
 8004d70:	232b      	movge	r3, #43	; 0x2b
 8004d72:	2909      	cmp	r1, #9
 8004d74:	f804 2b02 	strb.w	r2, [r4], #2
 8004d78:	7043      	strb	r3, [r0, #1]
 8004d7a:	dd20      	ble.n	8004dbe <__exponent+0x5a>
 8004d7c:	f10d 0307 	add.w	r3, sp, #7
 8004d80:	461f      	mov	r7, r3
 8004d82:	260a      	movs	r6, #10
 8004d84:	fb91 f5f6 	sdiv	r5, r1, r6
 8004d88:	fb06 1115 	mls	r1, r6, r5, r1
 8004d8c:	3130      	adds	r1, #48	; 0x30
 8004d8e:	2d09      	cmp	r5, #9
 8004d90:	f803 1c01 	strb.w	r1, [r3, #-1]
 8004d94:	f103 32ff 	add.w	r2, r3, #4294967295
 8004d98:	4629      	mov	r1, r5
 8004d9a:	dc09      	bgt.n	8004db0 <__exponent+0x4c>
 8004d9c:	3130      	adds	r1, #48	; 0x30
 8004d9e:	3b02      	subs	r3, #2
 8004da0:	f802 1c01 	strb.w	r1, [r2, #-1]
 8004da4:	42bb      	cmp	r3, r7
 8004da6:	4622      	mov	r2, r4
 8004da8:	d304      	bcc.n	8004db4 <__exponent+0x50>
 8004daa:	1a10      	subs	r0, r2, r0
 8004dac:	b003      	add	sp, #12
 8004dae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004db0:	4613      	mov	r3, r2
 8004db2:	e7e7      	b.n	8004d84 <__exponent+0x20>
 8004db4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004db8:	f804 2b01 	strb.w	r2, [r4], #1
 8004dbc:	e7f2      	b.n	8004da4 <__exponent+0x40>
 8004dbe:	2330      	movs	r3, #48	; 0x30
 8004dc0:	4419      	add	r1, r3
 8004dc2:	7083      	strb	r3, [r0, #2]
 8004dc4:	1d02      	adds	r2, r0, #4
 8004dc6:	70c1      	strb	r1, [r0, #3]
 8004dc8:	e7ef      	b.n	8004daa <__exponent+0x46>
 8004dca:	0000      	movs	r0, r0
 8004dcc:	0000      	movs	r0, r0
	...

08004dd0 <_printf_float>:
 8004dd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004dd4:	b08d      	sub	sp, #52	; 0x34
 8004dd6:	460c      	mov	r4, r1
 8004dd8:	4616      	mov	r6, r2
 8004dda:	461f      	mov	r7, r3
 8004ddc:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8004de0:	4605      	mov	r5, r0
 8004de2:	f001 f871 	bl	8005ec8 <_localeconv_r>
 8004de6:	f8d0 b000 	ldr.w	fp, [r0]
 8004dea:	4658      	mov	r0, fp
 8004dec:	f7fb fa24 	bl	8000238 <strlen>
 8004df0:	2300      	movs	r3, #0
 8004df2:	930a      	str	r3, [sp, #40]	; 0x28
 8004df4:	f8d8 3000 	ldr.w	r3, [r8]
 8004df8:	9005      	str	r0, [sp, #20]
 8004dfa:	3307      	adds	r3, #7
 8004dfc:	f023 0307 	bic.w	r3, r3, #7
 8004e00:	f103 0108 	add.w	r1, r3, #8
 8004e04:	f894 9018 	ldrb.w	r9, [r4, #24]
 8004e08:	6822      	ldr	r2, [r4, #0]
 8004e0a:	f8c8 1000 	str.w	r1, [r8]
 8004e0e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004e12:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 8004e16:	ed9f 7ba2 	vldr	d7, [pc, #648]	; 80050a0 <_printf_float+0x2d0>
 8004e1a:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 8004e1e:	eeb0 6bc0 	vabs.f64	d6, d0
 8004e22:	eeb4 6b47 	vcmp.f64	d6, d7
 8004e26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004e2a:	dd24      	ble.n	8004e76 <_printf_float+0xa6>
 8004e2c:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8004e30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004e34:	d502      	bpl.n	8004e3c <_printf_float+0x6c>
 8004e36:	232d      	movs	r3, #45	; 0x2d
 8004e38:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004e3c:	499a      	ldr	r1, [pc, #616]	; (80050a8 <_printf_float+0x2d8>)
 8004e3e:	4b9b      	ldr	r3, [pc, #620]	; (80050ac <_printf_float+0x2dc>)
 8004e40:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8004e44:	bf8c      	ite	hi
 8004e46:	4688      	movhi	r8, r1
 8004e48:	4698      	movls	r8, r3
 8004e4a:	f022 0204 	bic.w	r2, r2, #4
 8004e4e:	2303      	movs	r3, #3
 8004e50:	6123      	str	r3, [r4, #16]
 8004e52:	6022      	str	r2, [r4, #0]
 8004e54:	f04f 0a00 	mov.w	sl, #0
 8004e58:	9700      	str	r7, [sp, #0]
 8004e5a:	4633      	mov	r3, r6
 8004e5c:	aa0b      	add	r2, sp, #44	; 0x2c
 8004e5e:	4621      	mov	r1, r4
 8004e60:	4628      	mov	r0, r5
 8004e62:	f000 f9e1 	bl	8005228 <_printf_common>
 8004e66:	3001      	adds	r0, #1
 8004e68:	f040 8089 	bne.w	8004f7e <_printf_float+0x1ae>
 8004e6c:	f04f 30ff 	mov.w	r0, #4294967295
 8004e70:	b00d      	add	sp, #52	; 0x34
 8004e72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004e76:	eeb4 0b40 	vcmp.f64	d0, d0
 8004e7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004e7e:	d702      	bvc.n	8004e86 <_printf_float+0xb6>
 8004e80:	498b      	ldr	r1, [pc, #556]	; (80050b0 <_printf_float+0x2e0>)
 8004e82:	4b8c      	ldr	r3, [pc, #560]	; (80050b4 <_printf_float+0x2e4>)
 8004e84:	e7dc      	b.n	8004e40 <_printf_float+0x70>
 8004e86:	6861      	ldr	r1, [r4, #4]
 8004e88:	1c4b      	adds	r3, r1, #1
 8004e8a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004e8e:	ab0a      	add	r3, sp, #40	; 0x28
 8004e90:	a809      	add	r0, sp, #36	; 0x24
 8004e92:	d13b      	bne.n	8004f0c <_printf_float+0x13c>
 8004e94:	2106      	movs	r1, #6
 8004e96:	6061      	str	r1, [r4, #4]
 8004e98:	f04f 0c00 	mov.w	ip, #0
 8004e9c:	e9cd 3c02 	strd	r3, ip, [sp, #8]
 8004ea0:	e9cd 0900 	strd	r0, r9, [sp]
 8004ea4:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8004ea8:	6022      	str	r2, [r4, #0]
 8004eaa:	6861      	ldr	r1, [r4, #4]
 8004eac:	4628      	mov	r0, r5
 8004eae:	f7ff ff07 	bl	8004cc0 <__cvt>
 8004eb2:	f009 03df 	and.w	r3, r9, #223	; 0xdf
 8004eb6:	2b47      	cmp	r3, #71	; 0x47
 8004eb8:	4680      	mov	r8, r0
 8004eba:	d109      	bne.n	8004ed0 <_printf_float+0x100>
 8004ebc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004ebe:	1cd8      	adds	r0, r3, #3
 8004ec0:	db02      	blt.n	8004ec8 <_printf_float+0xf8>
 8004ec2:	6862      	ldr	r2, [r4, #4]
 8004ec4:	4293      	cmp	r3, r2
 8004ec6:	dd47      	ble.n	8004f58 <_printf_float+0x188>
 8004ec8:	f1a9 0902 	sub.w	r9, r9, #2
 8004ecc:	fa5f f989 	uxtb.w	r9, r9
 8004ed0:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8004ed4:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004ed6:	d824      	bhi.n	8004f22 <_printf_float+0x152>
 8004ed8:	3901      	subs	r1, #1
 8004eda:	464a      	mov	r2, r9
 8004edc:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8004ee0:	9109      	str	r1, [sp, #36]	; 0x24
 8004ee2:	f7ff ff3f 	bl	8004d64 <__exponent>
 8004ee6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004ee8:	1813      	adds	r3, r2, r0
 8004eea:	2a01      	cmp	r2, #1
 8004eec:	4682      	mov	sl, r0
 8004eee:	6123      	str	r3, [r4, #16]
 8004ef0:	dc02      	bgt.n	8004ef8 <_printf_float+0x128>
 8004ef2:	6822      	ldr	r2, [r4, #0]
 8004ef4:	07d1      	lsls	r1, r2, #31
 8004ef6:	d501      	bpl.n	8004efc <_printf_float+0x12c>
 8004ef8:	3301      	adds	r3, #1
 8004efa:	6123      	str	r3, [r4, #16]
 8004efc:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d0a9      	beq.n	8004e58 <_printf_float+0x88>
 8004f04:	232d      	movs	r3, #45	; 0x2d
 8004f06:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004f0a:	e7a5      	b.n	8004e58 <_printf_float+0x88>
 8004f0c:	f1b9 0f67 	cmp.w	r9, #103	; 0x67
 8004f10:	f000 8178 	beq.w	8005204 <_printf_float+0x434>
 8004f14:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8004f18:	d1be      	bne.n	8004e98 <_printf_float+0xc8>
 8004f1a:	2900      	cmp	r1, #0
 8004f1c:	d1bc      	bne.n	8004e98 <_printf_float+0xc8>
 8004f1e:	2101      	movs	r1, #1
 8004f20:	e7b9      	b.n	8004e96 <_printf_float+0xc6>
 8004f22:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8004f26:	d119      	bne.n	8004f5c <_printf_float+0x18c>
 8004f28:	2900      	cmp	r1, #0
 8004f2a:	6863      	ldr	r3, [r4, #4]
 8004f2c:	dd0c      	ble.n	8004f48 <_printf_float+0x178>
 8004f2e:	6121      	str	r1, [r4, #16]
 8004f30:	b913      	cbnz	r3, 8004f38 <_printf_float+0x168>
 8004f32:	6822      	ldr	r2, [r4, #0]
 8004f34:	07d2      	lsls	r2, r2, #31
 8004f36:	d502      	bpl.n	8004f3e <_printf_float+0x16e>
 8004f38:	3301      	adds	r3, #1
 8004f3a:	440b      	add	r3, r1
 8004f3c:	6123      	str	r3, [r4, #16]
 8004f3e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004f40:	65a3      	str	r3, [r4, #88]	; 0x58
 8004f42:	f04f 0a00 	mov.w	sl, #0
 8004f46:	e7d9      	b.n	8004efc <_printf_float+0x12c>
 8004f48:	b913      	cbnz	r3, 8004f50 <_printf_float+0x180>
 8004f4a:	6822      	ldr	r2, [r4, #0]
 8004f4c:	07d0      	lsls	r0, r2, #31
 8004f4e:	d501      	bpl.n	8004f54 <_printf_float+0x184>
 8004f50:	3302      	adds	r3, #2
 8004f52:	e7f3      	b.n	8004f3c <_printf_float+0x16c>
 8004f54:	2301      	movs	r3, #1
 8004f56:	e7f1      	b.n	8004f3c <_printf_float+0x16c>
 8004f58:	f04f 0967 	mov.w	r9, #103	; 0x67
 8004f5c:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8004f60:	4293      	cmp	r3, r2
 8004f62:	db05      	blt.n	8004f70 <_printf_float+0x1a0>
 8004f64:	6822      	ldr	r2, [r4, #0]
 8004f66:	6123      	str	r3, [r4, #16]
 8004f68:	07d1      	lsls	r1, r2, #31
 8004f6a:	d5e8      	bpl.n	8004f3e <_printf_float+0x16e>
 8004f6c:	3301      	adds	r3, #1
 8004f6e:	e7e5      	b.n	8004f3c <_printf_float+0x16c>
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	bfd4      	ite	le
 8004f74:	f1c3 0302 	rsble	r3, r3, #2
 8004f78:	2301      	movgt	r3, #1
 8004f7a:	4413      	add	r3, r2
 8004f7c:	e7de      	b.n	8004f3c <_printf_float+0x16c>
 8004f7e:	6823      	ldr	r3, [r4, #0]
 8004f80:	055a      	lsls	r2, r3, #21
 8004f82:	d407      	bmi.n	8004f94 <_printf_float+0x1c4>
 8004f84:	6923      	ldr	r3, [r4, #16]
 8004f86:	4642      	mov	r2, r8
 8004f88:	4631      	mov	r1, r6
 8004f8a:	4628      	mov	r0, r5
 8004f8c:	47b8      	blx	r7
 8004f8e:	3001      	adds	r0, #1
 8004f90:	d12a      	bne.n	8004fe8 <_printf_float+0x218>
 8004f92:	e76b      	b.n	8004e6c <_printf_float+0x9c>
 8004f94:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8004f98:	f240 80de 	bls.w	8005158 <_printf_float+0x388>
 8004f9c:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8004fa0:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8004fa4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004fa8:	d133      	bne.n	8005012 <_printf_float+0x242>
 8004faa:	2301      	movs	r3, #1
 8004fac:	4a42      	ldr	r2, [pc, #264]	; (80050b8 <_printf_float+0x2e8>)
 8004fae:	4631      	mov	r1, r6
 8004fb0:	4628      	mov	r0, r5
 8004fb2:	47b8      	blx	r7
 8004fb4:	3001      	adds	r0, #1
 8004fb6:	f43f af59 	beq.w	8004e6c <_printf_float+0x9c>
 8004fba:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004fbe:	429a      	cmp	r2, r3
 8004fc0:	db02      	blt.n	8004fc8 <_printf_float+0x1f8>
 8004fc2:	6823      	ldr	r3, [r4, #0]
 8004fc4:	07d8      	lsls	r0, r3, #31
 8004fc6:	d50f      	bpl.n	8004fe8 <_printf_float+0x218>
 8004fc8:	9b05      	ldr	r3, [sp, #20]
 8004fca:	465a      	mov	r2, fp
 8004fcc:	4631      	mov	r1, r6
 8004fce:	4628      	mov	r0, r5
 8004fd0:	47b8      	blx	r7
 8004fd2:	3001      	adds	r0, #1
 8004fd4:	f43f af4a 	beq.w	8004e6c <_printf_float+0x9c>
 8004fd8:	f04f 0800 	mov.w	r8, #0
 8004fdc:	f104 091a 	add.w	r9, r4, #26
 8004fe0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004fe2:	3b01      	subs	r3, #1
 8004fe4:	4543      	cmp	r3, r8
 8004fe6:	dc09      	bgt.n	8004ffc <_printf_float+0x22c>
 8004fe8:	6823      	ldr	r3, [r4, #0]
 8004fea:	079b      	lsls	r3, r3, #30
 8004fec:	f100 8105 	bmi.w	80051fa <_printf_float+0x42a>
 8004ff0:	68e0      	ldr	r0, [r4, #12]
 8004ff2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004ff4:	4298      	cmp	r0, r3
 8004ff6:	bfb8      	it	lt
 8004ff8:	4618      	movlt	r0, r3
 8004ffa:	e739      	b.n	8004e70 <_printf_float+0xa0>
 8004ffc:	2301      	movs	r3, #1
 8004ffe:	464a      	mov	r2, r9
 8005000:	4631      	mov	r1, r6
 8005002:	4628      	mov	r0, r5
 8005004:	47b8      	blx	r7
 8005006:	3001      	adds	r0, #1
 8005008:	f43f af30 	beq.w	8004e6c <_printf_float+0x9c>
 800500c:	f108 0801 	add.w	r8, r8, #1
 8005010:	e7e6      	b.n	8004fe0 <_printf_float+0x210>
 8005012:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005014:	2b00      	cmp	r3, #0
 8005016:	dc2b      	bgt.n	8005070 <_printf_float+0x2a0>
 8005018:	2301      	movs	r3, #1
 800501a:	4a27      	ldr	r2, [pc, #156]	; (80050b8 <_printf_float+0x2e8>)
 800501c:	4631      	mov	r1, r6
 800501e:	4628      	mov	r0, r5
 8005020:	47b8      	blx	r7
 8005022:	3001      	adds	r0, #1
 8005024:	f43f af22 	beq.w	8004e6c <_printf_float+0x9c>
 8005028:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800502a:	b923      	cbnz	r3, 8005036 <_printf_float+0x266>
 800502c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800502e:	b913      	cbnz	r3, 8005036 <_printf_float+0x266>
 8005030:	6823      	ldr	r3, [r4, #0]
 8005032:	07d9      	lsls	r1, r3, #31
 8005034:	d5d8      	bpl.n	8004fe8 <_printf_float+0x218>
 8005036:	9b05      	ldr	r3, [sp, #20]
 8005038:	465a      	mov	r2, fp
 800503a:	4631      	mov	r1, r6
 800503c:	4628      	mov	r0, r5
 800503e:	47b8      	blx	r7
 8005040:	3001      	adds	r0, #1
 8005042:	f43f af13 	beq.w	8004e6c <_printf_float+0x9c>
 8005046:	f04f 0900 	mov.w	r9, #0
 800504a:	f104 0a1a 	add.w	sl, r4, #26
 800504e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005050:	425b      	negs	r3, r3
 8005052:	454b      	cmp	r3, r9
 8005054:	dc01      	bgt.n	800505a <_printf_float+0x28a>
 8005056:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005058:	e795      	b.n	8004f86 <_printf_float+0x1b6>
 800505a:	2301      	movs	r3, #1
 800505c:	4652      	mov	r2, sl
 800505e:	4631      	mov	r1, r6
 8005060:	4628      	mov	r0, r5
 8005062:	47b8      	blx	r7
 8005064:	3001      	adds	r0, #1
 8005066:	f43f af01 	beq.w	8004e6c <_printf_float+0x9c>
 800506a:	f109 0901 	add.w	r9, r9, #1
 800506e:	e7ee      	b.n	800504e <_printf_float+0x27e>
 8005070:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005072:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005074:	429a      	cmp	r2, r3
 8005076:	bfa8      	it	ge
 8005078:	461a      	movge	r2, r3
 800507a:	2a00      	cmp	r2, #0
 800507c:	4691      	mov	r9, r2
 800507e:	dd07      	ble.n	8005090 <_printf_float+0x2c0>
 8005080:	4613      	mov	r3, r2
 8005082:	4631      	mov	r1, r6
 8005084:	4642      	mov	r2, r8
 8005086:	4628      	mov	r0, r5
 8005088:	47b8      	blx	r7
 800508a:	3001      	adds	r0, #1
 800508c:	f43f aeee 	beq.w	8004e6c <_printf_float+0x9c>
 8005090:	f104 031a 	add.w	r3, r4, #26
 8005094:	f04f 0a00 	mov.w	sl, #0
 8005098:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800509c:	9307      	str	r3, [sp, #28]
 800509e:	e017      	b.n	80050d0 <_printf_float+0x300>
 80050a0:	ffffffff 	.word	0xffffffff
 80050a4:	7fefffff 	.word	0x7fefffff
 80050a8:	0800662c 	.word	0x0800662c
 80050ac:	08006628 	.word	0x08006628
 80050b0:	08006634 	.word	0x08006634
 80050b4:	08006630 	.word	0x08006630
 80050b8:	08006638 	.word	0x08006638
 80050bc:	2301      	movs	r3, #1
 80050be:	9a07      	ldr	r2, [sp, #28]
 80050c0:	4631      	mov	r1, r6
 80050c2:	4628      	mov	r0, r5
 80050c4:	47b8      	blx	r7
 80050c6:	3001      	adds	r0, #1
 80050c8:	f43f aed0 	beq.w	8004e6c <_printf_float+0x9c>
 80050cc:	f10a 0a01 	add.w	sl, sl, #1
 80050d0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80050d2:	9306      	str	r3, [sp, #24]
 80050d4:	eba3 0309 	sub.w	r3, r3, r9
 80050d8:	4553      	cmp	r3, sl
 80050da:	dcef      	bgt.n	80050bc <_printf_float+0x2ec>
 80050dc:	9b06      	ldr	r3, [sp, #24]
 80050de:	4498      	add	r8, r3
 80050e0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80050e4:	429a      	cmp	r2, r3
 80050e6:	db15      	blt.n	8005114 <_printf_float+0x344>
 80050e8:	6823      	ldr	r3, [r4, #0]
 80050ea:	07da      	lsls	r2, r3, #31
 80050ec:	d412      	bmi.n	8005114 <_printf_float+0x344>
 80050ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80050f0:	9a06      	ldr	r2, [sp, #24]
 80050f2:	9909      	ldr	r1, [sp, #36]	; 0x24
 80050f4:	1a9a      	subs	r2, r3, r2
 80050f6:	eba3 0a01 	sub.w	sl, r3, r1
 80050fa:	4592      	cmp	sl, r2
 80050fc:	bfa8      	it	ge
 80050fe:	4692      	movge	sl, r2
 8005100:	f1ba 0f00 	cmp.w	sl, #0
 8005104:	dc0e      	bgt.n	8005124 <_printf_float+0x354>
 8005106:	f04f 0800 	mov.w	r8, #0
 800510a:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800510e:	f104 091a 	add.w	r9, r4, #26
 8005112:	e019      	b.n	8005148 <_printf_float+0x378>
 8005114:	9b05      	ldr	r3, [sp, #20]
 8005116:	465a      	mov	r2, fp
 8005118:	4631      	mov	r1, r6
 800511a:	4628      	mov	r0, r5
 800511c:	47b8      	blx	r7
 800511e:	3001      	adds	r0, #1
 8005120:	d1e5      	bne.n	80050ee <_printf_float+0x31e>
 8005122:	e6a3      	b.n	8004e6c <_printf_float+0x9c>
 8005124:	4653      	mov	r3, sl
 8005126:	4642      	mov	r2, r8
 8005128:	4631      	mov	r1, r6
 800512a:	4628      	mov	r0, r5
 800512c:	47b8      	blx	r7
 800512e:	3001      	adds	r0, #1
 8005130:	d1e9      	bne.n	8005106 <_printf_float+0x336>
 8005132:	e69b      	b.n	8004e6c <_printf_float+0x9c>
 8005134:	2301      	movs	r3, #1
 8005136:	464a      	mov	r2, r9
 8005138:	4631      	mov	r1, r6
 800513a:	4628      	mov	r0, r5
 800513c:	47b8      	blx	r7
 800513e:	3001      	adds	r0, #1
 8005140:	f43f ae94 	beq.w	8004e6c <_printf_float+0x9c>
 8005144:	f108 0801 	add.w	r8, r8, #1
 8005148:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800514c:	1a9b      	subs	r3, r3, r2
 800514e:	eba3 030a 	sub.w	r3, r3, sl
 8005152:	4543      	cmp	r3, r8
 8005154:	dcee      	bgt.n	8005134 <_printf_float+0x364>
 8005156:	e747      	b.n	8004fe8 <_printf_float+0x218>
 8005158:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800515a:	2a01      	cmp	r2, #1
 800515c:	dc01      	bgt.n	8005162 <_printf_float+0x392>
 800515e:	07db      	lsls	r3, r3, #31
 8005160:	d539      	bpl.n	80051d6 <_printf_float+0x406>
 8005162:	2301      	movs	r3, #1
 8005164:	4642      	mov	r2, r8
 8005166:	4631      	mov	r1, r6
 8005168:	4628      	mov	r0, r5
 800516a:	47b8      	blx	r7
 800516c:	3001      	adds	r0, #1
 800516e:	f43f ae7d 	beq.w	8004e6c <_printf_float+0x9c>
 8005172:	9b05      	ldr	r3, [sp, #20]
 8005174:	465a      	mov	r2, fp
 8005176:	4631      	mov	r1, r6
 8005178:	4628      	mov	r0, r5
 800517a:	47b8      	blx	r7
 800517c:	3001      	adds	r0, #1
 800517e:	f108 0801 	add.w	r8, r8, #1
 8005182:	f43f ae73 	beq.w	8004e6c <_printf_float+0x9c>
 8005186:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 800518a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800518c:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8005190:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005194:	f103 33ff 	add.w	r3, r3, #4294967295
 8005198:	d018      	beq.n	80051cc <_printf_float+0x3fc>
 800519a:	4642      	mov	r2, r8
 800519c:	4631      	mov	r1, r6
 800519e:	4628      	mov	r0, r5
 80051a0:	47b8      	blx	r7
 80051a2:	3001      	adds	r0, #1
 80051a4:	d10e      	bne.n	80051c4 <_printf_float+0x3f4>
 80051a6:	e661      	b.n	8004e6c <_printf_float+0x9c>
 80051a8:	2301      	movs	r3, #1
 80051aa:	464a      	mov	r2, r9
 80051ac:	4631      	mov	r1, r6
 80051ae:	4628      	mov	r0, r5
 80051b0:	47b8      	blx	r7
 80051b2:	3001      	adds	r0, #1
 80051b4:	f43f ae5a 	beq.w	8004e6c <_printf_float+0x9c>
 80051b8:	f108 0801 	add.w	r8, r8, #1
 80051bc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80051be:	3b01      	subs	r3, #1
 80051c0:	4543      	cmp	r3, r8
 80051c2:	dcf1      	bgt.n	80051a8 <_printf_float+0x3d8>
 80051c4:	4653      	mov	r3, sl
 80051c6:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80051ca:	e6dd      	b.n	8004f88 <_printf_float+0x1b8>
 80051cc:	f04f 0800 	mov.w	r8, #0
 80051d0:	f104 091a 	add.w	r9, r4, #26
 80051d4:	e7f2      	b.n	80051bc <_printf_float+0x3ec>
 80051d6:	2301      	movs	r3, #1
 80051d8:	e7df      	b.n	800519a <_printf_float+0x3ca>
 80051da:	2301      	movs	r3, #1
 80051dc:	464a      	mov	r2, r9
 80051de:	4631      	mov	r1, r6
 80051e0:	4628      	mov	r0, r5
 80051e2:	47b8      	blx	r7
 80051e4:	3001      	adds	r0, #1
 80051e6:	f43f ae41 	beq.w	8004e6c <_printf_float+0x9c>
 80051ea:	f108 0801 	add.w	r8, r8, #1
 80051ee:	68e3      	ldr	r3, [r4, #12]
 80051f0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80051f2:	1a9b      	subs	r3, r3, r2
 80051f4:	4543      	cmp	r3, r8
 80051f6:	dcf0      	bgt.n	80051da <_printf_float+0x40a>
 80051f8:	e6fa      	b.n	8004ff0 <_printf_float+0x220>
 80051fa:	f04f 0800 	mov.w	r8, #0
 80051fe:	f104 0919 	add.w	r9, r4, #25
 8005202:	e7f4      	b.n	80051ee <_printf_float+0x41e>
 8005204:	2900      	cmp	r1, #0
 8005206:	f43f ae8a 	beq.w	8004f1e <_printf_float+0x14e>
 800520a:	f04f 0c00 	mov.w	ip, #0
 800520e:	e9cd 3c02 	strd	r3, ip, [sp, #8]
 8005212:	e9cd 0900 	strd	r0, r9, [sp]
 8005216:	6022      	str	r2, [r4, #0]
 8005218:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800521c:	4628      	mov	r0, r5
 800521e:	f7ff fd4f 	bl	8004cc0 <__cvt>
 8005222:	4680      	mov	r8, r0
 8005224:	e64a      	b.n	8004ebc <_printf_float+0xec>
 8005226:	bf00      	nop

08005228 <_printf_common>:
 8005228:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800522c:	4691      	mov	r9, r2
 800522e:	461f      	mov	r7, r3
 8005230:	688a      	ldr	r2, [r1, #8]
 8005232:	690b      	ldr	r3, [r1, #16]
 8005234:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005238:	4293      	cmp	r3, r2
 800523a:	bfb8      	it	lt
 800523c:	4613      	movlt	r3, r2
 800523e:	f8c9 3000 	str.w	r3, [r9]
 8005242:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005246:	4606      	mov	r6, r0
 8005248:	460c      	mov	r4, r1
 800524a:	b112      	cbz	r2, 8005252 <_printf_common+0x2a>
 800524c:	3301      	adds	r3, #1
 800524e:	f8c9 3000 	str.w	r3, [r9]
 8005252:	6823      	ldr	r3, [r4, #0]
 8005254:	0699      	lsls	r1, r3, #26
 8005256:	bf42      	ittt	mi
 8005258:	f8d9 3000 	ldrmi.w	r3, [r9]
 800525c:	3302      	addmi	r3, #2
 800525e:	f8c9 3000 	strmi.w	r3, [r9]
 8005262:	6825      	ldr	r5, [r4, #0]
 8005264:	f015 0506 	ands.w	r5, r5, #6
 8005268:	d107      	bne.n	800527a <_printf_common+0x52>
 800526a:	f104 0a19 	add.w	sl, r4, #25
 800526e:	68e3      	ldr	r3, [r4, #12]
 8005270:	f8d9 2000 	ldr.w	r2, [r9]
 8005274:	1a9b      	subs	r3, r3, r2
 8005276:	42ab      	cmp	r3, r5
 8005278:	dc28      	bgt.n	80052cc <_printf_common+0xa4>
 800527a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800527e:	6822      	ldr	r2, [r4, #0]
 8005280:	3300      	adds	r3, #0
 8005282:	bf18      	it	ne
 8005284:	2301      	movne	r3, #1
 8005286:	0692      	lsls	r2, r2, #26
 8005288:	d42d      	bmi.n	80052e6 <_printf_common+0xbe>
 800528a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800528e:	4639      	mov	r1, r7
 8005290:	4630      	mov	r0, r6
 8005292:	47c0      	blx	r8
 8005294:	3001      	adds	r0, #1
 8005296:	d020      	beq.n	80052da <_printf_common+0xb2>
 8005298:	6823      	ldr	r3, [r4, #0]
 800529a:	68e5      	ldr	r5, [r4, #12]
 800529c:	f8d9 2000 	ldr.w	r2, [r9]
 80052a0:	f003 0306 	and.w	r3, r3, #6
 80052a4:	2b04      	cmp	r3, #4
 80052a6:	bf08      	it	eq
 80052a8:	1aad      	subeq	r5, r5, r2
 80052aa:	68a3      	ldr	r3, [r4, #8]
 80052ac:	6922      	ldr	r2, [r4, #16]
 80052ae:	bf0c      	ite	eq
 80052b0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80052b4:	2500      	movne	r5, #0
 80052b6:	4293      	cmp	r3, r2
 80052b8:	bfc4      	itt	gt
 80052ba:	1a9b      	subgt	r3, r3, r2
 80052bc:	18ed      	addgt	r5, r5, r3
 80052be:	f04f 0900 	mov.w	r9, #0
 80052c2:	341a      	adds	r4, #26
 80052c4:	454d      	cmp	r5, r9
 80052c6:	d11a      	bne.n	80052fe <_printf_common+0xd6>
 80052c8:	2000      	movs	r0, #0
 80052ca:	e008      	b.n	80052de <_printf_common+0xb6>
 80052cc:	2301      	movs	r3, #1
 80052ce:	4652      	mov	r2, sl
 80052d0:	4639      	mov	r1, r7
 80052d2:	4630      	mov	r0, r6
 80052d4:	47c0      	blx	r8
 80052d6:	3001      	adds	r0, #1
 80052d8:	d103      	bne.n	80052e2 <_printf_common+0xba>
 80052da:	f04f 30ff 	mov.w	r0, #4294967295
 80052de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80052e2:	3501      	adds	r5, #1
 80052e4:	e7c3      	b.n	800526e <_printf_common+0x46>
 80052e6:	18e1      	adds	r1, r4, r3
 80052e8:	1c5a      	adds	r2, r3, #1
 80052ea:	2030      	movs	r0, #48	; 0x30
 80052ec:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80052f0:	4422      	add	r2, r4
 80052f2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80052f6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80052fa:	3302      	adds	r3, #2
 80052fc:	e7c5      	b.n	800528a <_printf_common+0x62>
 80052fe:	2301      	movs	r3, #1
 8005300:	4622      	mov	r2, r4
 8005302:	4639      	mov	r1, r7
 8005304:	4630      	mov	r0, r6
 8005306:	47c0      	blx	r8
 8005308:	3001      	adds	r0, #1
 800530a:	d0e6      	beq.n	80052da <_printf_common+0xb2>
 800530c:	f109 0901 	add.w	r9, r9, #1
 8005310:	e7d8      	b.n	80052c4 <_printf_common+0x9c>

08005312 <quorem>:
 8005312:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005316:	6903      	ldr	r3, [r0, #16]
 8005318:	690c      	ldr	r4, [r1, #16]
 800531a:	42a3      	cmp	r3, r4
 800531c:	4680      	mov	r8, r0
 800531e:	f2c0 8082 	blt.w	8005426 <quorem+0x114>
 8005322:	3c01      	subs	r4, #1
 8005324:	f101 0714 	add.w	r7, r1, #20
 8005328:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 800532c:	f100 0614 	add.w	r6, r0, #20
 8005330:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8005334:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8005338:	eb06 030c 	add.w	r3, r6, ip
 800533c:	3501      	adds	r5, #1
 800533e:	eb07 090c 	add.w	r9, r7, ip
 8005342:	9301      	str	r3, [sp, #4]
 8005344:	fbb0 f5f5 	udiv	r5, r0, r5
 8005348:	b395      	cbz	r5, 80053b0 <quorem+0x9e>
 800534a:	f04f 0a00 	mov.w	sl, #0
 800534e:	4638      	mov	r0, r7
 8005350:	46b6      	mov	lr, r6
 8005352:	46d3      	mov	fp, sl
 8005354:	f850 2b04 	ldr.w	r2, [r0], #4
 8005358:	b293      	uxth	r3, r2
 800535a:	fb05 a303 	mla	r3, r5, r3, sl
 800535e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005362:	b29b      	uxth	r3, r3
 8005364:	ebab 0303 	sub.w	r3, fp, r3
 8005368:	0c12      	lsrs	r2, r2, #16
 800536a:	f8de b000 	ldr.w	fp, [lr]
 800536e:	fb05 a202 	mla	r2, r5, r2, sl
 8005372:	fa13 f38b 	uxtah	r3, r3, fp
 8005376:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 800537a:	fa1f fb82 	uxth.w	fp, r2
 800537e:	f8de 2000 	ldr.w	r2, [lr]
 8005382:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8005386:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800538a:	b29b      	uxth	r3, r3
 800538c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005390:	4581      	cmp	r9, r0
 8005392:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8005396:	f84e 3b04 	str.w	r3, [lr], #4
 800539a:	d2db      	bcs.n	8005354 <quorem+0x42>
 800539c:	f856 300c 	ldr.w	r3, [r6, ip]
 80053a0:	b933      	cbnz	r3, 80053b0 <quorem+0x9e>
 80053a2:	9b01      	ldr	r3, [sp, #4]
 80053a4:	3b04      	subs	r3, #4
 80053a6:	429e      	cmp	r6, r3
 80053a8:	461a      	mov	r2, r3
 80053aa:	d330      	bcc.n	800540e <quorem+0xfc>
 80053ac:	f8c8 4010 	str.w	r4, [r8, #16]
 80053b0:	4640      	mov	r0, r8
 80053b2:	f000 ffbf 	bl	8006334 <__mcmp>
 80053b6:	2800      	cmp	r0, #0
 80053b8:	db25      	blt.n	8005406 <quorem+0xf4>
 80053ba:	3501      	adds	r5, #1
 80053bc:	4630      	mov	r0, r6
 80053be:	f04f 0c00 	mov.w	ip, #0
 80053c2:	f857 2b04 	ldr.w	r2, [r7], #4
 80053c6:	f8d0 e000 	ldr.w	lr, [r0]
 80053ca:	b293      	uxth	r3, r2
 80053cc:	ebac 0303 	sub.w	r3, ip, r3
 80053d0:	0c12      	lsrs	r2, r2, #16
 80053d2:	fa13 f38e 	uxtah	r3, r3, lr
 80053d6:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80053da:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80053de:	b29b      	uxth	r3, r3
 80053e0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80053e4:	45b9      	cmp	r9, r7
 80053e6:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80053ea:	f840 3b04 	str.w	r3, [r0], #4
 80053ee:	d2e8      	bcs.n	80053c2 <quorem+0xb0>
 80053f0:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 80053f4:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 80053f8:	b92a      	cbnz	r2, 8005406 <quorem+0xf4>
 80053fa:	3b04      	subs	r3, #4
 80053fc:	429e      	cmp	r6, r3
 80053fe:	461a      	mov	r2, r3
 8005400:	d30b      	bcc.n	800541a <quorem+0x108>
 8005402:	f8c8 4010 	str.w	r4, [r8, #16]
 8005406:	4628      	mov	r0, r5
 8005408:	b003      	add	sp, #12
 800540a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800540e:	6812      	ldr	r2, [r2, #0]
 8005410:	3b04      	subs	r3, #4
 8005412:	2a00      	cmp	r2, #0
 8005414:	d1ca      	bne.n	80053ac <quorem+0x9a>
 8005416:	3c01      	subs	r4, #1
 8005418:	e7c5      	b.n	80053a6 <quorem+0x94>
 800541a:	6812      	ldr	r2, [r2, #0]
 800541c:	3b04      	subs	r3, #4
 800541e:	2a00      	cmp	r2, #0
 8005420:	d1ef      	bne.n	8005402 <quorem+0xf0>
 8005422:	3c01      	subs	r4, #1
 8005424:	e7ea      	b.n	80053fc <quorem+0xea>
 8005426:	2000      	movs	r0, #0
 8005428:	e7ee      	b.n	8005408 <quorem+0xf6>
 800542a:	0000      	movs	r0, r0
 800542c:	0000      	movs	r0, r0
	...

08005430 <_dtoa_r>:
 8005430:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005434:	ec57 6b10 	vmov	r6, r7, d0
 8005438:	b095      	sub	sp, #84	; 0x54
 800543a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800543c:	9108      	str	r1, [sp, #32]
 800543e:	4604      	mov	r4, r0
 8005440:	920a      	str	r2, [sp, #40]	; 0x28
 8005442:	9311      	str	r3, [sp, #68]	; 0x44
 8005444:	f8dd 8078 	ldr.w	r8, [sp, #120]	; 0x78
 8005448:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800544c:	b93d      	cbnz	r5, 800545e <_dtoa_r+0x2e>
 800544e:	2010      	movs	r0, #16
 8005450:	f000 fd48 	bl	8005ee4 <malloc>
 8005454:	6260      	str	r0, [r4, #36]	; 0x24
 8005456:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800545a:	6005      	str	r5, [r0, #0]
 800545c:	60c5      	str	r5, [r0, #12]
 800545e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005460:	6819      	ldr	r1, [r3, #0]
 8005462:	b151      	cbz	r1, 800547a <_dtoa_r+0x4a>
 8005464:	685a      	ldr	r2, [r3, #4]
 8005466:	604a      	str	r2, [r1, #4]
 8005468:	2301      	movs	r3, #1
 800546a:	4093      	lsls	r3, r2
 800546c:	608b      	str	r3, [r1, #8]
 800546e:	4620      	mov	r0, r4
 8005470:	f000 fd7f 	bl	8005f72 <_Bfree>
 8005474:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005476:	2200      	movs	r2, #0
 8005478:	601a      	str	r2, [r3, #0]
 800547a:	1e3b      	subs	r3, r7, #0
 800547c:	bfb9      	ittee	lt
 800547e:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8005482:	9303      	strlt	r3, [sp, #12]
 8005484:	2300      	movge	r3, #0
 8005486:	f8c8 3000 	strge.w	r3, [r8]
 800548a:	9d03      	ldr	r5, [sp, #12]
 800548c:	4bac      	ldr	r3, [pc, #688]	; (8005740 <_dtoa_r+0x310>)
 800548e:	bfbc      	itt	lt
 8005490:	2201      	movlt	r2, #1
 8005492:	f8c8 2000 	strlt.w	r2, [r8]
 8005496:	43ab      	bics	r3, r5
 8005498:	d11b      	bne.n	80054d2 <_dtoa_r+0xa2>
 800549a:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800549c:	f242 730f 	movw	r3, #9999	; 0x270f
 80054a0:	6013      	str	r3, [r2, #0]
 80054a2:	9b02      	ldr	r3, [sp, #8]
 80054a4:	b923      	cbnz	r3, 80054b0 <_dtoa_r+0x80>
 80054a6:	f3c5 0513 	ubfx	r5, r5, #0, #20
 80054aa:	2d00      	cmp	r5, #0
 80054ac:	f000 84dd 	beq.w	8005e6a <_dtoa_r+0xa3a>
 80054b0:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80054b2:	b953      	cbnz	r3, 80054ca <_dtoa_r+0x9a>
 80054b4:	4ba3      	ldr	r3, [pc, #652]	; (8005744 <_dtoa_r+0x314>)
 80054b6:	e020      	b.n	80054fa <_dtoa_r+0xca>
 80054b8:	4ba3      	ldr	r3, [pc, #652]	; (8005748 <_dtoa_r+0x318>)
 80054ba:	9304      	str	r3, [sp, #16]
 80054bc:	3308      	adds	r3, #8
 80054be:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 80054c0:	6013      	str	r3, [r2, #0]
 80054c2:	9804      	ldr	r0, [sp, #16]
 80054c4:	b015      	add	sp, #84	; 0x54
 80054c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80054ca:	4b9e      	ldr	r3, [pc, #632]	; (8005744 <_dtoa_r+0x314>)
 80054cc:	9304      	str	r3, [sp, #16]
 80054ce:	3303      	adds	r3, #3
 80054d0:	e7f5      	b.n	80054be <_dtoa_r+0x8e>
 80054d2:	ed9d 7b02 	vldr	d7, [sp, #8]
 80054d6:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80054da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80054de:	ed8d 7b04 	vstr	d7, [sp, #16]
 80054e2:	d10c      	bne.n	80054fe <_dtoa_r+0xce>
 80054e4:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80054e6:	2301      	movs	r3, #1
 80054e8:	6013      	str	r3, [r2, #0]
 80054ea:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	f000 84b9 	beq.w	8005e64 <_dtoa_r+0xa34>
 80054f2:	4b96      	ldr	r3, [pc, #600]	; (800574c <_dtoa_r+0x31c>)
 80054f4:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 80054f6:	6013      	str	r3, [r2, #0]
 80054f8:	3b01      	subs	r3, #1
 80054fa:	9304      	str	r3, [sp, #16]
 80054fc:	e7e1      	b.n	80054c2 <_dtoa_r+0x92>
 80054fe:	a913      	add	r1, sp, #76	; 0x4c
 8005500:	aa12      	add	r2, sp, #72	; 0x48
 8005502:	ed9d 0b04 	vldr	d0, [sp, #16]
 8005506:	4620      	mov	r0, r4
 8005508:	f000 ff8b 	bl	8006422 <__d2b>
 800550c:	f3c5 560a 	ubfx	r6, r5, #20, #11
 8005510:	9001      	str	r0, [sp, #4]
 8005512:	9912      	ldr	r1, [sp, #72]	; 0x48
 8005514:	2e00      	cmp	r6, #0
 8005516:	d046      	beq.n	80055a6 <_dtoa_r+0x176>
 8005518:	9805      	ldr	r0, [sp, #20]
 800551a:	f3c0 0013 	ubfx	r0, r0, #0, #20
 800551e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005522:	f040 537f 	orr.w	r3, r0, #1069547520	; 0x3fc00000
 8005526:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800552a:	f2a6 3aff 	subw	sl, r6, #1023	; 0x3ff
 800552e:	2700      	movs	r7, #0
 8005530:	ee07 aa90 	vmov	s15, sl
 8005534:	ec43 2b16 	vmov	d6, r2, r3
 8005538:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 800553c:	ed9f 4b7a 	vldr	d4, [pc, #488]	; 8005728 <_dtoa_r+0x2f8>
 8005540:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 8005544:	ee36 7b47 	vsub.f64	d7, d6, d7
 8005548:	ed9f 6b79 	vldr	d6, [pc, #484]	; 8005730 <_dtoa_r+0x300>
 800554c:	eea7 6b04 	vfma.f64	d6, d7, d4
 8005550:	eeb0 7b46 	vmov.f64	d7, d6
 8005554:	ed9f 6b78 	vldr	d6, [pc, #480]	; 8005738 <_dtoa_r+0x308>
 8005558:	eea5 7b06 	vfma.f64	d7, d5, d6
 800555c:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 8005560:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8005564:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005568:	ee16 ba90 	vmov	fp, s13
 800556c:	d508      	bpl.n	8005580 <_dtoa_r+0x150>
 800556e:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8005572:	eeb4 6b47 	vcmp.f64	d6, d7
 8005576:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800557a:	bf18      	it	ne
 800557c:	f10b 3bff 	addne.w	fp, fp, #4294967295
 8005580:	f1bb 0f16 	cmp.w	fp, #22
 8005584:	d834      	bhi.n	80055f0 <_dtoa_r+0x1c0>
 8005586:	4b72      	ldr	r3, [pc, #456]	; (8005750 <_dtoa_r+0x320>)
 8005588:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800558c:	ed93 7b00 	vldr	d7, [r3]
 8005590:	ed9d 6b02 	vldr	d6, [sp, #8]
 8005594:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8005598:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800559c:	dd01      	ble.n	80055a2 <_dtoa_r+0x172>
 800559e:	f10b 3bff 	add.w	fp, fp, #4294967295
 80055a2:	2300      	movs	r3, #0
 80055a4:	e025      	b.n	80055f2 <_dtoa_r+0x1c2>
 80055a6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80055a8:	eb01 0a03 	add.w	sl, r1, r3
 80055ac:	f20a 4332 	addw	r3, sl, #1074	; 0x432
 80055b0:	2b20      	cmp	r3, #32
 80055b2:	dd17      	ble.n	80055e4 <_dtoa_r+0x1b4>
 80055b4:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 80055b8:	9a02      	ldr	r2, [sp, #8]
 80055ba:	409d      	lsls	r5, r3
 80055bc:	f20a 4312 	addw	r3, sl, #1042	; 0x412
 80055c0:	fa22 f303 	lsr.w	r3, r2, r3
 80055c4:	432b      	orrs	r3, r5
 80055c6:	ee07 3a90 	vmov	s15, r3
 80055ca:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80055ce:	f10a 3aff 	add.w	sl, sl, #4294967295
 80055d2:	ed8d 7b04 	vstr	d7, [sp, #16]
 80055d6:	9805      	ldr	r0, [sp, #20]
 80055d8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80055dc:	2701      	movs	r7, #1
 80055de:	f1a0 73f8 	sub.w	r3, r0, #32505856	; 0x1f00000
 80055e2:	e7a5      	b.n	8005530 <_dtoa_r+0x100>
 80055e4:	9a02      	ldr	r2, [sp, #8]
 80055e6:	f1c3 0320 	rsb	r3, r3, #32
 80055ea:	fa02 f303 	lsl.w	r3, r2, r3
 80055ee:	e7ea      	b.n	80055c6 <_dtoa_r+0x196>
 80055f0:	2301      	movs	r3, #1
 80055f2:	eba1 0a0a 	sub.w	sl, r1, sl
 80055f6:	9310      	str	r3, [sp, #64]	; 0x40
 80055f8:	f1ba 0301 	subs.w	r3, sl, #1
 80055fc:	9307      	str	r3, [sp, #28]
 80055fe:	bf43      	ittte	mi
 8005600:	2300      	movmi	r3, #0
 8005602:	f1ca 0a01 	rsbmi	sl, sl, #1
 8005606:	9307      	strmi	r3, [sp, #28]
 8005608:	f04f 0a00 	movpl.w	sl, #0
 800560c:	f1bb 0f00 	cmp.w	fp, #0
 8005610:	db19      	blt.n	8005646 <_dtoa_r+0x216>
 8005612:	9b07      	ldr	r3, [sp, #28]
 8005614:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8005618:	445b      	add	r3, fp
 800561a:	9307      	str	r3, [sp, #28]
 800561c:	f04f 0800 	mov.w	r8, #0
 8005620:	9b08      	ldr	r3, [sp, #32]
 8005622:	2b09      	cmp	r3, #9
 8005624:	d866      	bhi.n	80056f4 <_dtoa_r+0x2c4>
 8005626:	2b05      	cmp	r3, #5
 8005628:	bfc4      	itt	gt
 800562a:	3b04      	subgt	r3, #4
 800562c:	9308      	strgt	r3, [sp, #32]
 800562e:	9b08      	ldr	r3, [sp, #32]
 8005630:	f1a3 0302 	sub.w	r3, r3, #2
 8005634:	bfcc      	ite	gt
 8005636:	2500      	movgt	r5, #0
 8005638:	2501      	movle	r5, #1
 800563a:	2b03      	cmp	r3, #3
 800563c:	d866      	bhi.n	800570c <_dtoa_r+0x2dc>
 800563e:	e8df f003 	tbb	[pc, r3]
 8005642:	5755      	.short	0x5755
 8005644:	4909      	.short	0x4909
 8005646:	2300      	movs	r3, #0
 8005648:	ebaa 0a0b 	sub.w	sl, sl, fp
 800564c:	f1cb 0800 	rsb	r8, fp, #0
 8005650:	930b      	str	r3, [sp, #44]	; 0x2c
 8005652:	e7e5      	b.n	8005620 <_dtoa_r+0x1f0>
 8005654:	2301      	movs	r3, #1
 8005656:	9309      	str	r3, [sp, #36]	; 0x24
 8005658:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800565a:	2b00      	cmp	r3, #0
 800565c:	dd59      	ble.n	8005712 <_dtoa_r+0x2e2>
 800565e:	9306      	str	r3, [sp, #24]
 8005660:	4699      	mov	r9, r3
 8005662:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8005664:	2200      	movs	r2, #0
 8005666:	6072      	str	r2, [r6, #4]
 8005668:	2204      	movs	r2, #4
 800566a:	f102 0014 	add.w	r0, r2, #20
 800566e:	4298      	cmp	r0, r3
 8005670:	6871      	ldr	r1, [r6, #4]
 8005672:	d953      	bls.n	800571c <_dtoa_r+0x2ec>
 8005674:	4620      	mov	r0, r4
 8005676:	f000 fc48 	bl	8005f0a <_Balloc>
 800567a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800567c:	6030      	str	r0, [r6, #0]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	9304      	str	r3, [sp, #16]
 8005682:	f1b9 0f0e 	cmp.w	r9, #14
 8005686:	f200 80c2 	bhi.w	800580e <_dtoa_r+0x3de>
 800568a:	2d00      	cmp	r5, #0
 800568c:	f000 80bf 	beq.w	800580e <_dtoa_r+0x3de>
 8005690:	ed9d 7b02 	vldr	d7, [sp, #8]
 8005694:	f1bb 0f00 	cmp.w	fp, #0
 8005698:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
 800569c:	f340 80e6 	ble.w	800586c <_dtoa_r+0x43c>
 80056a0:	4a2b      	ldr	r2, [pc, #172]	; (8005750 <_dtoa_r+0x320>)
 80056a2:	f00b 030f 	and.w	r3, fp, #15
 80056a6:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80056aa:	ed93 7b00 	vldr	d7, [r3]
 80056ae:	ea4f 132b 	mov.w	r3, fp, asr #4
 80056b2:	06da      	lsls	r2, r3, #27
 80056b4:	f140 80d8 	bpl.w	8005868 <_dtoa_r+0x438>
 80056b8:	4a26      	ldr	r2, [pc, #152]	; (8005754 <_dtoa_r+0x324>)
 80056ba:	ed9d 5b0e 	vldr	d5, [sp, #56]	; 0x38
 80056be:	ed92 6b08 	vldr	d6, [r2, #32]
 80056c2:	ee85 6b06 	vdiv.f64	d6, d5, d6
 80056c6:	ed8d 6b02 	vstr	d6, [sp, #8]
 80056ca:	f003 030f 	and.w	r3, r3, #15
 80056ce:	2203      	movs	r2, #3
 80056d0:	4920      	ldr	r1, [pc, #128]	; (8005754 <_dtoa_r+0x324>)
 80056d2:	e04a      	b.n	800576a <_dtoa_r+0x33a>
 80056d4:	2301      	movs	r3, #1
 80056d6:	9309      	str	r3, [sp, #36]	; 0x24
 80056d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80056da:	445b      	add	r3, fp
 80056dc:	f103 0901 	add.w	r9, r3, #1
 80056e0:	9306      	str	r3, [sp, #24]
 80056e2:	464b      	mov	r3, r9
 80056e4:	2b01      	cmp	r3, #1
 80056e6:	bfb8      	it	lt
 80056e8:	2301      	movlt	r3, #1
 80056ea:	e7ba      	b.n	8005662 <_dtoa_r+0x232>
 80056ec:	2300      	movs	r3, #0
 80056ee:	e7b2      	b.n	8005656 <_dtoa_r+0x226>
 80056f0:	2300      	movs	r3, #0
 80056f2:	e7f0      	b.n	80056d6 <_dtoa_r+0x2a6>
 80056f4:	2501      	movs	r5, #1
 80056f6:	2300      	movs	r3, #0
 80056f8:	e9cd 3508 	strd	r3, r5, [sp, #32]
 80056fc:	f04f 33ff 	mov.w	r3, #4294967295
 8005700:	9306      	str	r3, [sp, #24]
 8005702:	4699      	mov	r9, r3
 8005704:	2200      	movs	r2, #0
 8005706:	2312      	movs	r3, #18
 8005708:	920a      	str	r2, [sp, #40]	; 0x28
 800570a:	e7aa      	b.n	8005662 <_dtoa_r+0x232>
 800570c:	2301      	movs	r3, #1
 800570e:	9309      	str	r3, [sp, #36]	; 0x24
 8005710:	e7f4      	b.n	80056fc <_dtoa_r+0x2cc>
 8005712:	2301      	movs	r3, #1
 8005714:	9306      	str	r3, [sp, #24]
 8005716:	4699      	mov	r9, r3
 8005718:	461a      	mov	r2, r3
 800571a:	e7f5      	b.n	8005708 <_dtoa_r+0x2d8>
 800571c:	3101      	adds	r1, #1
 800571e:	6071      	str	r1, [r6, #4]
 8005720:	0052      	lsls	r2, r2, #1
 8005722:	e7a2      	b.n	800566a <_dtoa_r+0x23a>
 8005724:	f3af 8000 	nop.w
 8005728:	636f4361 	.word	0x636f4361
 800572c:	3fd287a7 	.word	0x3fd287a7
 8005730:	8b60c8b3 	.word	0x8b60c8b3
 8005734:	3fc68a28 	.word	0x3fc68a28
 8005738:	509f79fb 	.word	0x509f79fb
 800573c:	3fd34413 	.word	0x3fd34413
 8005740:	7ff00000 	.word	0x7ff00000
 8005744:	08006643 	.word	0x08006643
 8005748:	0800663a 	.word	0x0800663a
 800574c:	08006639 	.word	0x08006639
 8005750:	08006670 	.word	0x08006670
 8005754:	08006648 	.word	0x08006648
 8005758:	07de      	lsls	r6, r3, #31
 800575a:	d504      	bpl.n	8005766 <_dtoa_r+0x336>
 800575c:	ed91 6b00 	vldr	d6, [r1]
 8005760:	3201      	adds	r2, #1
 8005762:	ee27 7b06 	vmul.f64	d7, d7, d6
 8005766:	105b      	asrs	r3, r3, #1
 8005768:	3108      	adds	r1, #8
 800576a:	2b00      	cmp	r3, #0
 800576c:	d1f4      	bne.n	8005758 <_dtoa_r+0x328>
 800576e:	ed9d 6b02 	vldr	d6, [sp, #8]
 8005772:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8005776:	ed8d 7b02 	vstr	d7, [sp, #8]
 800577a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800577c:	2b00      	cmp	r3, #0
 800577e:	f000 80a7 	beq.w	80058d0 <_dtoa_r+0x4a0>
 8005782:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8005786:	ed9d 7b02 	vldr	d7, [sp, #8]
 800578a:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800578e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005792:	f140 809d 	bpl.w	80058d0 <_dtoa_r+0x4a0>
 8005796:	f1b9 0f00 	cmp.w	r9, #0
 800579a:	f000 8099 	beq.w	80058d0 <_dtoa_r+0x4a0>
 800579e:	9b06      	ldr	r3, [sp, #24]
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	dd30      	ble.n	8005806 <_dtoa_r+0x3d6>
 80057a4:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 80057a8:	ee27 7b06 	vmul.f64	d7, d7, d6
 80057ac:	ed8d 7b02 	vstr	d7, [sp, #8]
 80057b0:	9d06      	ldr	r5, [sp, #24]
 80057b2:	f10b 33ff 	add.w	r3, fp, #4294967295
 80057b6:	3201      	adds	r2, #1
 80057b8:	ed9d 6b02 	vldr	d6, [sp, #8]
 80057bc:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 80057c0:	ee07 2a90 	vmov	s15, r2
 80057c4:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80057c8:	eea7 5b06 	vfma.f64	d5, d7, d6
 80057cc:	ed8d 5b02 	vstr	d5, [sp, #8]
 80057d0:	9a03      	ldr	r2, [sp, #12]
 80057d2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80057d6:	f1a2 7150 	sub.w	r1, r2, #54525952	; 0x3400000
 80057da:	2d00      	cmp	r5, #0
 80057dc:	d17b      	bne.n	80058d6 <_dtoa_r+0x4a6>
 80057de:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 80057e2:	ee36 6b47 	vsub.f64	d6, d6, d7
 80057e6:	ec41 0b17 	vmov	d7, r0, r1
 80057ea:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80057ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80057f2:	f300 8253 	bgt.w	8005c9c <_dtoa_r+0x86c>
 80057f6:	eeb1 7b47 	vneg.f64	d7, d7
 80057fa:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80057fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005802:	f100 8249 	bmi.w	8005c98 <_dtoa_r+0x868>
 8005806:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800580a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800580e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8005810:	2b00      	cmp	r3, #0
 8005812:	f2c0 8119 	blt.w	8005a48 <_dtoa_r+0x618>
 8005816:	f1bb 0f0e 	cmp.w	fp, #14
 800581a:	f300 8115 	bgt.w	8005a48 <_dtoa_r+0x618>
 800581e:	4bc3      	ldr	r3, [pc, #780]	; (8005b2c <_dtoa_r+0x6fc>)
 8005820:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8005824:	ed93 6b00 	vldr	d6, [r3]
 8005828:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800582a:	2b00      	cmp	r3, #0
 800582c:	f280 80ba 	bge.w	80059a4 <_dtoa_r+0x574>
 8005830:	f1b9 0f00 	cmp.w	r9, #0
 8005834:	f300 80b6 	bgt.w	80059a4 <_dtoa_r+0x574>
 8005838:	f040 822d 	bne.w	8005c96 <_dtoa_r+0x866>
 800583c:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8005840:	ee26 6b07 	vmul.f64	d6, d6, d7
 8005844:	ed9d 7b02 	vldr	d7, [sp, #8]
 8005848:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800584c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005850:	464d      	mov	r5, r9
 8005852:	464f      	mov	r7, r9
 8005854:	f280 8204 	bge.w	8005c60 <_dtoa_r+0x830>
 8005858:	9b04      	ldr	r3, [sp, #16]
 800585a:	9a04      	ldr	r2, [sp, #16]
 800585c:	1c5e      	adds	r6, r3, #1
 800585e:	2331      	movs	r3, #49	; 0x31
 8005860:	7013      	strb	r3, [r2, #0]
 8005862:	f10b 0b01 	add.w	fp, fp, #1
 8005866:	e1ff      	b.n	8005c68 <_dtoa_r+0x838>
 8005868:	2202      	movs	r2, #2
 800586a:	e731      	b.n	80056d0 <_dtoa_r+0x2a0>
 800586c:	d02e      	beq.n	80058cc <_dtoa_r+0x49c>
 800586e:	f1cb 0300 	rsb	r3, fp, #0
 8005872:	4aae      	ldr	r2, [pc, #696]	; (8005b2c <_dtoa_r+0x6fc>)
 8005874:	f003 010f 	and.w	r1, r3, #15
 8005878:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800587c:	ed92 7b00 	vldr	d7, [r2]
 8005880:	ed9d 6b0e 	vldr	d6, [sp, #56]	; 0x38
 8005884:	ee26 7b07 	vmul.f64	d7, d6, d7
 8005888:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 800588c:	e9dd 120c 	ldrd	r1, r2, [sp, #48]	; 0x30
 8005890:	e9cd 1202 	strd	r1, r2, [sp, #8]
 8005894:	49a6      	ldr	r1, [pc, #664]	; (8005b30 <_dtoa_r+0x700>)
 8005896:	111b      	asrs	r3, r3, #4
 8005898:	2000      	movs	r0, #0
 800589a:	2202      	movs	r2, #2
 800589c:	b93b      	cbnz	r3, 80058ae <_dtoa_r+0x47e>
 800589e:	2800      	cmp	r0, #0
 80058a0:	f43f af6b 	beq.w	800577a <_dtoa_r+0x34a>
 80058a4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80058a8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80058ac:	e765      	b.n	800577a <_dtoa_r+0x34a>
 80058ae:	07dd      	lsls	r5, r3, #31
 80058b0:	d509      	bpl.n	80058c6 <_dtoa_r+0x496>
 80058b2:	ed9d 6b0c 	vldr	d6, [sp, #48]	; 0x30
 80058b6:	ed91 7b00 	vldr	d7, [r1]
 80058ba:	ee26 7b07 	vmul.f64	d7, d6, d7
 80058be:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 80058c2:	3201      	adds	r2, #1
 80058c4:	2001      	movs	r0, #1
 80058c6:	105b      	asrs	r3, r3, #1
 80058c8:	3108      	adds	r1, #8
 80058ca:	e7e7      	b.n	800589c <_dtoa_r+0x46c>
 80058cc:	2202      	movs	r2, #2
 80058ce:	e754      	b.n	800577a <_dtoa_r+0x34a>
 80058d0:	465b      	mov	r3, fp
 80058d2:	464d      	mov	r5, r9
 80058d4:	e770      	b.n	80057b8 <_dtoa_r+0x388>
 80058d6:	4a95      	ldr	r2, [pc, #596]	; (8005b2c <_dtoa_r+0x6fc>)
 80058d8:	eb02 02c5 	add.w	r2, r2, r5, lsl #3
 80058dc:	ed12 4b02 	vldr	d4, [r2, #-8]
 80058e0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80058e2:	ec41 0b17 	vmov	d7, r0, r1
 80058e6:	b35a      	cbz	r2, 8005940 <_dtoa_r+0x510>
 80058e8:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 80058ec:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 80058f0:	9e04      	ldr	r6, [sp, #16]
 80058f2:	ee83 5b04 	vdiv.f64	d5, d3, d4
 80058f6:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 80058fa:	ee35 7b47 	vsub.f64	d7, d5, d7
 80058fe:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8005902:	ee14 2a90 	vmov	r2, s9
 8005906:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800590a:	3230      	adds	r2, #48	; 0x30
 800590c:	ee36 6b45 	vsub.f64	d6, d6, d5
 8005910:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8005914:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005918:	f806 2b01 	strb.w	r2, [r6], #1
 800591c:	d43b      	bmi.n	8005996 <_dtoa_r+0x566>
 800591e:	ee32 5b46 	vsub.f64	d5, d2, d6
 8005922:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8005926:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800592a:	d472      	bmi.n	8005a12 <_dtoa_r+0x5e2>
 800592c:	9a04      	ldr	r2, [sp, #16]
 800592e:	1ab2      	subs	r2, r6, r2
 8005930:	4295      	cmp	r5, r2
 8005932:	f77f af68 	ble.w	8005806 <_dtoa_r+0x3d6>
 8005936:	ee27 7b03 	vmul.f64	d7, d7, d3
 800593a:	ee26 6b03 	vmul.f64	d6, d6, d3
 800593e:	e7de      	b.n	80058fe <_dtoa_r+0x4ce>
 8005940:	9a04      	ldr	r2, [sp, #16]
 8005942:	ee24 7b07 	vmul.f64	d7, d4, d7
 8005946:	1956      	adds	r6, r2, r5
 8005948:	4611      	mov	r1, r2
 800594a:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800594e:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8005952:	ee14 2a90 	vmov	r2, s9
 8005956:	3230      	adds	r2, #48	; 0x30
 8005958:	f801 2b01 	strb.w	r2, [r1], #1
 800595c:	42b1      	cmp	r1, r6
 800595e:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8005962:	ee36 6b45 	vsub.f64	d6, d6, d5
 8005966:	d11a      	bne.n	800599e <_dtoa_r+0x56e>
 8005968:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800596c:	ee37 4b05 	vadd.f64	d4, d7, d5
 8005970:	eeb4 6bc4 	vcmpe.f64	d6, d4
 8005974:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005978:	dc4b      	bgt.n	8005a12 <_dtoa_r+0x5e2>
 800597a:	ee35 7b47 	vsub.f64	d7, d5, d7
 800597e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8005982:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005986:	f57f af3e 	bpl.w	8005806 <_dtoa_r+0x3d6>
 800598a:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800598e:	2a30      	cmp	r2, #48	; 0x30
 8005990:	f106 31ff 	add.w	r1, r6, #4294967295
 8005994:	d001      	beq.n	800599a <_dtoa_r+0x56a>
 8005996:	469b      	mov	fp, r3
 8005998:	e02a      	b.n	80059f0 <_dtoa_r+0x5c0>
 800599a:	460e      	mov	r6, r1
 800599c:	e7f5      	b.n	800598a <_dtoa_r+0x55a>
 800599e:	ee26 6b03 	vmul.f64	d6, d6, d3
 80059a2:	e7d4      	b.n	800594e <_dtoa_r+0x51e>
 80059a4:	ed9d 7b02 	vldr	d7, [sp, #8]
 80059a8:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 80059ac:	9e04      	ldr	r6, [sp, #16]
 80059ae:	ee87 5b06 	vdiv.f64	d5, d7, d6
 80059b2:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 80059b6:	ee15 3a10 	vmov	r3, s10
 80059ba:	3330      	adds	r3, #48	; 0x30
 80059bc:	f806 3b01 	strb.w	r3, [r6], #1
 80059c0:	9b04      	ldr	r3, [sp, #16]
 80059c2:	1af3      	subs	r3, r6, r3
 80059c4:	4599      	cmp	r9, r3
 80059c6:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 80059ca:	eea3 7b46 	vfms.f64	d7, d3, d6
 80059ce:	d133      	bne.n	8005a38 <_dtoa_r+0x608>
 80059d0:	ee37 7b07 	vadd.f64	d7, d7, d7
 80059d4:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80059d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80059dc:	dc18      	bgt.n	8005a10 <_dtoa_r+0x5e0>
 80059de:	eeb4 7b46 	vcmp.f64	d7, d6
 80059e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80059e6:	d103      	bne.n	80059f0 <_dtoa_r+0x5c0>
 80059e8:	ee15 3a10 	vmov	r3, s10
 80059ec:	07db      	lsls	r3, r3, #31
 80059ee:	d40f      	bmi.n	8005a10 <_dtoa_r+0x5e0>
 80059f0:	9901      	ldr	r1, [sp, #4]
 80059f2:	4620      	mov	r0, r4
 80059f4:	f000 fabd 	bl	8005f72 <_Bfree>
 80059f8:	2300      	movs	r3, #0
 80059fa:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80059fc:	7033      	strb	r3, [r6, #0]
 80059fe:	f10b 0301 	add.w	r3, fp, #1
 8005a02:	6013      	str	r3, [r2, #0]
 8005a04:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	f43f ad5b 	beq.w	80054c2 <_dtoa_r+0x92>
 8005a0c:	601e      	str	r6, [r3, #0]
 8005a0e:	e558      	b.n	80054c2 <_dtoa_r+0x92>
 8005a10:	465b      	mov	r3, fp
 8005a12:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8005a16:	2939      	cmp	r1, #57	; 0x39
 8005a18:	f106 32ff 	add.w	r2, r6, #4294967295
 8005a1c:	d106      	bne.n	8005a2c <_dtoa_r+0x5fc>
 8005a1e:	9904      	ldr	r1, [sp, #16]
 8005a20:	4291      	cmp	r1, r2
 8005a22:	d107      	bne.n	8005a34 <_dtoa_r+0x604>
 8005a24:	2230      	movs	r2, #48	; 0x30
 8005a26:	700a      	strb	r2, [r1, #0]
 8005a28:	3301      	adds	r3, #1
 8005a2a:	460a      	mov	r2, r1
 8005a2c:	7811      	ldrb	r1, [r2, #0]
 8005a2e:	3101      	adds	r1, #1
 8005a30:	7011      	strb	r1, [r2, #0]
 8005a32:	e7b0      	b.n	8005996 <_dtoa_r+0x566>
 8005a34:	4616      	mov	r6, r2
 8005a36:	e7ec      	b.n	8005a12 <_dtoa_r+0x5e2>
 8005a38:	ee27 7b04 	vmul.f64	d7, d7, d4
 8005a3c:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8005a40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005a44:	d1b3      	bne.n	80059ae <_dtoa_r+0x57e>
 8005a46:	e7d3      	b.n	80059f0 <_dtoa_r+0x5c0>
 8005a48:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005a4a:	2a00      	cmp	r2, #0
 8005a4c:	f000 808d 	beq.w	8005b6a <_dtoa_r+0x73a>
 8005a50:	9a08      	ldr	r2, [sp, #32]
 8005a52:	2a01      	cmp	r2, #1
 8005a54:	dc72      	bgt.n	8005b3c <_dtoa_r+0x70c>
 8005a56:	2f00      	cmp	r7, #0
 8005a58:	d06c      	beq.n	8005b34 <_dtoa_r+0x704>
 8005a5a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8005a5e:	4645      	mov	r5, r8
 8005a60:	4656      	mov	r6, sl
 8005a62:	9a07      	ldr	r2, [sp, #28]
 8005a64:	2101      	movs	r1, #1
 8005a66:	441a      	add	r2, r3
 8005a68:	4620      	mov	r0, r4
 8005a6a:	449a      	add	sl, r3
 8005a6c:	9207      	str	r2, [sp, #28]
 8005a6e:	f000 fb20 	bl	80060b2 <__i2b>
 8005a72:	4607      	mov	r7, r0
 8005a74:	2e00      	cmp	r6, #0
 8005a76:	dd0b      	ble.n	8005a90 <_dtoa_r+0x660>
 8005a78:	9b07      	ldr	r3, [sp, #28]
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	dd08      	ble.n	8005a90 <_dtoa_r+0x660>
 8005a7e:	42b3      	cmp	r3, r6
 8005a80:	9a07      	ldr	r2, [sp, #28]
 8005a82:	bfa8      	it	ge
 8005a84:	4633      	movge	r3, r6
 8005a86:	ebaa 0a03 	sub.w	sl, sl, r3
 8005a8a:	1af6      	subs	r6, r6, r3
 8005a8c:	1ad3      	subs	r3, r2, r3
 8005a8e:	9307      	str	r3, [sp, #28]
 8005a90:	f1b8 0f00 	cmp.w	r8, #0
 8005a94:	d01d      	beq.n	8005ad2 <_dtoa_r+0x6a2>
 8005a96:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d06a      	beq.n	8005b72 <_dtoa_r+0x742>
 8005a9c:	b18d      	cbz	r5, 8005ac2 <_dtoa_r+0x692>
 8005a9e:	4639      	mov	r1, r7
 8005aa0:	462a      	mov	r2, r5
 8005aa2:	4620      	mov	r0, r4
 8005aa4:	f000 fba4 	bl	80061f0 <__pow5mult>
 8005aa8:	9a01      	ldr	r2, [sp, #4]
 8005aaa:	4601      	mov	r1, r0
 8005aac:	4607      	mov	r7, r0
 8005aae:	4620      	mov	r0, r4
 8005ab0:	f000 fb08 	bl	80060c4 <__multiply>
 8005ab4:	9901      	ldr	r1, [sp, #4]
 8005ab6:	900c      	str	r0, [sp, #48]	; 0x30
 8005ab8:	4620      	mov	r0, r4
 8005aba:	f000 fa5a 	bl	8005f72 <_Bfree>
 8005abe:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005ac0:	9301      	str	r3, [sp, #4]
 8005ac2:	ebb8 0205 	subs.w	r2, r8, r5
 8005ac6:	d004      	beq.n	8005ad2 <_dtoa_r+0x6a2>
 8005ac8:	9901      	ldr	r1, [sp, #4]
 8005aca:	4620      	mov	r0, r4
 8005acc:	f000 fb90 	bl	80061f0 <__pow5mult>
 8005ad0:	9001      	str	r0, [sp, #4]
 8005ad2:	2101      	movs	r1, #1
 8005ad4:	4620      	mov	r0, r4
 8005ad6:	f000 faec 	bl	80060b2 <__i2b>
 8005ada:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005adc:	4605      	mov	r5, r0
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	f000 81ca 	beq.w	8005e78 <_dtoa_r+0xa48>
 8005ae4:	461a      	mov	r2, r3
 8005ae6:	4601      	mov	r1, r0
 8005ae8:	4620      	mov	r0, r4
 8005aea:	f000 fb81 	bl	80061f0 <__pow5mult>
 8005aee:	9b08      	ldr	r3, [sp, #32]
 8005af0:	2b01      	cmp	r3, #1
 8005af2:	4605      	mov	r5, r0
 8005af4:	dc44      	bgt.n	8005b80 <_dtoa_r+0x750>
 8005af6:	9b02      	ldr	r3, [sp, #8]
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d13c      	bne.n	8005b76 <_dtoa_r+0x746>
 8005afc:	9b03      	ldr	r3, [sp, #12]
 8005afe:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d137      	bne.n	8005b76 <_dtoa_r+0x746>
 8005b06:	9b03      	ldr	r3, [sp, #12]
 8005b08:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005b0c:	0d1b      	lsrs	r3, r3, #20
 8005b0e:	051b      	lsls	r3, r3, #20
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d033      	beq.n	8005b7c <_dtoa_r+0x74c>
 8005b14:	9b07      	ldr	r3, [sp, #28]
 8005b16:	3301      	adds	r3, #1
 8005b18:	f10a 0a01 	add.w	sl, sl, #1
 8005b1c:	9307      	str	r3, [sp, #28]
 8005b1e:	f04f 0801 	mov.w	r8, #1
 8005b22:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005b24:	bb73      	cbnz	r3, 8005b84 <_dtoa_r+0x754>
 8005b26:	2001      	movs	r0, #1
 8005b28:	e034      	b.n	8005b94 <_dtoa_r+0x764>
 8005b2a:	bf00      	nop
 8005b2c:	08006670 	.word	0x08006670
 8005b30:	08006648 	.word	0x08006648
 8005b34:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005b36:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8005b3a:	e790      	b.n	8005a5e <_dtoa_r+0x62e>
 8005b3c:	f109 35ff 	add.w	r5, r9, #4294967295
 8005b40:	45a8      	cmp	r8, r5
 8005b42:	bfbf      	itttt	lt
 8005b44:	9b0b      	ldrlt	r3, [sp, #44]	; 0x2c
 8005b46:	eba5 0808 	sublt.w	r8, r5, r8
 8005b4a:	4443      	addlt	r3, r8
 8005b4c:	930b      	strlt	r3, [sp, #44]	; 0x2c
 8005b4e:	bfb6      	itet	lt
 8005b50:	46a8      	movlt	r8, r5
 8005b52:	eba8 0505 	subge.w	r5, r8, r5
 8005b56:	2500      	movlt	r5, #0
 8005b58:	f1b9 0f00 	cmp.w	r9, #0
 8005b5c:	bfb9      	ittee	lt
 8005b5e:	ebaa 0609 	sublt.w	r6, sl, r9
 8005b62:	2300      	movlt	r3, #0
 8005b64:	4656      	movge	r6, sl
 8005b66:	464b      	movge	r3, r9
 8005b68:	e77b      	b.n	8005a62 <_dtoa_r+0x632>
 8005b6a:	4645      	mov	r5, r8
 8005b6c:	4656      	mov	r6, sl
 8005b6e:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8005b70:	e780      	b.n	8005a74 <_dtoa_r+0x644>
 8005b72:	4642      	mov	r2, r8
 8005b74:	e7a8      	b.n	8005ac8 <_dtoa_r+0x698>
 8005b76:	f04f 0800 	mov.w	r8, #0
 8005b7a:	e7d2      	b.n	8005b22 <_dtoa_r+0x6f2>
 8005b7c:	4698      	mov	r8, r3
 8005b7e:	e7d0      	b.n	8005b22 <_dtoa_r+0x6f2>
 8005b80:	f04f 0800 	mov.w	r8, #0
 8005b84:	692b      	ldr	r3, [r5, #16]
 8005b86:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8005b8a:	6918      	ldr	r0, [r3, #16]
 8005b8c:	f000 fa43 	bl	8006016 <__hi0bits>
 8005b90:	f1c0 0020 	rsb	r0, r0, #32
 8005b94:	9b07      	ldr	r3, [sp, #28]
 8005b96:	4418      	add	r0, r3
 8005b98:	f010 001f 	ands.w	r0, r0, #31
 8005b9c:	d047      	beq.n	8005c2e <_dtoa_r+0x7fe>
 8005b9e:	f1c0 0320 	rsb	r3, r0, #32
 8005ba2:	2b04      	cmp	r3, #4
 8005ba4:	dd3b      	ble.n	8005c1e <_dtoa_r+0x7ee>
 8005ba6:	9b07      	ldr	r3, [sp, #28]
 8005ba8:	f1c0 001c 	rsb	r0, r0, #28
 8005bac:	4482      	add	sl, r0
 8005bae:	4406      	add	r6, r0
 8005bb0:	4403      	add	r3, r0
 8005bb2:	9307      	str	r3, [sp, #28]
 8005bb4:	f1ba 0f00 	cmp.w	sl, #0
 8005bb8:	dd05      	ble.n	8005bc6 <_dtoa_r+0x796>
 8005bba:	4652      	mov	r2, sl
 8005bbc:	9901      	ldr	r1, [sp, #4]
 8005bbe:	4620      	mov	r0, r4
 8005bc0:	f000 fb64 	bl	800628c <__lshift>
 8005bc4:	9001      	str	r0, [sp, #4]
 8005bc6:	9b07      	ldr	r3, [sp, #28]
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	dd05      	ble.n	8005bd8 <_dtoa_r+0x7a8>
 8005bcc:	4629      	mov	r1, r5
 8005bce:	461a      	mov	r2, r3
 8005bd0:	4620      	mov	r0, r4
 8005bd2:	f000 fb5b 	bl	800628c <__lshift>
 8005bd6:	4605      	mov	r5, r0
 8005bd8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005bda:	b353      	cbz	r3, 8005c32 <_dtoa_r+0x802>
 8005bdc:	4629      	mov	r1, r5
 8005bde:	9801      	ldr	r0, [sp, #4]
 8005be0:	f000 fba8 	bl	8006334 <__mcmp>
 8005be4:	2800      	cmp	r0, #0
 8005be6:	da24      	bge.n	8005c32 <_dtoa_r+0x802>
 8005be8:	2300      	movs	r3, #0
 8005bea:	220a      	movs	r2, #10
 8005bec:	9901      	ldr	r1, [sp, #4]
 8005bee:	4620      	mov	r0, r4
 8005bf0:	f000 f9d6 	bl	8005fa0 <__multadd>
 8005bf4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005bf6:	9001      	str	r0, [sp, #4]
 8005bf8:	f10b 3bff 	add.w	fp, fp, #4294967295
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	f000 8142 	beq.w	8005e86 <_dtoa_r+0xa56>
 8005c02:	2300      	movs	r3, #0
 8005c04:	4639      	mov	r1, r7
 8005c06:	220a      	movs	r2, #10
 8005c08:	4620      	mov	r0, r4
 8005c0a:	f000 f9c9 	bl	8005fa0 <__multadd>
 8005c0e:	9b06      	ldr	r3, [sp, #24]
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	4607      	mov	r7, r0
 8005c14:	dc4b      	bgt.n	8005cae <_dtoa_r+0x87e>
 8005c16:	9b08      	ldr	r3, [sp, #32]
 8005c18:	2b02      	cmp	r3, #2
 8005c1a:	dd48      	ble.n	8005cae <_dtoa_r+0x87e>
 8005c1c:	e011      	b.n	8005c42 <_dtoa_r+0x812>
 8005c1e:	d0c9      	beq.n	8005bb4 <_dtoa_r+0x784>
 8005c20:	9a07      	ldr	r2, [sp, #28]
 8005c22:	331c      	adds	r3, #28
 8005c24:	441a      	add	r2, r3
 8005c26:	449a      	add	sl, r3
 8005c28:	441e      	add	r6, r3
 8005c2a:	4613      	mov	r3, r2
 8005c2c:	e7c1      	b.n	8005bb2 <_dtoa_r+0x782>
 8005c2e:	4603      	mov	r3, r0
 8005c30:	e7f6      	b.n	8005c20 <_dtoa_r+0x7f0>
 8005c32:	f1b9 0f00 	cmp.w	r9, #0
 8005c36:	dc34      	bgt.n	8005ca2 <_dtoa_r+0x872>
 8005c38:	9b08      	ldr	r3, [sp, #32]
 8005c3a:	2b02      	cmp	r3, #2
 8005c3c:	dd31      	ble.n	8005ca2 <_dtoa_r+0x872>
 8005c3e:	f8cd 9018 	str.w	r9, [sp, #24]
 8005c42:	9b06      	ldr	r3, [sp, #24]
 8005c44:	b963      	cbnz	r3, 8005c60 <_dtoa_r+0x830>
 8005c46:	4629      	mov	r1, r5
 8005c48:	2205      	movs	r2, #5
 8005c4a:	4620      	mov	r0, r4
 8005c4c:	f000 f9a8 	bl	8005fa0 <__multadd>
 8005c50:	4601      	mov	r1, r0
 8005c52:	4605      	mov	r5, r0
 8005c54:	9801      	ldr	r0, [sp, #4]
 8005c56:	f000 fb6d 	bl	8006334 <__mcmp>
 8005c5a:	2800      	cmp	r0, #0
 8005c5c:	f73f adfc 	bgt.w	8005858 <_dtoa_r+0x428>
 8005c60:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005c62:	9e04      	ldr	r6, [sp, #16]
 8005c64:	ea6f 0b03 	mvn.w	fp, r3
 8005c68:	f04f 0900 	mov.w	r9, #0
 8005c6c:	4629      	mov	r1, r5
 8005c6e:	4620      	mov	r0, r4
 8005c70:	f000 f97f 	bl	8005f72 <_Bfree>
 8005c74:	2f00      	cmp	r7, #0
 8005c76:	f43f aebb 	beq.w	80059f0 <_dtoa_r+0x5c0>
 8005c7a:	f1b9 0f00 	cmp.w	r9, #0
 8005c7e:	d005      	beq.n	8005c8c <_dtoa_r+0x85c>
 8005c80:	45b9      	cmp	r9, r7
 8005c82:	d003      	beq.n	8005c8c <_dtoa_r+0x85c>
 8005c84:	4649      	mov	r1, r9
 8005c86:	4620      	mov	r0, r4
 8005c88:	f000 f973 	bl	8005f72 <_Bfree>
 8005c8c:	4639      	mov	r1, r7
 8005c8e:	4620      	mov	r0, r4
 8005c90:	f000 f96f 	bl	8005f72 <_Bfree>
 8005c94:	e6ac      	b.n	80059f0 <_dtoa_r+0x5c0>
 8005c96:	2500      	movs	r5, #0
 8005c98:	462f      	mov	r7, r5
 8005c9a:	e7e1      	b.n	8005c60 <_dtoa_r+0x830>
 8005c9c:	469b      	mov	fp, r3
 8005c9e:	462f      	mov	r7, r5
 8005ca0:	e5da      	b.n	8005858 <_dtoa_r+0x428>
 8005ca2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005ca4:	f8cd 9018 	str.w	r9, [sp, #24]
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	f000 80f3 	beq.w	8005e94 <_dtoa_r+0xa64>
 8005cae:	2e00      	cmp	r6, #0
 8005cb0:	dd05      	ble.n	8005cbe <_dtoa_r+0x88e>
 8005cb2:	4639      	mov	r1, r7
 8005cb4:	4632      	mov	r2, r6
 8005cb6:	4620      	mov	r0, r4
 8005cb8:	f000 fae8 	bl	800628c <__lshift>
 8005cbc:	4607      	mov	r7, r0
 8005cbe:	f1b8 0f00 	cmp.w	r8, #0
 8005cc2:	d04c      	beq.n	8005d5e <_dtoa_r+0x92e>
 8005cc4:	6879      	ldr	r1, [r7, #4]
 8005cc6:	4620      	mov	r0, r4
 8005cc8:	f000 f91f 	bl	8005f0a <_Balloc>
 8005ccc:	693a      	ldr	r2, [r7, #16]
 8005cce:	3202      	adds	r2, #2
 8005cd0:	4606      	mov	r6, r0
 8005cd2:	0092      	lsls	r2, r2, #2
 8005cd4:	f107 010c 	add.w	r1, r7, #12
 8005cd8:	300c      	adds	r0, #12
 8005cda:	f000 f90b 	bl	8005ef4 <memcpy>
 8005cde:	2201      	movs	r2, #1
 8005ce0:	4631      	mov	r1, r6
 8005ce2:	4620      	mov	r0, r4
 8005ce4:	f000 fad2 	bl	800628c <__lshift>
 8005ce8:	9b02      	ldr	r3, [sp, #8]
 8005cea:	f8dd a010 	ldr.w	sl, [sp, #16]
 8005cee:	f003 0301 	and.w	r3, r3, #1
 8005cf2:	46b9      	mov	r9, r7
 8005cf4:	9307      	str	r3, [sp, #28]
 8005cf6:	4607      	mov	r7, r0
 8005cf8:	4629      	mov	r1, r5
 8005cfa:	9801      	ldr	r0, [sp, #4]
 8005cfc:	f7ff fb09 	bl	8005312 <quorem>
 8005d00:	4649      	mov	r1, r9
 8005d02:	4606      	mov	r6, r0
 8005d04:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8005d08:	9801      	ldr	r0, [sp, #4]
 8005d0a:	f000 fb13 	bl	8006334 <__mcmp>
 8005d0e:	463a      	mov	r2, r7
 8005d10:	9002      	str	r0, [sp, #8]
 8005d12:	4629      	mov	r1, r5
 8005d14:	4620      	mov	r0, r4
 8005d16:	f000 fb27 	bl	8006368 <__mdiff>
 8005d1a:	68c3      	ldr	r3, [r0, #12]
 8005d1c:	4602      	mov	r2, r0
 8005d1e:	bb03      	cbnz	r3, 8005d62 <_dtoa_r+0x932>
 8005d20:	4601      	mov	r1, r0
 8005d22:	9009      	str	r0, [sp, #36]	; 0x24
 8005d24:	9801      	ldr	r0, [sp, #4]
 8005d26:	f000 fb05 	bl	8006334 <__mcmp>
 8005d2a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005d2c:	4603      	mov	r3, r0
 8005d2e:	4611      	mov	r1, r2
 8005d30:	4620      	mov	r0, r4
 8005d32:	9309      	str	r3, [sp, #36]	; 0x24
 8005d34:	f000 f91d 	bl	8005f72 <_Bfree>
 8005d38:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005d3a:	b9a3      	cbnz	r3, 8005d66 <_dtoa_r+0x936>
 8005d3c:	9a08      	ldr	r2, [sp, #32]
 8005d3e:	b992      	cbnz	r2, 8005d66 <_dtoa_r+0x936>
 8005d40:	9a07      	ldr	r2, [sp, #28]
 8005d42:	b982      	cbnz	r2, 8005d66 <_dtoa_r+0x936>
 8005d44:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8005d48:	d029      	beq.n	8005d9e <_dtoa_r+0x96e>
 8005d4a:	9b02      	ldr	r3, [sp, #8]
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	dd01      	ble.n	8005d54 <_dtoa_r+0x924>
 8005d50:	f106 0831 	add.w	r8, r6, #49	; 0x31
 8005d54:	f10a 0601 	add.w	r6, sl, #1
 8005d58:	f88a 8000 	strb.w	r8, [sl]
 8005d5c:	e786      	b.n	8005c6c <_dtoa_r+0x83c>
 8005d5e:	4638      	mov	r0, r7
 8005d60:	e7c2      	b.n	8005ce8 <_dtoa_r+0x8b8>
 8005d62:	2301      	movs	r3, #1
 8005d64:	e7e3      	b.n	8005d2e <_dtoa_r+0x8fe>
 8005d66:	9a02      	ldr	r2, [sp, #8]
 8005d68:	2a00      	cmp	r2, #0
 8005d6a:	db04      	blt.n	8005d76 <_dtoa_r+0x946>
 8005d6c:	d124      	bne.n	8005db8 <_dtoa_r+0x988>
 8005d6e:	9a08      	ldr	r2, [sp, #32]
 8005d70:	bb12      	cbnz	r2, 8005db8 <_dtoa_r+0x988>
 8005d72:	9a07      	ldr	r2, [sp, #28]
 8005d74:	bb02      	cbnz	r2, 8005db8 <_dtoa_r+0x988>
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	ddec      	ble.n	8005d54 <_dtoa_r+0x924>
 8005d7a:	2201      	movs	r2, #1
 8005d7c:	9901      	ldr	r1, [sp, #4]
 8005d7e:	4620      	mov	r0, r4
 8005d80:	f000 fa84 	bl	800628c <__lshift>
 8005d84:	4629      	mov	r1, r5
 8005d86:	9001      	str	r0, [sp, #4]
 8005d88:	f000 fad4 	bl	8006334 <__mcmp>
 8005d8c:	2800      	cmp	r0, #0
 8005d8e:	dc03      	bgt.n	8005d98 <_dtoa_r+0x968>
 8005d90:	d1e0      	bne.n	8005d54 <_dtoa_r+0x924>
 8005d92:	f018 0f01 	tst.w	r8, #1
 8005d96:	d0dd      	beq.n	8005d54 <_dtoa_r+0x924>
 8005d98:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8005d9c:	d1d8      	bne.n	8005d50 <_dtoa_r+0x920>
 8005d9e:	2339      	movs	r3, #57	; 0x39
 8005da0:	f10a 0601 	add.w	r6, sl, #1
 8005da4:	f88a 3000 	strb.w	r3, [sl]
 8005da8:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8005dac:	2b39      	cmp	r3, #57	; 0x39
 8005dae:	f106 32ff 	add.w	r2, r6, #4294967295
 8005db2:	d04c      	beq.n	8005e4e <_dtoa_r+0xa1e>
 8005db4:	3301      	adds	r3, #1
 8005db6:	e051      	b.n	8005e5c <_dtoa_r+0xa2c>
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	f10a 0601 	add.w	r6, sl, #1
 8005dbe:	dd05      	ble.n	8005dcc <_dtoa_r+0x99c>
 8005dc0:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8005dc4:	d0eb      	beq.n	8005d9e <_dtoa_r+0x96e>
 8005dc6:	f108 0801 	add.w	r8, r8, #1
 8005dca:	e7c5      	b.n	8005d58 <_dtoa_r+0x928>
 8005dcc:	9b04      	ldr	r3, [sp, #16]
 8005dce:	9a06      	ldr	r2, [sp, #24]
 8005dd0:	f806 8c01 	strb.w	r8, [r6, #-1]
 8005dd4:	1af3      	subs	r3, r6, r3
 8005dd6:	4293      	cmp	r3, r2
 8005dd8:	d021      	beq.n	8005e1e <_dtoa_r+0x9ee>
 8005dda:	2300      	movs	r3, #0
 8005ddc:	220a      	movs	r2, #10
 8005dde:	9901      	ldr	r1, [sp, #4]
 8005de0:	4620      	mov	r0, r4
 8005de2:	f000 f8dd 	bl	8005fa0 <__multadd>
 8005de6:	45b9      	cmp	r9, r7
 8005de8:	9001      	str	r0, [sp, #4]
 8005dea:	f04f 0300 	mov.w	r3, #0
 8005dee:	f04f 020a 	mov.w	r2, #10
 8005df2:	4649      	mov	r1, r9
 8005df4:	4620      	mov	r0, r4
 8005df6:	d105      	bne.n	8005e04 <_dtoa_r+0x9d4>
 8005df8:	f000 f8d2 	bl	8005fa0 <__multadd>
 8005dfc:	4681      	mov	r9, r0
 8005dfe:	4607      	mov	r7, r0
 8005e00:	46b2      	mov	sl, r6
 8005e02:	e779      	b.n	8005cf8 <_dtoa_r+0x8c8>
 8005e04:	f000 f8cc 	bl	8005fa0 <__multadd>
 8005e08:	4639      	mov	r1, r7
 8005e0a:	4681      	mov	r9, r0
 8005e0c:	2300      	movs	r3, #0
 8005e0e:	220a      	movs	r2, #10
 8005e10:	4620      	mov	r0, r4
 8005e12:	f000 f8c5 	bl	8005fa0 <__multadd>
 8005e16:	4607      	mov	r7, r0
 8005e18:	e7f2      	b.n	8005e00 <_dtoa_r+0x9d0>
 8005e1a:	f04f 0900 	mov.w	r9, #0
 8005e1e:	2201      	movs	r2, #1
 8005e20:	9901      	ldr	r1, [sp, #4]
 8005e22:	4620      	mov	r0, r4
 8005e24:	f000 fa32 	bl	800628c <__lshift>
 8005e28:	4629      	mov	r1, r5
 8005e2a:	9001      	str	r0, [sp, #4]
 8005e2c:	f000 fa82 	bl	8006334 <__mcmp>
 8005e30:	2800      	cmp	r0, #0
 8005e32:	dcb9      	bgt.n	8005da8 <_dtoa_r+0x978>
 8005e34:	d102      	bne.n	8005e3c <_dtoa_r+0xa0c>
 8005e36:	f018 0f01 	tst.w	r8, #1
 8005e3a:	d1b5      	bne.n	8005da8 <_dtoa_r+0x978>
 8005e3c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8005e40:	2b30      	cmp	r3, #48	; 0x30
 8005e42:	f106 32ff 	add.w	r2, r6, #4294967295
 8005e46:	f47f af11 	bne.w	8005c6c <_dtoa_r+0x83c>
 8005e4a:	4616      	mov	r6, r2
 8005e4c:	e7f6      	b.n	8005e3c <_dtoa_r+0xa0c>
 8005e4e:	9b04      	ldr	r3, [sp, #16]
 8005e50:	4293      	cmp	r3, r2
 8005e52:	d105      	bne.n	8005e60 <_dtoa_r+0xa30>
 8005e54:	9a04      	ldr	r2, [sp, #16]
 8005e56:	f10b 0b01 	add.w	fp, fp, #1
 8005e5a:	2331      	movs	r3, #49	; 0x31
 8005e5c:	7013      	strb	r3, [r2, #0]
 8005e5e:	e705      	b.n	8005c6c <_dtoa_r+0x83c>
 8005e60:	4616      	mov	r6, r2
 8005e62:	e7a1      	b.n	8005da8 <_dtoa_r+0x978>
 8005e64:	4b16      	ldr	r3, [pc, #88]	; (8005ec0 <_dtoa_r+0xa90>)
 8005e66:	f7ff bb48 	b.w	80054fa <_dtoa_r+0xca>
 8005e6a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	f47f ab23 	bne.w	80054b8 <_dtoa_r+0x88>
 8005e72:	4b14      	ldr	r3, [pc, #80]	; (8005ec4 <_dtoa_r+0xa94>)
 8005e74:	f7ff bb41 	b.w	80054fa <_dtoa_r+0xca>
 8005e78:	9b08      	ldr	r3, [sp, #32]
 8005e7a:	2b01      	cmp	r3, #1
 8005e7c:	f77f ae3b 	ble.w	8005af6 <_dtoa_r+0x6c6>
 8005e80:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 8005e84:	e64f      	b.n	8005b26 <_dtoa_r+0x6f6>
 8005e86:	9b06      	ldr	r3, [sp, #24]
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	dc03      	bgt.n	8005e94 <_dtoa_r+0xa64>
 8005e8c:	9b08      	ldr	r3, [sp, #32]
 8005e8e:	2b02      	cmp	r3, #2
 8005e90:	f73f aed7 	bgt.w	8005c42 <_dtoa_r+0x812>
 8005e94:	9e04      	ldr	r6, [sp, #16]
 8005e96:	9801      	ldr	r0, [sp, #4]
 8005e98:	4629      	mov	r1, r5
 8005e9a:	f7ff fa3a 	bl	8005312 <quorem>
 8005e9e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8005ea2:	f806 8b01 	strb.w	r8, [r6], #1
 8005ea6:	9b04      	ldr	r3, [sp, #16]
 8005ea8:	9a06      	ldr	r2, [sp, #24]
 8005eaa:	1af3      	subs	r3, r6, r3
 8005eac:	429a      	cmp	r2, r3
 8005eae:	ddb4      	ble.n	8005e1a <_dtoa_r+0x9ea>
 8005eb0:	2300      	movs	r3, #0
 8005eb2:	220a      	movs	r2, #10
 8005eb4:	9901      	ldr	r1, [sp, #4]
 8005eb6:	4620      	mov	r0, r4
 8005eb8:	f000 f872 	bl	8005fa0 <__multadd>
 8005ebc:	9001      	str	r0, [sp, #4]
 8005ebe:	e7ea      	b.n	8005e96 <_dtoa_r+0xa66>
 8005ec0:	08006638 	.word	0x08006638
 8005ec4:	0800663a 	.word	0x0800663a

08005ec8 <_localeconv_r>:
 8005ec8:	4b04      	ldr	r3, [pc, #16]	; (8005edc <_localeconv_r+0x14>)
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	6a18      	ldr	r0, [r3, #32]
 8005ece:	4b04      	ldr	r3, [pc, #16]	; (8005ee0 <_localeconv_r+0x18>)
 8005ed0:	2800      	cmp	r0, #0
 8005ed2:	bf08      	it	eq
 8005ed4:	4618      	moveq	r0, r3
 8005ed6:	30f0      	adds	r0, #240	; 0xf0
 8005ed8:	4770      	bx	lr
 8005eda:	bf00      	nop
 8005edc:	2000000c 	.word	0x2000000c
 8005ee0:	20000070 	.word	0x20000070

08005ee4 <malloc>:
 8005ee4:	4b02      	ldr	r3, [pc, #8]	; (8005ef0 <malloc+0xc>)
 8005ee6:	4601      	mov	r1, r0
 8005ee8:	6818      	ldr	r0, [r3, #0]
 8005eea:	f000 baf7 	b.w	80064dc <_malloc_r>
 8005eee:	bf00      	nop
 8005ef0:	2000000c 	.word	0x2000000c

08005ef4 <memcpy>:
 8005ef4:	b510      	push	{r4, lr}
 8005ef6:	1e43      	subs	r3, r0, #1
 8005ef8:	440a      	add	r2, r1
 8005efa:	4291      	cmp	r1, r2
 8005efc:	d100      	bne.n	8005f00 <memcpy+0xc>
 8005efe:	bd10      	pop	{r4, pc}
 8005f00:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005f04:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005f08:	e7f7      	b.n	8005efa <memcpy+0x6>

08005f0a <_Balloc>:
 8005f0a:	b570      	push	{r4, r5, r6, lr}
 8005f0c:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8005f0e:	4604      	mov	r4, r0
 8005f10:	460e      	mov	r6, r1
 8005f12:	b93d      	cbnz	r5, 8005f24 <_Balloc+0x1a>
 8005f14:	2010      	movs	r0, #16
 8005f16:	f7ff ffe5 	bl	8005ee4 <malloc>
 8005f1a:	6260      	str	r0, [r4, #36]	; 0x24
 8005f1c:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8005f20:	6005      	str	r5, [r0, #0]
 8005f22:	60c5      	str	r5, [r0, #12]
 8005f24:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8005f26:	68eb      	ldr	r3, [r5, #12]
 8005f28:	b183      	cbz	r3, 8005f4c <_Balloc+0x42>
 8005f2a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005f2c:	68db      	ldr	r3, [r3, #12]
 8005f2e:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8005f32:	b9b8      	cbnz	r0, 8005f64 <_Balloc+0x5a>
 8005f34:	2101      	movs	r1, #1
 8005f36:	fa01 f506 	lsl.w	r5, r1, r6
 8005f3a:	1d6a      	adds	r2, r5, #5
 8005f3c:	0092      	lsls	r2, r2, #2
 8005f3e:	4620      	mov	r0, r4
 8005f40:	f000 fabe 	bl	80064c0 <_calloc_r>
 8005f44:	b160      	cbz	r0, 8005f60 <_Balloc+0x56>
 8005f46:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8005f4a:	e00e      	b.n	8005f6a <_Balloc+0x60>
 8005f4c:	2221      	movs	r2, #33	; 0x21
 8005f4e:	2104      	movs	r1, #4
 8005f50:	4620      	mov	r0, r4
 8005f52:	f000 fab5 	bl	80064c0 <_calloc_r>
 8005f56:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005f58:	60e8      	str	r0, [r5, #12]
 8005f5a:	68db      	ldr	r3, [r3, #12]
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d1e4      	bne.n	8005f2a <_Balloc+0x20>
 8005f60:	2000      	movs	r0, #0
 8005f62:	bd70      	pop	{r4, r5, r6, pc}
 8005f64:	6802      	ldr	r2, [r0, #0]
 8005f66:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8005f6a:	2300      	movs	r3, #0
 8005f6c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8005f70:	e7f7      	b.n	8005f62 <_Balloc+0x58>

08005f72 <_Bfree>:
 8005f72:	b570      	push	{r4, r5, r6, lr}
 8005f74:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8005f76:	4606      	mov	r6, r0
 8005f78:	460d      	mov	r5, r1
 8005f7a:	b93c      	cbnz	r4, 8005f8c <_Bfree+0x1a>
 8005f7c:	2010      	movs	r0, #16
 8005f7e:	f7ff ffb1 	bl	8005ee4 <malloc>
 8005f82:	6270      	str	r0, [r6, #36]	; 0x24
 8005f84:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005f88:	6004      	str	r4, [r0, #0]
 8005f8a:	60c4      	str	r4, [r0, #12]
 8005f8c:	b13d      	cbz	r5, 8005f9e <_Bfree+0x2c>
 8005f8e:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8005f90:	686a      	ldr	r2, [r5, #4]
 8005f92:	68db      	ldr	r3, [r3, #12]
 8005f94:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005f98:	6029      	str	r1, [r5, #0]
 8005f9a:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8005f9e:	bd70      	pop	{r4, r5, r6, pc}

08005fa0 <__multadd>:
 8005fa0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005fa4:	690d      	ldr	r5, [r1, #16]
 8005fa6:	461f      	mov	r7, r3
 8005fa8:	4606      	mov	r6, r0
 8005faa:	460c      	mov	r4, r1
 8005fac:	f101 0c14 	add.w	ip, r1, #20
 8005fb0:	2300      	movs	r3, #0
 8005fb2:	f8dc 0000 	ldr.w	r0, [ip]
 8005fb6:	b281      	uxth	r1, r0
 8005fb8:	fb02 7101 	mla	r1, r2, r1, r7
 8005fbc:	0c0f      	lsrs	r7, r1, #16
 8005fbe:	0c00      	lsrs	r0, r0, #16
 8005fc0:	fb02 7000 	mla	r0, r2, r0, r7
 8005fc4:	b289      	uxth	r1, r1
 8005fc6:	3301      	adds	r3, #1
 8005fc8:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8005fcc:	429d      	cmp	r5, r3
 8005fce:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8005fd2:	f84c 1b04 	str.w	r1, [ip], #4
 8005fd6:	dcec      	bgt.n	8005fb2 <__multadd+0x12>
 8005fd8:	b1d7      	cbz	r7, 8006010 <__multadd+0x70>
 8005fda:	68a3      	ldr	r3, [r4, #8]
 8005fdc:	42ab      	cmp	r3, r5
 8005fde:	dc12      	bgt.n	8006006 <__multadd+0x66>
 8005fe0:	6861      	ldr	r1, [r4, #4]
 8005fe2:	4630      	mov	r0, r6
 8005fe4:	3101      	adds	r1, #1
 8005fe6:	f7ff ff90 	bl	8005f0a <_Balloc>
 8005fea:	6922      	ldr	r2, [r4, #16]
 8005fec:	3202      	adds	r2, #2
 8005fee:	f104 010c 	add.w	r1, r4, #12
 8005ff2:	4680      	mov	r8, r0
 8005ff4:	0092      	lsls	r2, r2, #2
 8005ff6:	300c      	adds	r0, #12
 8005ff8:	f7ff ff7c 	bl	8005ef4 <memcpy>
 8005ffc:	4621      	mov	r1, r4
 8005ffe:	4630      	mov	r0, r6
 8006000:	f7ff ffb7 	bl	8005f72 <_Bfree>
 8006004:	4644      	mov	r4, r8
 8006006:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800600a:	3501      	adds	r5, #1
 800600c:	615f      	str	r7, [r3, #20]
 800600e:	6125      	str	r5, [r4, #16]
 8006010:	4620      	mov	r0, r4
 8006012:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08006016 <__hi0bits>:
 8006016:	0c02      	lsrs	r2, r0, #16
 8006018:	0412      	lsls	r2, r2, #16
 800601a:	4603      	mov	r3, r0
 800601c:	b9b2      	cbnz	r2, 800604c <__hi0bits+0x36>
 800601e:	0403      	lsls	r3, r0, #16
 8006020:	2010      	movs	r0, #16
 8006022:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8006026:	bf04      	itt	eq
 8006028:	021b      	lsleq	r3, r3, #8
 800602a:	3008      	addeq	r0, #8
 800602c:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8006030:	bf04      	itt	eq
 8006032:	011b      	lsleq	r3, r3, #4
 8006034:	3004      	addeq	r0, #4
 8006036:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800603a:	bf04      	itt	eq
 800603c:	009b      	lsleq	r3, r3, #2
 800603e:	3002      	addeq	r0, #2
 8006040:	2b00      	cmp	r3, #0
 8006042:	db06      	blt.n	8006052 <__hi0bits+0x3c>
 8006044:	005b      	lsls	r3, r3, #1
 8006046:	d503      	bpl.n	8006050 <__hi0bits+0x3a>
 8006048:	3001      	adds	r0, #1
 800604a:	4770      	bx	lr
 800604c:	2000      	movs	r0, #0
 800604e:	e7e8      	b.n	8006022 <__hi0bits+0xc>
 8006050:	2020      	movs	r0, #32
 8006052:	4770      	bx	lr

08006054 <__lo0bits>:
 8006054:	6803      	ldr	r3, [r0, #0]
 8006056:	f013 0207 	ands.w	r2, r3, #7
 800605a:	4601      	mov	r1, r0
 800605c:	d00b      	beq.n	8006076 <__lo0bits+0x22>
 800605e:	07da      	lsls	r2, r3, #31
 8006060:	d423      	bmi.n	80060aa <__lo0bits+0x56>
 8006062:	0798      	lsls	r0, r3, #30
 8006064:	bf49      	itett	mi
 8006066:	085b      	lsrmi	r3, r3, #1
 8006068:	089b      	lsrpl	r3, r3, #2
 800606a:	2001      	movmi	r0, #1
 800606c:	600b      	strmi	r3, [r1, #0]
 800606e:	bf5c      	itt	pl
 8006070:	600b      	strpl	r3, [r1, #0]
 8006072:	2002      	movpl	r0, #2
 8006074:	4770      	bx	lr
 8006076:	b298      	uxth	r0, r3
 8006078:	b9a8      	cbnz	r0, 80060a6 <__lo0bits+0x52>
 800607a:	0c1b      	lsrs	r3, r3, #16
 800607c:	2010      	movs	r0, #16
 800607e:	f013 0fff 	tst.w	r3, #255	; 0xff
 8006082:	bf04      	itt	eq
 8006084:	0a1b      	lsreq	r3, r3, #8
 8006086:	3008      	addeq	r0, #8
 8006088:	071a      	lsls	r2, r3, #28
 800608a:	bf04      	itt	eq
 800608c:	091b      	lsreq	r3, r3, #4
 800608e:	3004      	addeq	r0, #4
 8006090:	079a      	lsls	r2, r3, #30
 8006092:	bf04      	itt	eq
 8006094:	089b      	lsreq	r3, r3, #2
 8006096:	3002      	addeq	r0, #2
 8006098:	07da      	lsls	r2, r3, #31
 800609a:	d402      	bmi.n	80060a2 <__lo0bits+0x4e>
 800609c:	085b      	lsrs	r3, r3, #1
 800609e:	d006      	beq.n	80060ae <__lo0bits+0x5a>
 80060a0:	3001      	adds	r0, #1
 80060a2:	600b      	str	r3, [r1, #0]
 80060a4:	4770      	bx	lr
 80060a6:	4610      	mov	r0, r2
 80060a8:	e7e9      	b.n	800607e <__lo0bits+0x2a>
 80060aa:	2000      	movs	r0, #0
 80060ac:	4770      	bx	lr
 80060ae:	2020      	movs	r0, #32
 80060b0:	4770      	bx	lr

080060b2 <__i2b>:
 80060b2:	b510      	push	{r4, lr}
 80060b4:	460c      	mov	r4, r1
 80060b6:	2101      	movs	r1, #1
 80060b8:	f7ff ff27 	bl	8005f0a <_Balloc>
 80060bc:	2201      	movs	r2, #1
 80060be:	6144      	str	r4, [r0, #20]
 80060c0:	6102      	str	r2, [r0, #16]
 80060c2:	bd10      	pop	{r4, pc}

080060c4 <__multiply>:
 80060c4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80060c8:	4614      	mov	r4, r2
 80060ca:	690a      	ldr	r2, [r1, #16]
 80060cc:	6923      	ldr	r3, [r4, #16]
 80060ce:	429a      	cmp	r2, r3
 80060d0:	bfb8      	it	lt
 80060d2:	460b      	movlt	r3, r1
 80060d4:	4688      	mov	r8, r1
 80060d6:	bfbc      	itt	lt
 80060d8:	46a0      	movlt	r8, r4
 80060da:	461c      	movlt	r4, r3
 80060dc:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80060e0:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80060e4:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80060e8:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80060ec:	eb07 0609 	add.w	r6, r7, r9
 80060f0:	42b3      	cmp	r3, r6
 80060f2:	bfb8      	it	lt
 80060f4:	3101      	addlt	r1, #1
 80060f6:	f7ff ff08 	bl	8005f0a <_Balloc>
 80060fa:	f100 0514 	add.w	r5, r0, #20
 80060fe:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8006102:	462b      	mov	r3, r5
 8006104:	2200      	movs	r2, #0
 8006106:	4573      	cmp	r3, lr
 8006108:	d316      	bcc.n	8006138 <__multiply+0x74>
 800610a:	f104 0214 	add.w	r2, r4, #20
 800610e:	f108 0114 	add.w	r1, r8, #20
 8006112:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8006116:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800611a:	9300      	str	r3, [sp, #0]
 800611c:	9b00      	ldr	r3, [sp, #0]
 800611e:	9201      	str	r2, [sp, #4]
 8006120:	4293      	cmp	r3, r2
 8006122:	d80c      	bhi.n	800613e <__multiply+0x7a>
 8006124:	2e00      	cmp	r6, #0
 8006126:	dd03      	ble.n	8006130 <__multiply+0x6c>
 8006128:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800612c:	2b00      	cmp	r3, #0
 800612e:	d05d      	beq.n	80061ec <__multiply+0x128>
 8006130:	6106      	str	r6, [r0, #16]
 8006132:	b003      	add	sp, #12
 8006134:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006138:	f843 2b04 	str.w	r2, [r3], #4
 800613c:	e7e3      	b.n	8006106 <__multiply+0x42>
 800613e:	f8b2 b000 	ldrh.w	fp, [r2]
 8006142:	f1bb 0f00 	cmp.w	fp, #0
 8006146:	d023      	beq.n	8006190 <__multiply+0xcc>
 8006148:	4689      	mov	r9, r1
 800614a:	46ac      	mov	ip, r5
 800614c:	f04f 0800 	mov.w	r8, #0
 8006150:	f859 4b04 	ldr.w	r4, [r9], #4
 8006154:	f8dc a000 	ldr.w	sl, [ip]
 8006158:	b2a3      	uxth	r3, r4
 800615a:	fa1f fa8a 	uxth.w	sl, sl
 800615e:	fb0b a303 	mla	r3, fp, r3, sl
 8006162:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8006166:	f8dc 4000 	ldr.w	r4, [ip]
 800616a:	4443      	add	r3, r8
 800616c:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8006170:	fb0b 840a 	mla	r4, fp, sl, r8
 8006174:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8006178:	46e2      	mov	sl, ip
 800617a:	b29b      	uxth	r3, r3
 800617c:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8006180:	454f      	cmp	r7, r9
 8006182:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8006186:	f84a 3b04 	str.w	r3, [sl], #4
 800618a:	d82b      	bhi.n	80061e4 <__multiply+0x120>
 800618c:	f8cc 8004 	str.w	r8, [ip, #4]
 8006190:	9b01      	ldr	r3, [sp, #4]
 8006192:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8006196:	3204      	adds	r2, #4
 8006198:	f1ba 0f00 	cmp.w	sl, #0
 800619c:	d020      	beq.n	80061e0 <__multiply+0x11c>
 800619e:	682b      	ldr	r3, [r5, #0]
 80061a0:	4689      	mov	r9, r1
 80061a2:	46a8      	mov	r8, r5
 80061a4:	f04f 0b00 	mov.w	fp, #0
 80061a8:	f8b9 c000 	ldrh.w	ip, [r9]
 80061ac:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 80061b0:	fb0a 440c 	mla	r4, sl, ip, r4
 80061b4:	445c      	add	r4, fp
 80061b6:	46c4      	mov	ip, r8
 80061b8:	b29b      	uxth	r3, r3
 80061ba:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80061be:	f84c 3b04 	str.w	r3, [ip], #4
 80061c2:	f859 3b04 	ldr.w	r3, [r9], #4
 80061c6:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 80061ca:	0c1b      	lsrs	r3, r3, #16
 80061cc:	fb0a b303 	mla	r3, sl, r3, fp
 80061d0:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 80061d4:	454f      	cmp	r7, r9
 80061d6:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 80061da:	d805      	bhi.n	80061e8 <__multiply+0x124>
 80061dc:	f8c8 3004 	str.w	r3, [r8, #4]
 80061e0:	3504      	adds	r5, #4
 80061e2:	e79b      	b.n	800611c <__multiply+0x58>
 80061e4:	46d4      	mov	ip, sl
 80061e6:	e7b3      	b.n	8006150 <__multiply+0x8c>
 80061e8:	46e0      	mov	r8, ip
 80061ea:	e7dd      	b.n	80061a8 <__multiply+0xe4>
 80061ec:	3e01      	subs	r6, #1
 80061ee:	e799      	b.n	8006124 <__multiply+0x60>

080061f0 <__pow5mult>:
 80061f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80061f4:	4615      	mov	r5, r2
 80061f6:	f012 0203 	ands.w	r2, r2, #3
 80061fa:	4606      	mov	r6, r0
 80061fc:	460f      	mov	r7, r1
 80061fe:	d007      	beq.n	8006210 <__pow5mult+0x20>
 8006200:	3a01      	subs	r2, #1
 8006202:	4c21      	ldr	r4, [pc, #132]	; (8006288 <__pow5mult+0x98>)
 8006204:	2300      	movs	r3, #0
 8006206:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800620a:	f7ff fec9 	bl	8005fa0 <__multadd>
 800620e:	4607      	mov	r7, r0
 8006210:	10ad      	asrs	r5, r5, #2
 8006212:	d035      	beq.n	8006280 <__pow5mult+0x90>
 8006214:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8006216:	b93c      	cbnz	r4, 8006228 <__pow5mult+0x38>
 8006218:	2010      	movs	r0, #16
 800621a:	f7ff fe63 	bl	8005ee4 <malloc>
 800621e:	6270      	str	r0, [r6, #36]	; 0x24
 8006220:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006224:	6004      	str	r4, [r0, #0]
 8006226:	60c4      	str	r4, [r0, #12]
 8006228:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800622c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006230:	b94c      	cbnz	r4, 8006246 <__pow5mult+0x56>
 8006232:	f240 2171 	movw	r1, #625	; 0x271
 8006236:	4630      	mov	r0, r6
 8006238:	f7ff ff3b 	bl	80060b2 <__i2b>
 800623c:	2300      	movs	r3, #0
 800623e:	f8c8 0008 	str.w	r0, [r8, #8]
 8006242:	4604      	mov	r4, r0
 8006244:	6003      	str	r3, [r0, #0]
 8006246:	f04f 0800 	mov.w	r8, #0
 800624a:	07eb      	lsls	r3, r5, #31
 800624c:	d50a      	bpl.n	8006264 <__pow5mult+0x74>
 800624e:	4639      	mov	r1, r7
 8006250:	4622      	mov	r2, r4
 8006252:	4630      	mov	r0, r6
 8006254:	f7ff ff36 	bl	80060c4 <__multiply>
 8006258:	4639      	mov	r1, r7
 800625a:	4681      	mov	r9, r0
 800625c:	4630      	mov	r0, r6
 800625e:	f7ff fe88 	bl	8005f72 <_Bfree>
 8006262:	464f      	mov	r7, r9
 8006264:	106d      	asrs	r5, r5, #1
 8006266:	d00b      	beq.n	8006280 <__pow5mult+0x90>
 8006268:	6820      	ldr	r0, [r4, #0]
 800626a:	b938      	cbnz	r0, 800627c <__pow5mult+0x8c>
 800626c:	4622      	mov	r2, r4
 800626e:	4621      	mov	r1, r4
 8006270:	4630      	mov	r0, r6
 8006272:	f7ff ff27 	bl	80060c4 <__multiply>
 8006276:	6020      	str	r0, [r4, #0]
 8006278:	f8c0 8000 	str.w	r8, [r0]
 800627c:	4604      	mov	r4, r0
 800627e:	e7e4      	b.n	800624a <__pow5mult+0x5a>
 8006280:	4638      	mov	r0, r7
 8006282:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006286:	bf00      	nop
 8006288:	08006738 	.word	0x08006738

0800628c <__lshift>:
 800628c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006290:	460c      	mov	r4, r1
 8006292:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006296:	6923      	ldr	r3, [r4, #16]
 8006298:	6849      	ldr	r1, [r1, #4]
 800629a:	eb0a 0903 	add.w	r9, sl, r3
 800629e:	68a3      	ldr	r3, [r4, #8]
 80062a0:	4607      	mov	r7, r0
 80062a2:	4616      	mov	r6, r2
 80062a4:	f109 0501 	add.w	r5, r9, #1
 80062a8:	42ab      	cmp	r3, r5
 80062aa:	db32      	blt.n	8006312 <__lshift+0x86>
 80062ac:	4638      	mov	r0, r7
 80062ae:	f7ff fe2c 	bl	8005f0a <_Balloc>
 80062b2:	2300      	movs	r3, #0
 80062b4:	4680      	mov	r8, r0
 80062b6:	f100 0114 	add.w	r1, r0, #20
 80062ba:	461a      	mov	r2, r3
 80062bc:	4553      	cmp	r3, sl
 80062be:	db2b      	blt.n	8006318 <__lshift+0x8c>
 80062c0:	6920      	ldr	r0, [r4, #16]
 80062c2:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80062c6:	f104 0314 	add.w	r3, r4, #20
 80062ca:	f016 021f 	ands.w	r2, r6, #31
 80062ce:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80062d2:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80062d6:	d025      	beq.n	8006324 <__lshift+0x98>
 80062d8:	f1c2 0e20 	rsb	lr, r2, #32
 80062dc:	2000      	movs	r0, #0
 80062de:	681e      	ldr	r6, [r3, #0]
 80062e0:	468a      	mov	sl, r1
 80062e2:	4096      	lsls	r6, r2
 80062e4:	4330      	orrs	r0, r6
 80062e6:	f84a 0b04 	str.w	r0, [sl], #4
 80062ea:	f853 0b04 	ldr.w	r0, [r3], #4
 80062ee:	459c      	cmp	ip, r3
 80062f0:	fa20 f00e 	lsr.w	r0, r0, lr
 80062f4:	d814      	bhi.n	8006320 <__lshift+0x94>
 80062f6:	6048      	str	r0, [r1, #4]
 80062f8:	b108      	cbz	r0, 80062fe <__lshift+0x72>
 80062fa:	f109 0502 	add.w	r5, r9, #2
 80062fe:	3d01      	subs	r5, #1
 8006300:	4638      	mov	r0, r7
 8006302:	f8c8 5010 	str.w	r5, [r8, #16]
 8006306:	4621      	mov	r1, r4
 8006308:	f7ff fe33 	bl	8005f72 <_Bfree>
 800630c:	4640      	mov	r0, r8
 800630e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006312:	3101      	adds	r1, #1
 8006314:	005b      	lsls	r3, r3, #1
 8006316:	e7c7      	b.n	80062a8 <__lshift+0x1c>
 8006318:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800631c:	3301      	adds	r3, #1
 800631e:	e7cd      	b.n	80062bc <__lshift+0x30>
 8006320:	4651      	mov	r1, sl
 8006322:	e7dc      	b.n	80062de <__lshift+0x52>
 8006324:	3904      	subs	r1, #4
 8006326:	f853 2b04 	ldr.w	r2, [r3], #4
 800632a:	f841 2f04 	str.w	r2, [r1, #4]!
 800632e:	459c      	cmp	ip, r3
 8006330:	d8f9      	bhi.n	8006326 <__lshift+0x9a>
 8006332:	e7e4      	b.n	80062fe <__lshift+0x72>

08006334 <__mcmp>:
 8006334:	6903      	ldr	r3, [r0, #16]
 8006336:	690a      	ldr	r2, [r1, #16]
 8006338:	1a9b      	subs	r3, r3, r2
 800633a:	b530      	push	{r4, r5, lr}
 800633c:	d10c      	bne.n	8006358 <__mcmp+0x24>
 800633e:	0092      	lsls	r2, r2, #2
 8006340:	3014      	adds	r0, #20
 8006342:	3114      	adds	r1, #20
 8006344:	1884      	adds	r4, r0, r2
 8006346:	4411      	add	r1, r2
 8006348:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800634c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8006350:	4295      	cmp	r5, r2
 8006352:	d003      	beq.n	800635c <__mcmp+0x28>
 8006354:	d305      	bcc.n	8006362 <__mcmp+0x2e>
 8006356:	2301      	movs	r3, #1
 8006358:	4618      	mov	r0, r3
 800635a:	bd30      	pop	{r4, r5, pc}
 800635c:	42a0      	cmp	r0, r4
 800635e:	d3f3      	bcc.n	8006348 <__mcmp+0x14>
 8006360:	e7fa      	b.n	8006358 <__mcmp+0x24>
 8006362:	f04f 33ff 	mov.w	r3, #4294967295
 8006366:	e7f7      	b.n	8006358 <__mcmp+0x24>

08006368 <__mdiff>:
 8006368:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800636c:	460d      	mov	r5, r1
 800636e:	4607      	mov	r7, r0
 8006370:	4611      	mov	r1, r2
 8006372:	4628      	mov	r0, r5
 8006374:	4614      	mov	r4, r2
 8006376:	f7ff ffdd 	bl	8006334 <__mcmp>
 800637a:	1e06      	subs	r6, r0, #0
 800637c:	d108      	bne.n	8006390 <__mdiff+0x28>
 800637e:	4631      	mov	r1, r6
 8006380:	4638      	mov	r0, r7
 8006382:	f7ff fdc2 	bl	8005f0a <_Balloc>
 8006386:	2301      	movs	r3, #1
 8006388:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800638c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006390:	bfa4      	itt	ge
 8006392:	4623      	movge	r3, r4
 8006394:	462c      	movge	r4, r5
 8006396:	4638      	mov	r0, r7
 8006398:	6861      	ldr	r1, [r4, #4]
 800639a:	bfa6      	itte	ge
 800639c:	461d      	movge	r5, r3
 800639e:	2600      	movge	r6, #0
 80063a0:	2601      	movlt	r6, #1
 80063a2:	f7ff fdb2 	bl	8005f0a <_Balloc>
 80063a6:	692b      	ldr	r3, [r5, #16]
 80063a8:	60c6      	str	r6, [r0, #12]
 80063aa:	6926      	ldr	r6, [r4, #16]
 80063ac:	f105 0914 	add.w	r9, r5, #20
 80063b0:	f104 0214 	add.w	r2, r4, #20
 80063b4:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 80063b8:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 80063bc:	f100 0514 	add.w	r5, r0, #20
 80063c0:	f04f 0e00 	mov.w	lr, #0
 80063c4:	f852 ab04 	ldr.w	sl, [r2], #4
 80063c8:	f859 4b04 	ldr.w	r4, [r9], #4
 80063cc:	fa1e f18a 	uxtah	r1, lr, sl
 80063d0:	b2a3      	uxth	r3, r4
 80063d2:	1ac9      	subs	r1, r1, r3
 80063d4:	0c23      	lsrs	r3, r4, #16
 80063d6:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 80063da:	eb03 4321 	add.w	r3, r3, r1, asr #16
 80063de:	b289      	uxth	r1, r1
 80063e0:	ea4f 4e23 	mov.w	lr, r3, asr #16
 80063e4:	45c8      	cmp	r8, r9
 80063e6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80063ea:	4694      	mov	ip, r2
 80063ec:	f845 3b04 	str.w	r3, [r5], #4
 80063f0:	d8e8      	bhi.n	80063c4 <__mdiff+0x5c>
 80063f2:	45bc      	cmp	ip, r7
 80063f4:	d304      	bcc.n	8006400 <__mdiff+0x98>
 80063f6:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 80063fa:	b183      	cbz	r3, 800641e <__mdiff+0xb6>
 80063fc:	6106      	str	r6, [r0, #16]
 80063fe:	e7c5      	b.n	800638c <__mdiff+0x24>
 8006400:	f85c 1b04 	ldr.w	r1, [ip], #4
 8006404:	fa1e f381 	uxtah	r3, lr, r1
 8006408:	141a      	asrs	r2, r3, #16
 800640a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800640e:	b29b      	uxth	r3, r3
 8006410:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006414:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8006418:	f845 3b04 	str.w	r3, [r5], #4
 800641c:	e7e9      	b.n	80063f2 <__mdiff+0x8a>
 800641e:	3e01      	subs	r6, #1
 8006420:	e7e9      	b.n	80063f6 <__mdiff+0x8e>

08006422 <__d2b>:
 8006422:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8006426:	460e      	mov	r6, r1
 8006428:	2101      	movs	r1, #1
 800642a:	ec59 8b10 	vmov	r8, r9, d0
 800642e:	4615      	mov	r5, r2
 8006430:	f7ff fd6b 	bl	8005f0a <_Balloc>
 8006434:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8006438:	4607      	mov	r7, r0
 800643a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800643e:	bb34      	cbnz	r4, 800648e <__d2b+0x6c>
 8006440:	9301      	str	r3, [sp, #4]
 8006442:	f1b8 0300 	subs.w	r3, r8, #0
 8006446:	d027      	beq.n	8006498 <__d2b+0x76>
 8006448:	a802      	add	r0, sp, #8
 800644a:	f840 3d08 	str.w	r3, [r0, #-8]!
 800644e:	f7ff fe01 	bl	8006054 <__lo0bits>
 8006452:	9900      	ldr	r1, [sp, #0]
 8006454:	b1f0      	cbz	r0, 8006494 <__d2b+0x72>
 8006456:	9a01      	ldr	r2, [sp, #4]
 8006458:	f1c0 0320 	rsb	r3, r0, #32
 800645c:	fa02 f303 	lsl.w	r3, r2, r3
 8006460:	430b      	orrs	r3, r1
 8006462:	40c2      	lsrs	r2, r0
 8006464:	617b      	str	r3, [r7, #20]
 8006466:	9201      	str	r2, [sp, #4]
 8006468:	9b01      	ldr	r3, [sp, #4]
 800646a:	61bb      	str	r3, [r7, #24]
 800646c:	2b00      	cmp	r3, #0
 800646e:	bf14      	ite	ne
 8006470:	2102      	movne	r1, #2
 8006472:	2101      	moveq	r1, #1
 8006474:	6139      	str	r1, [r7, #16]
 8006476:	b1c4      	cbz	r4, 80064aa <__d2b+0x88>
 8006478:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800647c:	4404      	add	r4, r0
 800647e:	6034      	str	r4, [r6, #0]
 8006480:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8006484:	6028      	str	r0, [r5, #0]
 8006486:	4638      	mov	r0, r7
 8006488:	b003      	add	sp, #12
 800648a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800648e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006492:	e7d5      	b.n	8006440 <__d2b+0x1e>
 8006494:	6179      	str	r1, [r7, #20]
 8006496:	e7e7      	b.n	8006468 <__d2b+0x46>
 8006498:	a801      	add	r0, sp, #4
 800649a:	f7ff fddb 	bl	8006054 <__lo0bits>
 800649e:	9b01      	ldr	r3, [sp, #4]
 80064a0:	617b      	str	r3, [r7, #20]
 80064a2:	2101      	movs	r1, #1
 80064a4:	6139      	str	r1, [r7, #16]
 80064a6:	3020      	adds	r0, #32
 80064a8:	e7e5      	b.n	8006476 <__d2b+0x54>
 80064aa:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 80064ae:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80064b2:	6030      	str	r0, [r6, #0]
 80064b4:	6918      	ldr	r0, [r3, #16]
 80064b6:	f7ff fdae 	bl	8006016 <__hi0bits>
 80064ba:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 80064be:	e7e1      	b.n	8006484 <__d2b+0x62>

080064c0 <_calloc_r>:
 80064c0:	b538      	push	{r3, r4, r5, lr}
 80064c2:	fb02 f401 	mul.w	r4, r2, r1
 80064c6:	4621      	mov	r1, r4
 80064c8:	f000 f808 	bl	80064dc <_malloc_r>
 80064cc:	4605      	mov	r5, r0
 80064ce:	b118      	cbz	r0, 80064d8 <_calloc_r+0x18>
 80064d0:	4622      	mov	r2, r4
 80064d2:	2100      	movs	r1, #0
 80064d4:	f7fe fbec 	bl	8004cb0 <memset>
 80064d8:	4628      	mov	r0, r5
 80064da:	bd38      	pop	{r3, r4, r5, pc}

080064dc <_malloc_r>:
 80064dc:	b570      	push	{r4, r5, r6, lr}
 80064de:	1ccd      	adds	r5, r1, #3
 80064e0:	f025 0503 	bic.w	r5, r5, #3
 80064e4:	3508      	adds	r5, #8
 80064e6:	2d0c      	cmp	r5, #12
 80064e8:	bf38      	it	cc
 80064ea:	250c      	movcc	r5, #12
 80064ec:	2d00      	cmp	r5, #0
 80064ee:	4606      	mov	r6, r0
 80064f0:	db01      	blt.n	80064f6 <_malloc_r+0x1a>
 80064f2:	42a9      	cmp	r1, r5
 80064f4:	d903      	bls.n	80064fe <_malloc_r+0x22>
 80064f6:	230c      	movs	r3, #12
 80064f8:	6033      	str	r3, [r6, #0]
 80064fa:	2000      	movs	r0, #0
 80064fc:	bd70      	pop	{r4, r5, r6, pc}
 80064fe:	f000 f869 	bl	80065d4 <__malloc_lock>
 8006502:	4a21      	ldr	r2, [pc, #132]	; (8006588 <_malloc_r+0xac>)
 8006504:	6814      	ldr	r4, [r2, #0]
 8006506:	4621      	mov	r1, r4
 8006508:	b991      	cbnz	r1, 8006530 <_malloc_r+0x54>
 800650a:	4c20      	ldr	r4, [pc, #128]	; (800658c <_malloc_r+0xb0>)
 800650c:	6823      	ldr	r3, [r4, #0]
 800650e:	b91b      	cbnz	r3, 8006518 <_malloc_r+0x3c>
 8006510:	4630      	mov	r0, r6
 8006512:	f000 f83d 	bl	8006590 <_sbrk_r>
 8006516:	6020      	str	r0, [r4, #0]
 8006518:	4629      	mov	r1, r5
 800651a:	4630      	mov	r0, r6
 800651c:	f000 f838 	bl	8006590 <_sbrk_r>
 8006520:	1c43      	adds	r3, r0, #1
 8006522:	d124      	bne.n	800656e <_malloc_r+0x92>
 8006524:	230c      	movs	r3, #12
 8006526:	6033      	str	r3, [r6, #0]
 8006528:	4630      	mov	r0, r6
 800652a:	f000 f854 	bl	80065d6 <__malloc_unlock>
 800652e:	e7e4      	b.n	80064fa <_malloc_r+0x1e>
 8006530:	680b      	ldr	r3, [r1, #0]
 8006532:	1b5b      	subs	r3, r3, r5
 8006534:	d418      	bmi.n	8006568 <_malloc_r+0x8c>
 8006536:	2b0b      	cmp	r3, #11
 8006538:	d90f      	bls.n	800655a <_malloc_r+0x7e>
 800653a:	600b      	str	r3, [r1, #0]
 800653c:	50cd      	str	r5, [r1, r3]
 800653e:	18cc      	adds	r4, r1, r3
 8006540:	4630      	mov	r0, r6
 8006542:	f000 f848 	bl	80065d6 <__malloc_unlock>
 8006546:	f104 000b 	add.w	r0, r4, #11
 800654a:	1d23      	adds	r3, r4, #4
 800654c:	f020 0007 	bic.w	r0, r0, #7
 8006550:	1ac3      	subs	r3, r0, r3
 8006552:	d0d3      	beq.n	80064fc <_malloc_r+0x20>
 8006554:	425a      	negs	r2, r3
 8006556:	50e2      	str	r2, [r4, r3]
 8006558:	e7d0      	b.n	80064fc <_malloc_r+0x20>
 800655a:	428c      	cmp	r4, r1
 800655c:	684b      	ldr	r3, [r1, #4]
 800655e:	bf16      	itet	ne
 8006560:	6063      	strne	r3, [r4, #4]
 8006562:	6013      	streq	r3, [r2, #0]
 8006564:	460c      	movne	r4, r1
 8006566:	e7eb      	b.n	8006540 <_malloc_r+0x64>
 8006568:	460c      	mov	r4, r1
 800656a:	6849      	ldr	r1, [r1, #4]
 800656c:	e7cc      	b.n	8006508 <_malloc_r+0x2c>
 800656e:	1cc4      	adds	r4, r0, #3
 8006570:	f024 0403 	bic.w	r4, r4, #3
 8006574:	42a0      	cmp	r0, r4
 8006576:	d005      	beq.n	8006584 <_malloc_r+0xa8>
 8006578:	1a21      	subs	r1, r4, r0
 800657a:	4630      	mov	r0, r6
 800657c:	f000 f808 	bl	8006590 <_sbrk_r>
 8006580:	3001      	adds	r0, #1
 8006582:	d0cf      	beq.n	8006524 <_malloc_r+0x48>
 8006584:	6025      	str	r5, [r4, #0]
 8006586:	e7db      	b.n	8006540 <_malloc_r+0x64>
 8006588:	200001fc 	.word	0x200001fc
 800658c:	20000200 	.word	0x20000200

08006590 <_sbrk_r>:
 8006590:	b538      	push	{r3, r4, r5, lr}
 8006592:	4c06      	ldr	r4, [pc, #24]	; (80065ac <_sbrk_r+0x1c>)
 8006594:	2300      	movs	r3, #0
 8006596:	4605      	mov	r5, r0
 8006598:	4608      	mov	r0, r1
 800659a:	6023      	str	r3, [r4, #0]
 800659c:	f7fa fcc0 	bl	8000f20 <_sbrk>
 80065a0:	1c43      	adds	r3, r0, #1
 80065a2:	d102      	bne.n	80065aa <_sbrk_r+0x1a>
 80065a4:	6823      	ldr	r3, [r4, #0]
 80065a6:	b103      	cbz	r3, 80065aa <_sbrk_r+0x1a>
 80065a8:	602b      	str	r3, [r5, #0]
 80065aa:	bd38      	pop	{r3, r4, r5, pc}
 80065ac:	20000720 	.word	0x20000720

080065b0 <__ascii_mbtowc>:
 80065b0:	b082      	sub	sp, #8
 80065b2:	b901      	cbnz	r1, 80065b6 <__ascii_mbtowc+0x6>
 80065b4:	a901      	add	r1, sp, #4
 80065b6:	b142      	cbz	r2, 80065ca <__ascii_mbtowc+0x1a>
 80065b8:	b14b      	cbz	r3, 80065ce <__ascii_mbtowc+0x1e>
 80065ba:	7813      	ldrb	r3, [r2, #0]
 80065bc:	600b      	str	r3, [r1, #0]
 80065be:	7812      	ldrb	r2, [r2, #0]
 80065c0:	1c10      	adds	r0, r2, #0
 80065c2:	bf18      	it	ne
 80065c4:	2001      	movne	r0, #1
 80065c6:	b002      	add	sp, #8
 80065c8:	4770      	bx	lr
 80065ca:	4610      	mov	r0, r2
 80065cc:	e7fb      	b.n	80065c6 <__ascii_mbtowc+0x16>
 80065ce:	f06f 0001 	mvn.w	r0, #1
 80065d2:	e7f8      	b.n	80065c6 <__ascii_mbtowc+0x16>

080065d4 <__malloc_lock>:
 80065d4:	4770      	bx	lr

080065d6 <__malloc_unlock>:
 80065d6:	4770      	bx	lr

080065d8 <__ascii_wctomb>:
 80065d8:	b149      	cbz	r1, 80065ee <__ascii_wctomb+0x16>
 80065da:	2aff      	cmp	r2, #255	; 0xff
 80065dc:	bf85      	ittet	hi
 80065de:	238a      	movhi	r3, #138	; 0x8a
 80065e0:	6003      	strhi	r3, [r0, #0]
 80065e2:	700a      	strbls	r2, [r1, #0]
 80065e4:	f04f 30ff 	movhi.w	r0, #4294967295
 80065e8:	bf98      	it	ls
 80065ea:	2001      	movls	r0, #1
 80065ec:	4770      	bx	lr
 80065ee:	4608      	mov	r0, r1
 80065f0:	4770      	bx	lr
	...

080065f4 <_init>:
 80065f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80065f6:	bf00      	nop
 80065f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80065fa:	bc08      	pop	{r3}
 80065fc:	469e      	mov	lr, r3
 80065fe:	4770      	bx	lr

08006600 <_fini>:
 8006600:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006602:	bf00      	nop
 8006604:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006606:	bc08      	pop	{r3}
 8006608:	469e      	mov	lr, r3
 800660a:	4770      	bx	lr
